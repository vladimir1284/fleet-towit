/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OverdueCondition } from './OverdueCondition';
import {
    OverdueConditionFromJSON,
    OverdueConditionFromJSONTyped,
    OverdueConditionToJSON,
} from './OverdueCondition';

/**
 * 
 * @export
 * @interface OverdueStateConfig
 */
export interface OverdueStateConfig {
    /**
     * 
     * @type {string}
     * @memberof OverdueStateConfig
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OverdueStateConfig
     */
    isClearState?: boolean;
    /**
     * 
     * @type {OverdueCondition}
     * @memberof OverdueStateConfig
     */
    condition?: OverdueCondition;
    /**
     * 
     * @type {string}
     * @memberof OverdueStateConfig
     */
    externalMessage?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OverdueStateConfig
     */
    isBlockChanges?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OverdueStateConfig
     */
    isDisableEntitlement?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OverdueStateConfig
     */
    subscriptionCancellationPolicy?: OverdueStateConfigSubscriptionCancellationPolicyEnum;
    /**
     * 
     * @type {number}
     * @memberof OverdueStateConfig
     */
    autoReevaluationIntervalDays?: number;
}


/**
 * @export
 */
export const OverdueStateConfigSubscriptionCancellationPolicyEnum = {
    EndOfTerm: 'END_OF_TERM',
    Immediate: 'IMMEDIATE',
    None: 'NONE'
} as const;
export type OverdueStateConfigSubscriptionCancellationPolicyEnum = typeof OverdueStateConfigSubscriptionCancellationPolicyEnum[keyof typeof OverdueStateConfigSubscriptionCancellationPolicyEnum];


/**
 * Check if a given object implements the OverdueStateConfig interface.
 */
export function instanceOfOverdueStateConfig(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OverdueStateConfigFromJSON(json: any): OverdueStateConfig {
    return OverdueStateConfigFromJSONTyped(json, false);
}

export function OverdueStateConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): OverdueStateConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'isClearState': !exists(json, 'isClearState') ? undefined : json['isClearState'],
        'condition': !exists(json, 'condition') ? undefined : OverdueConditionFromJSON(json['condition']),
        'externalMessage': !exists(json, 'externalMessage') ? undefined : json['externalMessage'],
        'isBlockChanges': !exists(json, 'isBlockChanges') ? undefined : json['isBlockChanges'],
        'isDisableEntitlement': !exists(json, 'isDisableEntitlement') ? undefined : json['isDisableEntitlement'],
        'subscriptionCancellationPolicy': !exists(json, 'subscriptionCancellationPolicy') ? undefined : json['subscriptionCancellationPolicy'],
        'autoReevaluationIntervalDays': !exists(json, 'autoReevaluationIntervalDays') ? undefined : json['autoReevaluationIntervalDays'],
    };
}

export function OverdueStateConfigToJSON(value?: OverdueStateConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'isClearState': value.isClearState,
        'condition': OverdueConditionToJSON(value.condition),
        'externalMessage': value.externalMessage,
        'isBlockChanges': value.isBlockChanges,
        'isDisableEntitlement': value.isDisableEntitlement,
        'subscriptionCancellationPolicy': value.subscriptionCancellationPolicy,
        'autoReevaluationIntervalDays': value.autoReevaluationIntervalDays,
    };
}

