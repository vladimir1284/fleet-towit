/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Phase } from './Phase';
import { PhaseFromJSON, PhaseFromJSONTyped, PhaseToJSON } from './Phase';

/**
 *
 * @export
 * @interface Plan
 */
export interface Plan {
	/**
	 *
	 * @type {string}
	 * @memberof Plan
	 */
	name?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Plan
	 */
	prettyName?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Plan
	 */
	recurringBillingMode?: PlanRecurringBillingModeEnum;
	/**
	 *
	 * @type {string}
	 * @memberof Plan
	 */
	billingPeriod?: PlanBillingPeriodEnum;
	/**
	 *
	 * @type {Array<Phase>}
	 * @memberof Plan
	 */
	phases?: Array<Phase>;
}

/**
 * @export
 */
export const PlanRecurringBillingModeEnum = {
	Advance: 'IN_ADVANCE',
	Arrear: 'IN_ARREAR'
} as const;
export type PlanRecurringBillingModeEnum =
	(typeof PlanRecurringBillingModeEnum)[keyof typeof PlanRecurringBillingModeEnum];

/**
 * @export
 */
export const PlanBillingPeriodEnum = {
	Daily: 'DAILY',
	Weekly: 'WEEKLY',
	Biweekly: 'BIWEEKLY',
	ThirtyDays: 'THIRTY_DAYS',
	ThirtyOneDays: 'THIRTY_ONE_DAYS',
	SixtyDays: 'SIXTY_DAYS',
	NinetyDays: 'NINETY_DAYS',
	Monthly: 'MONTHLY',
	Bimestrial: 'BIMESTRIAL',
	Quarterly: 'QUARTERLY',
	Triannual: 'TRIANNUAL',
	Biannual: 'BIANNUAL',
	Annual: 'ANNUAL',
	Sesquiennial: 'SESQUIENNIAL',
	Biennial: 'BIENNIAL',
	Triennial: 'TRIENNIAL',
	NoBillingPeriod: 'NO_BILLING_PERIOD'
} as const;
export type PlanBillingPeriodEnum =
	(typeof PlanBillingPeriodEnum)[keyof typeof PlanBillingPeriodEnum];

/**
 * Check if a given object implements the Plan interface.
 */
export function instanceOfPlan(value: object): boolean {
	let isInstance = true;

	return isInstance;
}

export function PlanFromJSON(json: any): Plan {
	return PlanFromJSONTyped(json, false);
}

export function PlanFromJSONTyped(json: any, ignoreDiscriminator: boolean): Plan {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		name: !exists(json, 'name') ? undefined : json['name'],
		prettyName: !exists(json, 'prettyName') ? undefined : json['prettyName'],
		recurringBillingMode: !exists(json, 'recurringBillingMode')
			? undefined
			: json['recurringBillingMode'],
		billingPeriod: !exists(json, 'billingPeriod') ? undefined : json['billingPeriod'],
		phases: !exists(json, 'phases') ? undefined : (json['phases'] as Array<any>).map(PhaseFromJSON)
	};
}

export function PlanToJSON(value?: Plan | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		name: value.name,
		prettyName: value.prettyName,
		recurringBillingMode: value.recurringBillingMode,
		billingPeriod: value.billingPeriod,
		phases: value.phases === undefined ? undefined : (value.phases as Array<any>).map(PhaseToJSON)
	};
}
