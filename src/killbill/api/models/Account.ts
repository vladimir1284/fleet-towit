/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditLog } from './AuditLog';
import {
    AuditLogFromJSON,
    AuditLogFromJSONTyped,
    AuditLogToJSON,
} from './AuditLog';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    accountId?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    firstNameLength?: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    externalKey?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    email?: string;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    billCycleDayLocal?: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    currency?: AccountCurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    parentAccountId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Account
     */
    isPaymentDelegatedToParent?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    paymentMethodId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Account
     */
    referenceTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    timeZone?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    address1?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    address2?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    company?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    locale?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    notes?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Account
     */
    isMigrated?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    accountBalance?: number;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    accountCBA?: number;
    /**
     * 
     * @type {Array<AuditLog>}
     * @memberof Account
     */
    auditLogs?: Array<AuditLog>;
}


/**
 * @export
 */
export const AccountCurrencyEnum = {
    Aed: 'AED',
    Afn: 'AFN',
    All: 'ALL',
    Amd: 'AMD',
    Ang: 'ANG',
    Aoa: 'AOA',
    Ars: 'ARS',
    Aud: 'AUD',
    Awg: 'AWG',
    Azn: 'AZN',
    Bam: 'BAM',
    Bbd: 'BBD',
    Bdt: 'BDT',
    Bgn: 'BGN',
    Bhd: 'BHD',
    Bif: 'BIF',
    Bmd: 'BMD',
    Bnd: 'BND',
    Bob: 'BOB',
    Brl: 'BRL',
    Bsd: 'BSD',
    Btn: 'BTN',
    Bwp: 'BWP',
    Byr: 'BYR',
    Bzd: 'BZD',
    Cad: 'CAD',
    Cdf: 'CDF',
    Chf: 'CHF',
    Clp: 'CLP',
    Cny: 'CNY',
    Cop: 'COP',
    Crc: 'CRC',
    Cuc: 'CUC',
    Cup: 'CUP',
    Cve: 'CVE',
    Czk: 'CZK',
    Djf: 'DJF',
    Dkk: 'DKK',
    Dop: 'DOP',
    Dzd: 'DZD',
    Egp: 'EGP',
    Ern: 'ERN',
    Etb: 'ETB',
    Eur: 'EUR',
    Fjd: 'FJD',
    Fkp: 'FKP',
    Gbp: 'GBP',
    Gel: 'GEL',
    Ggp: 'GGP',
    Ghs: 'GHS',
    Gip: 'GIP',
    Gmd: 'GMD',
    Gnf: 'GNF',
    Gtq: 'GTQ',
    Gyd: 'GYD',
    Hkd: 'HKD',
    Hnl: 'HNL',
    Hrk: 'HRK',
    Htg: 'HTG',
    Huf: 'HUF',
    Idr: 'IDR',
    Ils: 'ILS',
    Imp: 'IMP',
    Inr: 'INR',
    Iqd: 'IQD',
    Irr: 'IRR',
    Isk: 'ISK',
    Jep: 'JEP',
    Jmd: 'JMD',
    Jod: 'JOD',
    Jpy: 'JPY',
    Kes: 'KES',
    Kgs: 'KGS',
    Khr: 'KHR',
    Kmf: 'KMF',
    Kpw: 'KPW',
    Krw: 'KRW',
    Kwd: 'KWD',
    Kyd: 'KYD',
    Kzt: 'KZT',
    Lak: 'LAK',
    Lbp: 'LBP',
    Lkr: 'LKR',
    Lrd: 'LRD',
    Lsl: 'LSL',
    Ltl: 'LTL',
    Lvl: 'LVL',
    Lyd: 'LYD',
    Mad: 'MAD',
    Mdl: 'MDL',
    Mga: 'MGA',
    Mkd: 'MKD',
    Mmk: 'MMK',
    Mnt: 'MNT',
    Mop: 'MOP',
    Mro: 'MRO',
    Mur: 'MUR',
    Mvr: 'MVR',
    Mwk: 'MWK',
    Mxn: 'MXN',
    Myr: 'MYR',
    Mzn: 'MZN',
    Nad: 'NAD',
    Ngn: 'NGN',
    Nio: 'NIO',
    Nok: 'NOK',
    Npr: 'NPR',
    Nzd: 'NZD',
    Omr: 'OMR',
    Pab: 'PAB',
    Pen: 'PEN',
    Pgk: 'PGK',
    Php: 'PHP',
    Pkr: 'PKR',
    Pln: 'PLN',
    Pyg: 'PYG',
    Qar: 'QAR',
    Ron: 'RON',
    Rsd: 'RSD',
    Rub: 'RUB',
    Rwf: 'RWF',
    Sar: 'SAR',
    Sbd: 'SBD',
    Scr: 'SCR',
    Sdg: 'SDG',
    Sek: 'SEK',
    Sgd: 'SGD',
    Shp: 'SHP',
    Sll: 'SLL',
    Sos: 'SOS',
    Spl: 'SPL',
    Srd: 'SRD',
    Std: 'STD',
    Svc: 'SVC',
    Syp: 'SYP',
    Szl: 'SZL',
    Thb: 'THB',
    Tjs: 'TJS',
    Tmt: 'TMT',
    Tnd: 'TND',
    Top: 'TOP',
    Try: 'TRY',
    Ttd: 'TTD',
    Tvd: 'TVD',
    Twd: 'TWD',
    Tzs: 'TZS',
    Uah: 'UAH',
    Ugx: 'UGX',
    Usd: 'USD',
    Uyu: 'UYU',
    Uzs: 'UZS',
    Vef: 'VEF',
    Vnd: 'VND',
    Vuv: 'VUV',
    Wst: 'WST',
    Xaf: 'XAF',
    Xcd: 'XCD',
    Xdr: 'XDR',
    Xof: 'XOF',
    Xpf: 'XPF',
    Yer: 'YER',
    Zar: 'ZAR',
    Zmw: 'ZMW',
    Zwd: 'ZWD',
    Btc: 'BTC'
} as const;
export type AccountCurrencyEnum = typeof AccountCurrencyEnum[keyof typeof AccountCurrencyEnum];


/**
 * Check if a given object implements the Account interface.
 */
export function instanceOfAccount(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AccountFromJSON(json: any): Account {
    return AccountFromJSONTyped(json, false);
}

export function AccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): Account {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountId': !exists(json, 'accountId') ? undefined : json['accountId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'firstNameLength': !exists(json, 'firstNameLength') ? undefined : json['firstNameLength'],
        'externalKey': !exists(json, 'externalKey') ? undefined : json['externalKey'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'billCycleDayLocal': !exists(json, 'billCycleDayLocal') ? undefined : json['billCycleDayLocal'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'parentAccountId': !exists(json, 'parentAccountId') ? undefined : json['parentAccountId'],
        'isPaymentDelegatedToParent': !exists(json, 'isPaymentDelegatedToParent') ? undefined : json['isPaymentDelegatedToParent'],
        'paymentMethodId': !exists(json, 'paymentMethodId') ? undefined : json['paymentMethodId'],
        'referenceTime': !exists(json, 'referenceTime') ? undefined : (new Date(json['referenceTime'])),
        'timeZone': !exists(json, 'timeZone') ? undefined : json['timeZone'],
        'address1': !exists(json, 'address1') ? undefined : json['address1'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'postalCode': !exists(json, 'postalCode') ? undefined : json['postalCode'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'isMigrated': !exists(json, 'isMigrated') ? undefined : json['isMigrated'],
        'accountBalance': !exists(json, 'accountBalance') ? undefined : json['accountBalance'],
        'accountCBA': !exists(json, 'accountCBA') ? undefined : json['accountCBA'],
        'auditLogs': !exists(json, 'auditLogs') ? undefined : ((json['auditLogs'] as Array<any>).map(AuditLogFromJSON)),
    };
}

export function AccountToJSON(value?: Account | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accountId': value.accountId,
        'name': value.name,
        'firstNameLength': value.firstNameLength,
        'externalKey': value.externalKey,
        'email': value.email,
        'billCycleDayLocal': value.billCycleDayLocal,
        'currency': value.currency,
        'parentAccountId': value.parentAccountId,
        'isPaymentDelegatedToParent': value.isPaymentDelegatedToParent,
        'paymentMethodId': value.paymentMethodId,
        'referenceTime': value.referenceTime === undefined ? undefined : (value.referenceTime.toISOString()),
        'timeZone': value.timeZone,
        'address1': value.address1,
        'address2': value.address2,
        'postalCode': value.postalCode,
        'company': value.company,
        'city': value.city,
        'state': value.state,
        'country': value.country,
        'locale': value.locale,
        'phone': value.phone,
        'notes': value.notes,
        'isMigrated': value.isMigrated,
        'accountBalance': value.accountBalance,
        'accountCBA': value.accountCBA,
        'auditLogs': value.auditLogs === undefined ? undefined : ((value.auditLogs as Array<any>).map(AuditLogToJSON)),
    };
}

