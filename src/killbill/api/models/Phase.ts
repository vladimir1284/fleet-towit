/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Duration } from './Duration';
import { DurationFromJSON, DurationFromJSONTyped, DurationToJSON } from './Duration';
import type { Price } from './Price';
import { PriceFromJSON, PriceFromJSONTyped, PriceToJSON } from './Price';
import type { Usage } from './Usage';
import { UsageFromJSON, UsageFromJSONTyped, UsageToJSON } from './Usage';

/**
 *
 * @export
 * @interface Phase
 */
export interface Phase {
	/**
	 *
	 * @type {string}
	 * @memberof Phase
	 */
	type?: string;
	/**
	 *
	 * @type {Array<Price>}
	 * @memberof Phase
	 */
	prices?: Array<Price>;
	/**
	 *
	 * @type {Array<Price>}
	 * @memberof Phase
	 */
	fixedPrices?: Array<Price>;
	/**
	 *
	 * @type {Duration}
	 * @memberof Phase
	 */
	duration?: Duration;
	/**
	 *
	 * @type {Array<Usage>}
	 * @memberof Phase
	 */
	usages?: Array<Usage>;
}

/**
 * Check if a given object implements the Phase interface.
 */
export function instanceOfPhase(value: object): boolean {
	let isInstance = true;

	return isInstance;
}

export function PhaseFromJSON(json: any): Phase {
	return PhaseFromJSONTyped(json, false);
}

export function PhaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Phase {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		type: !exists(json, 'type') ? undefined : json['type'],
		prices: !exists(json, 'prices') ? undefined : (json['prices'] as Array<any>).map(PriceFromJSON),
		fixedPrices: !exists(json, 'fixedPrices')
			? undefined
			: (json['fixedPrices'] as Array<any>).map(PriceFromJSON),
		duration: !exists(json, 'duration') ? undefined : DurationFromJSON(json['duration']),
		usages: !exists(json, 'usages') ? undefined : (json['usages'] as Array<any>).map(UsageFromJSON)
	};
}

export function PhaseToJSON(value?: Phase | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		type: value.type,
		prices: value.prices === undefined ? undefined : (value.prices as Array<any>).map(PriceToJSON),
		fixedPrices:
			value.fixedPrices === undefined
				? undefined
				: (value.fixedPrices as Array<any>).map(PriceToJSON),
		duration: DurationToJSON(value.duration),
		usages: value.usages === undefined ? undefined : (value.usages as Array<any>).map(UsageToJSON)
	};
}
