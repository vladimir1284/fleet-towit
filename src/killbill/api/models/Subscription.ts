/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditLog } from './AuditLog';
import { AuditLogFromJSON, AuditLogFromJSONTyped, AuditLogToJSON } from './AuditLog';
import type { EventSubscription } from './EventSubscription';
import {
	EventSubscriptionFromJSON,
	EventSubscriptionFromJSONTyped,
	EventSubscriptionToJSON
} from './EventSubscription';
import type { PhasePrice } from './PhasePrice';
import { PhasePriceFromJSON, PhasePriceFromJSONTyped, PhasePriceToJSON } from './PhasePrice';

/**
 *
 * @export
 * @interface Subscription
 */
export interface Subscription {
	/**
	 *
	 * @type {string}
	 * @memberof Subscription
	 */
	accountId?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Subscription
	 */
	bundleId?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Subscription
	 */
	bundleExternalKey?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Subscription
	 */
	subscriptionId?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Subscription
	 */
	externalKey?: string;
	/**
	 *
	 * @type {Date}
	 * @memberof Subscription
	 */
	startDate?: Date;
	/**
	 *
	 * @type {string}
	 * @memberof Subscription
	 */
	productName?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Subscription
	 */
	productCategory?: SubscriptionProductCategoryEnum;
	/**
	 *
	 * @type {string}
	 * @memberof Subscription
	 */
	billingPeriod?: SubscriptionBillingPeriodEnum;
	/**
	 *
	 * @type {string}
	 * @memberof Subscription
	 */
	phaseType?: SubscriptionPhaseTypeEnum;
	/**
	 *
	 * @type {string}
	 * @memberof Subscription
	 */
	priceList?: string;
	/**
	 *
	 * @type {string}
	 * @memberof Subscription
	 */
	planName: string;
	/**
	 *
	 * @type {string}
	 * @memberof Subscription
	 */
	state?: SubscriptionStateEnum;
	/**
	 *
	 * @type {string}
	 * @memberof Subscription
	 */
	sourceType?: SubscriptionSourceTypeEnum;
	/**
	 *
	 * @type {Date}
	 * @memberof Subscription
	 */
	cancelledDate?: Date;
	/**
	 *
	 * @type {Date}
	 * @memberof Subscription
	 */
	chargedThroughDate?: Date;
	/**
	 *
	 * @type {Date}
	 * @memberof Subscription
	 */
	billingStartDate?: Date;
	/**
	 *
	 * @type {Date}
	 * @memberof Subscription
	 */
	billingEndDate?: Date;
	/**
	 *
	 * @type {number}
	 * @memberof Subscription
	 */
	billCycleDayLocal?: number;
	/**
	 *
	 * @type {number}
	 * @memberof Subscription
	 */
	quantity?: number;
	/**
	 *
	 * @type {Array<EventSubscription>}
	 * @memberof Subscription
	 */
	events?: Array<EventSubscription>;
	/**
	 *
	 * @type {Array<PhasePrice>}
	 * @memberof Subscription
	 */
	priceOverrides?: Array<PhasePrice>;
	/**
	 *
	 * @type {Array<PhasePrice>}
	 * @memberof Subscription
	 */
	prices?: Array<PhasePrice>;
	/**
	 *
	 * @type {Array<AuditLog>}
	 * @memberof Subscription
	 */
	auditLogs?: Array<AuditLog>;
}

/**
 * @export
 */
export const SubscriptionProductCategoryEnum = {
	Base: 'BASE',
	AddOn: 'ADD_ON',
	Standalone: 'STANDALONE'
} as const;
export type SubscriptionProductCategoryEnum =
	(typeof SubscriptionProductCategoryEnum)[keyof typeof SubscriptionProductCategoryEnum];

/**
 * @export
 */
export const SubscriptionBillingPeriodEnum = {
	Daily: 'DAILY',
	Weekly: 'WEEKLY',
	Biweekly: 'BIWEEKLY',
	ThirtyDays: 'THIRTY_DAYS',
	ThirtyOneDays: 'THIRTY_ONE_DAYS',
	SixtyDays: 'SIXTY_DAYS',
	NinetyDays: 'NINETY_DAYS',
	Monthly: 'MONTHLY',
	Bimestrial: 'BIMESTRIAL',
	Quarterly: 'QUARTERLY',
	Triannual: 'TRIANNUAL',
	Biannual: 'BIANNUAL',
	Annual: 'ANNUAL',
	Sesquiennial: 'SESQUIENNIAL',
	Biennial: 'BIENNIAL',
	Triennial: 'TRIENNIAL',
	NoBillingPeriod: 'NO_BILLING_PERIOD'
} as const;
export type SubscriptionBillingPeriodEnum =
	(typeof SubscriptionBillingPeriodEnum)[keyof typeof SubscriptionBillingPeriodEnum];

/**
 * @export
 */
export const SubscriptionPhaseTypeEnum = {
	Trial: 'TRIAL',
	Discount: 'DISCOUNT',
	Fixedterm: 'FIXEDTERM',
	Evergreen: 'EVERGREEN'
} as const;
export type SubscriptionPhaseTypeEnum =
	(typeof SubscriptionPhaseTypeEnum)[keyof typeof SubscriptionPhaseTypeEnum];

/**
 * @export
 */
export const SubscriptionStateEnum = {
	Pending: 'PENDING',
	Active: 'ACTIVE',
	Blocked: 'BLOCKED',
	Cancelled: 'CANCELLED',
	Expired: 'EXPIRED'
} as const;
export type SubscriptionStateEnum =
	(typeof SubscriptionStateEnum)[keyof typeof SubscriptionStateEnum];

/**
 * @export
 */
export const SubscriptionSourceTypeEnum = {
	Native: 'NATIVE',
	Migrated: 'MIGRATED',
	Transferred: 'TRANSFERRED'
} as const;
export type SubscriptionSourceTypeEnum =
	(typeof SubscriptionSourceTypeEnum)[keyof typeof SubscriptionSourceTypeEnum];

/**
 * Check if a given object implements the Subscription interface.
 */
export function instanceOfSubscription(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && 'productName' in value;
	isInstance = isInstance && 'billingPeriod' in value;
	isInstance = isInstance && 'priceList' in value;
	isInstance = isInstance && 'planName' in value;

	return isInstance;
}

export function SubscriptionFromJSON(json: any): Subscription {
	return SubscriptionFromJSONTyped(json, false);
}

export function SubscriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subscription {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		accountId: !exists(json, 'accountId') ? undefined : json['accountId'],
		bundleId: !exists(json, 'bundleId') ? undefined : json['bundleId'],
		bundleExternalKey: !exists(json, 'bundleExternalKey') ? undefined : json['bundleExternalKey'],
		subscriptionId: !exists(json, 'subscriptionId') ? undefined : json['subscriptionId'],
		externalKey: !exists(json, 'externalKey') ? undefined : json['externalKey'],
		startDate: !exists(json, 'startDate') ? undefined : new Date(json['startDate']),
		productName: json['productName'],
		productCategory: !exists(json, 'productCategory') ? undefined : json['productCategory'],
		billingPeriod: json['billingPeriod'],
		phaseType: !exists(json, 'phaseType') ? undefined : json['phaseType'],
		priceList: json['priceList'],
		planName: json['planName'],
		state: !exists(json, 'state') ? undefined : json['state'],
		sourceType: !exists(json, 'sourceType') ? undefined : json['sourceType'],
		cancelledDate: !exists(json, 'cancelledDate') ? undefined : new Date(json['cancelledDate']),
		chargedThroughDate: !exists(json, 'chargedThroughDate')
			? undefined
			: new Date(json['chargedThroughDate']),
		billingStartDate: !exists(json, 'billingStartDate')
			? undefined
			: new Date(json['billingStartDate']),
		billingEndDate: !exists(json, 'billingEndDate') ? undefined : new Date(json['billingEndDate']),
		billCycleDayLocal: !exists(json, 'billCycleDayLocal') ? undefined : json['billCycleDayLocal'],
		quantity: !exists(json, 'quantity') ? undefined : json['quantity'],
		events: !exists(json, 'events')
			? undefined
			: (json['events'] as Array<any>).map(EventSubscriptionFromJSON),
		priceOverrides: !exists(json, 'priceOverrides')
			? undefined
			: (json['priceOverrides'] as Array<any>).map(PhasePriceFromJSON),
		prices: !exists(json, 'prices')
			? undefined
			: (json['prices'] as Array<any>).map(PhasePriceFromJSON),
		auditLogs: !exists(json, 'auditLogs')
			? undefined
			: (json['auditLogs'] as Array<any>).map(AuditLogFromJSON)
	};
}

export function SubscriptionToJSON(value?: Subscription | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		accountId: value.accountId,
		bundleId: value.bundleId,
		bundleExternalKey: value.bundleExternalKey,
		subscriptionId: value.subscriptionId,
		externalKey: value.externalKey,
		startDate: value.startDate === undefined ? undefined : value.startDate.toISOString(),
		productName: value.productName,
		productCategory: value.productCategory,
		billingPeriod: value.billingPeriod,
		phaseType: value.phaseType,
		priceList: value.priceList,
		planName: value.planName,
		state: value.state,
		sourceType: value.sourceType,
		cancelledDate:
			value.cancelledDate === undefined ? undefined : value.cancelledDate.toISOString(),
		chargedThroughDate:
			value.chargedThroughDate === undefined
				? undefined
				: value.chargedThroughDate.toISOString().substr(0, 10),
		billingStartDate:
			value.billingStartDate === undefined ? undefined : value.billingStartDate.toISOString(),
		billingEndDate:
			value.billingEndDate === undefined ? undefined : value.billingEndDate.toISOString(),
		billCycleDayLocal: value.billCycleDayLocal,
		quantity: value.quantity,
		events:
			value.events === undefined
				? undefined
				: (value.events as Array<any>).map(EventSubscriptionToJSON),
		priceOverrides:
			value.priceOverrides === undefined
				? undefined
				: (value.priceOverrides as Array<any>).map(PhasePriceToJSON),
		prices:
			value.prices === undefined ? undefined : (value.prices as Array<any>).map(PhasePriceToJSON),
		auditLogs:
			value.auditLogs === undefined
				? undefined
				: (value.auditLogs as Array<any>).map(AuditLogToJSON)
	};
}
