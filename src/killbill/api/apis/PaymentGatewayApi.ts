/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComboHostedPaymentPage,
  HostedPaymentPageFields,
  HostedPaymentPageFormDescriptor,
} from '../models';
import {
    ComboHostedPaymentPageFromJSON,
    ComboHostedPaymentPageToJSON,
    HostedPaymentPageFieldsFromJSON,
    HostedPaymentPageFieldsToJSON,
    HostedPaymentPageFormDescriptorFromJSON,
    HostedPaymentPageFormDescriptorToJSON,
} from '../models';

export interface BuildComboFormDescriptorRequest {
    body: ComboHostedPaymentPage;
    xKillbillCreatedBy: string;
    controlPluginName?: Array<string>;
    pluginProperty?: Array<string>;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface BuildFormDescriptorRequest {
    body: HostedPaymentPageFields;
    accountId: string;
    xKillbillCreatedBy: string;
    paymentMethodId?: string;
    controlPluginName?: Array<string>;
    pluginProperty?: Array<string>;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface ProcessNotificationRequest {
    body: string;
    pluginName: string;
    xKillbillCreatedBy: string;
    controlPluginName?: Array<string>;
    pluginProperty?: Array<string>;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

/**
 * 
 */
export class PaymentGatewayApi extends runtime.BaseAPI {

    /**
     * Combo API to generate form data to redirect the customer to the gateway
     */
    async buildComboFormDescriptorRaw(requestParameters: BuildComboFormDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HostedPaymentPageFormDescriptor>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling buildComboFormDescriptor.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling buildComboFormDescriptor.');
        }

        const queryParameters: any = {};

        if (requestParameters.controlPluginName) {
            queryParameters['controlPluginName'] = requestParameters.controlPluginName;
        }

        if (requestParameters.pluginProperty) {
            queryParameters['pluginProperty'] = requestParameters.pluginProperty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/paymentGateways/hosted/form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComboHostedPaymentPageToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HostedPaymentPageFormDescriptorFromJSON(jsonValue));
    }

    /**
     * Combo API to generate form data to redirect the customer to the gateway
     */
    async buildComboFormDescriptor(requestParameters: BuildComboFormDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HostedPaymentPageFormDescriptor> {
        const response = await this.buildComboFormDescriptorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate form data to redirect the customer to the gateway
     */
    async buildFormDescriptorRaw(requestParameters: BuildFormDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HostedPaymentPageFormDescriptor>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling buildFormDescriptor.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling buildFormDescriptor.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling buildFormDescriptor.');
        }

        const queryParameters: any = {};

        if (requestParameters.paymentMethodId !== undefined) {
            queryParameters['paymentMethodId'] = requestParameters.paymentMethodId;
        }

        if (requestParameters.controlPluginName) {
            queryParameters['controlPluginName'] = requestParameters.controlPluginName;
        }

        if (requestParameters.pluginProperty) {
            queryParameters['pluginProperty'] = requestParameters.pluginProperty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/paymentGateways/hosted/form/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HostedPaymentPageFieldsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HostedPaymentPageFormDescriptorFromJSON(jsonValue));
    }

    /**
     * Generate form data to redirect the customer to the gateway
     */
    async buildFormDescriptor(requestParameters: BuildFormDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HostedPaymentPageFormDescriptor> {
        const response = await this.buildFormDescriptorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The response is built by the appropriate plugin
     * Process a gateway notification
     */
    async processNotificationRaw(requestParameters: ProcessNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling processNotification.');
        }

        if (requestParameters.pluginName === null || requestParameters.pluginName === undefined) {
            throw new runtime.RequiredError('pluginName','Required parameter requestParameters.pluginName was null or undefined when calling processNotification.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling processNotification.');
        }

        const queryParameters: any = {};

        if (requestParameters.controlPluginName) {
            queryParameters['controlPluginName'] = requestParameters.controlPluginName;
        }

        if (requestParameters.pluginProperty) {
            queryParameters['pluginProperty'] = requestParameters.pluginProperty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/paymentGateways/notification/{pluginName}`.replace(`{${"pluginName"}}`, encodeURIComponent(String(requestParameters.pluginName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The response is built by the appropriate plugin
     * Process a gateway notification
     */
    async processNotification(requestParameters: ProcessNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.processNotificationRaw(requestParameters, initOverrides);
    }

}
