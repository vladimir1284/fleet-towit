/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuditLog,
  CustomField,
} from '../models';
import {
    AuditLogFromJSON,
    AuditLogToJSON,
    CustomFieldFromJSON,
    CustomFieldToJSON,
} from '../models';

export interface GetCustomFieldAuditLogsWithHistoryRequest {
    customFieldId: string;
}

export interface GetCustomFieldsRequest {
    offset?: number;
    limit?: number;
    audit?: GetCustomFieldsAuditEnum;
}

export interface SearchCustomFieldsRequest {
    searchKey: string;
    offset?: number;
    limit?: number;
    audit?: SearchCustomFieldsAuditEnum;
}

export interface SearchCustomFieldsByTypeNameRequest {
    objectType?: string;
    fieldName?: string;
    fieldValue?: string;
    offset?: number;
    limit?: number;
    audit?: SearchCustomFieldsByTypeNameAuditEnum;
}

/**
 * 
 */
export class CustomFieldApi extends runtime.BaseAPI {

    /**
     * Retrieve custom field audit logs with history by id
     */
    async getCustomFieldAuditLogsWithHistoryRaw(requestParameters: GetCustomFieldAuditLogsWithHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AuditLog>>> {
        if (requestParameters.customFieldId === null || requestParameters.customFieldId === undefined) {
            throw new runtime.RequiredError('customFieldId','Required parameter requestParameters.customFieldId was null or undefined when calling getCustomFieldAuditLogsWithHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/customFields/{customFieldId}/auditLogsWithHistory`.replace(`{${"customFieldId"}}`, encodeURIComponent(String(requestParameters.customFieldId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuditLogFromJSON));
    }

    /**
     * Retrieve custom field audit logs with history by id
     */
    async getCustomFieldAuditLogsWithHistory(requestParameters: GetCustomFieldAuditLogsWithHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AuditLog>> {
        const response = await this.getCustomFieldAuditLogsWithHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List custom fields
     */
    async getCustomFieldsRaw(requestParameters: GetCustomFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomField>>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.audit !== undefined) {
            queryParameters['audit'] = requestParameters.audit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/customFields/pagination`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldFromJSON));
    }

    /**
     * List custom fields
     */
    async getCustomFields(requestParameters: GetCustomFieldsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomField>> {
        const response = await this.getCustomFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search custom fields
     */
    async searchCustomFieldsRaw(requestParameters: SearchCustomFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomField>>> {
        if (requestParameters.searchKey === null || requestParameters.searchKey === undefined) {
            throw new runtime.RequiredError('searchKey','Required parameter requestParameters.searchKey was null or undefined when calling searchCustomFields.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.audit !== undefined) {
            queryParameters['audit'] = requestParameters.audit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/customFields/search/{searchKey}`.replace(`{${"searchKey"}}`, encodeURIComponent(String(requestParameters.searchKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldFromJSON));
    }

    /**
     * Search custom fields
     */
    async searchCustomFields(requestParameters: SearchCustomFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomField>> {
        const response = await this.searchCustomFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search custom fields by type, name and optional value
     */
    async searchCustomFieldsByTypeNameRaw(requestParameters: SearchCustomFieldsByTypeNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomField>>> {
        const queryParameters: any = {};

        if (requestParameters.objectType !== undefined) {
            queryParameters['objectType'] = requestParameters.objectType;
        }

        if (requestParameters.fieldName !== undefined) {
            queryParameters['fieldName'] = requestParameters.fieldName;
        }

        if (requestParameters.fieldValue !== undefined) {
            queryParameters['fieldValue'] = requestParameters.fieldValue;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.audit !== undefined) {
            queryParameters['audit'] = requestParameters.audit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/customFields/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldFromJSON));
    }

    /**
     * Search custom fields by type, name and optional value
     */
    async searchCustomFieldsByTypeName(requestParameters: SearchCustomFieldsByTypeNameRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomField>> {
        const response = await this.searchCustomFieldsByTypeNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCustomFieldsAuditEnum = {
    Full: 'FULL',
    Minimal: 'MINIMAL',
    None: 'NONE'
} as const;
export type GetCustomFieldsAuditEnum = typeof GetCustomFieldsAuditEnum[keyof typeof GetCustomFieldsAuditEnum];
/**
 * @export
 */
export const SearchCustomFieldsAuditEnum = {
    Full: 'FULL',
    Minimal: 'MINIMAL',
    None: 'NONE'
} as const;
export type SearchCustomFieldsAuditEnum = typeof SearchCustomFieldsAuditEnum[keyof typeof SearchCustomFieldsAuditEnum];
/**
 * @export
 */
export const SearchCustomFieldsByTypeNameAuditEnum = {
    Full: 'FULL',
    Minimal: 'MINIMAL',
    None: 'NONE'
} as const;
export type SearchCustomFieldsByTypeNameAuditEnum = typeof SearchCustomFieldsByTypeNameAuditEnum[keyof typeof SearchCustomFieldsByTypeNameAuditEnum];
