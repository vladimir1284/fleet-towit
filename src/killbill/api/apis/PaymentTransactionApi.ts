/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { AuditLog, CustomField, Payment, PaymentTransaction, Tag } from '../models';
import {
	AuditLogFromJSON,
	AuditLogToJSON,
	CustomFieldFromJSON,
	CustomFieldToJSON,
	PaymentFromJSON,
	PaymentToJSON,
	PaymentTransactionFromJSON,
	PaymentTransactionToJSON,
	TagFromJSON,
	TagToJSON
} from '../models';

export interface CreateTransactionCustomFieldsRequest {
	body: Array<CustomField>;
	transactionId: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface CreateTransactionTagsRequest {
	body: Array<string>;
	transactionId: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface DeleteTransactionCustomFieldsRequest {
	transactionId: string;
	xKillbillCreatedBy: string;
	customField?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface DeleteTransactionTagsRequest {
	transactionId: string;
	xKillbillCreatedBy: string;
	tagDef?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface GetPaymentByTransactionExternalKeyRequest {
	transactionExternalKey: string;
	withPluginInfo?: boolean;
	withAttempts?: boolean;
	pluginProperty?: Array<string>;
	audit?: GetPaymentByTransactionExternalKeyAuditEnum;
}

export interface GetPaymentByTransactionIdRequest {
	transactionId: string;
	withPluginInfo?: boolean;
	withAttempts?: boolean;
	pluginProperty?: Array<string>;
	audit?: GetPaymentByTransactionIdAuditEnum;
}

export interface GetTransactionAuditLogsWithHistoryRequest {
	transactionId: string;
}

export interface GetTransactionCustomFieldsRequest {
	transactionId: string;
	audit?: GetTransactionCustomFieldsAuditEnum;
}

export interface GetTransactionTagsRequest {
	transactionId: string;
	includedDeleted?: boolean;
	audit?: GetTransactionTagsAuditEnum;
}

export interface ModifyTransactionCustomFieldsRequest {
	body: Array<CustomField>;
	transactionId: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface NotifyStateChangedRequest {
	body: PaymentTransaction;
	transactionId: string;
	xKillbillCreatedBy: string;
	controlPluginName?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

/**
 *
 */
export class PaymentTransactionApi extends runtime.BaseAPI {
	/**
	 * Add custom fields to payment transaction
	 */
	async createTransactionCustomFieldsRaw(
		requestParameters: CreateTransactionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<CustomField>>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling createTransactionCustomFields.'
			);
		}

		if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
			throw new runtime.RequiredError(
				'transactionId',
				'Required parameter requestParameters.transactionId was null or undefined when calling createTransactionCustomFields.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createTransactionCustomFields.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/paymentTransactions/{transactionId}/customFields`.replace(
					`{${'transactionId'}}`,
					encodeURIComponent(String(requestParameters.transactionId))
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body.map(CustomFieldToJSON)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldFromJSON));
	}

	/**
	 * Add custom fields to payment transaction
	 */
	async createTransactionCustomFields(
		requestParameters: CreateTransactionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<CustomField>> {
		const response = await this.createTransactionCustomFieldsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Add tags to payment transaction
	 */
	async createTransactionTagsRaw(
		requestParameters: CreateTransactionTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<Tag>>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling createTransactionTags.'
			);
		}

		if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
			throw new runtime.RequiredError(
				'transactionId',
				'Required parameter requestParameters.transactionId was null or undefined when calling createTransactionTags.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createTransactionTags.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/paymentTransactions/{transactionId}/tags`.replace(
					`{${'transactionId'}}`,
					encodeURIComponent(String(requestParameters.transactionId))
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
	}

	/**
	 * Add tags to payment transaction
	 */
	async createTransactionTags(
		requestParameters: CreateTransactionTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<Tag>> {
		const response = await this.createTransactionTagsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Remove custom fields from payment transaction
	 */
	async deleteTransactionCustomFieldsRaw(
		requestParameters: DeleteTransactionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
			throw new runtime.RequiredError(
				'transactionId',
				'Required parameter requestParameters.transactionId was null or undefined when calling deleteTransactionCustomFields.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deleteTransactionCustomFields.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.customField) {
			queryParameters['customField'] = requestParameters.customField;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/paymentTransactions/{transactionId}/customFields`.replace(
					`{${'transactionId'}}`,
					encodeURIComponent(String(requestParameters.transactionId))
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Remove custom fields from payment transaction
	 */
	async deleteTransactionCustomFields(
		requestParameters: DeleteTransactionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.deleteTransactionCustomFieldsRaw(requestParameters, initOverrides);
	}

	/**
	 * Remove tags from payment transaction
	 */
	async deleteTransactionTagsRaw(
		requestParameters: DeleteTransactionTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
			throw new runtime.RequiredError(
				'transactionId',
				'Required parameter requestParameters.transactionId was null or undefined when calling deleteTransactionTags.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deleteTransactionTags.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.tagDef) {
			queryParameters['tagDef'] = requestParameters.tagDef;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/paymentTransactions/{transactionId}/tags`.replace(
					`{${'transactionId'}}`,
					encodeURIComponent(String(requestParameters.transactionId))
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Remove tags from payment transaction
	 */
	async deleteTransactionTags(
		requestParameters: DeleteTransactionTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.deleteTransactionTagsRaw(requestParameters, initOverrides);
	}

	/**
	 * Retrieve a payment by transaction external key
	 */
	async getPaymentByTransactionExternalKeyRaw(
		requestParameters: GetPaymentByTransactionExternalKeyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Payment>> {
		if (
			requestParameters.transactionExternalKey === null ||
			requestParameters.transactionExternalKey === undefined
		) {
			throw new runtime.RequiredError(
				'transactionExternalKey',
				'Required parameter requestParameters.transactionExternalKey was null or undefined when calling getPaymentByTransactionExternalKey.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.transactionExternalKey !== undefined) {
			queryParameters['transactionExternalKey'] = requestParameters.transactionExternalKey;
		}

		if (requestParameters.withPluginInfo !== undefined) {
			queryParameters['withPluginInfo'] = requestParameters.withPluginInfo;
		}

		if (requestParameters.withAttempts !== undefined) {
			queryParameters['withAttempts'] = requestParameters.withAttempts;
		}

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/paymentTransactions`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => PaymentFromJSON(jsonValue));
	}

	/**
	 * Retrieve a payment by transaction external key
	 */
	async getPaymentByTransactionExternalKey(
		requestParameters: GetPaymentByTransactionExternalKeyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Payment> {
		const response = await this.getPaymentByTransactionExternalKeyRaw(
			requestParameters,
			initOverrides
		);
		return await response.value();
	}

	/**
	 * Retrieve a payment by transaction id
	 */
	async getPaymentByTransactionIdRaw(
		requestParameters: GetPaymentByTransactionIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Payment>> {
		if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
			throw new runtime.RequiredError(
				'transactionId',
				'Required parameter requestParameters.transactionId was null or undefined when calling getPaymentByTransactionId.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.withPluginInfo !== undefined) {
			queryParameters['withPluginInfo'] = requestParameters.withPluginInfo;
		}

		if (requestParameters.withAttempts !== undefined) {
			queryParameters['withAttempts'] = requestParameters.withAttempts;
		}

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/paymentTransactions/{transactionId}`.replace(
					`{${'transactionId'}}`,
					encodeURIComponent(String(requestParameters.transactionId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => PaymentFromJSON(jsonValue));
	}

	/**
	 * Retrieve a payment by transaction id
	 */
	async getPaymentByTransactionId(
		requestParameters: GetPaymentByTransactionIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Payment> {
		const response = await this.getPaymentByTransactionIdRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve payment transaction audit logs with history by id
	 */
	async getTransactionAuditLogsWithHistoryRaw(
		requestParameters: GetTransactionAuditLogsWithHistoryRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<AuditLog>>> {
		if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
			throw new runtime.RequiredError(
				'transactionId',
				'Required parameter requestParameters.transactionId was null or undefined when calling getTransactionAuditLogsWithHistory.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/paymentTransactions/{transactionId}/auditLogsWithHistory`.replace(
					`{${'transactionId'}}`,
					encodeURIComponent(String(requestParameters.transactionId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuditLogFromJSON));
	}

	/**
	 * Retrieve payment transaction audit logs with history by id
	 */
	async getTransactionAuditLogsWithHistory(
		requestParameters: GetTransactionAuditLogsWithHistoryRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<AuditLog>> {
		const response = await this.getTransactionAuditLogsWithHistoryRaw(
			requestParameters,
			initOverrides
		);
		return await response.value();
	}

	/**
	 * Retrieve payment transaction custom fields
	 */
	async getTransactionCustomFieldsRaw(
		requestParameters: GetTransactionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<CustomField>>> {
		if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
			throw new runtime.RequiredError(
				'transactionId',
				'Required parameter requestParameters.transactionId was null or undefined when calling getTransactionCustomFields.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/paymentTransactions/{transactionId}/customFields`.replace(
					`{${'transactionId'}}`,
					encodeURIComponent(String(requestParameters.transactionId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldFromJSON));
	}

	/**
	 * Retrieve payment transaction custom fields
	 */
	async getTransactionCustomFields(
		requestParameters: GetTransactionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<CustomField>> {
		const response = await this.getTransactionCustomFieldsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve payment transaction tags
	 */
	async getTransactionTagsRaw(
		requestParameters: GetTransactionTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<Tag>>> {
		if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
			throw new runtime.RequiredError(
				'transactionId',
				'Required parameter requestParameters.transactionId was null or undefined when calling getTransactionTags.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.includedDeleted !== undefined) {
			queryParameters['includedDeleted'] = requestParameters.includedDeleted;
		}

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/paymentTransactions/{transactionId}/tags`.replace(
					`{${'transactionId'}}`,
					encodeURIComponent(String(requestParameters.transactionId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
	}

	/**
	 * Retrieve payment transaction tags
	 */
	async getTransactionTags(
		requestParameters: GetTransactionTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<Tag>> {
		const response = await this.getTransactionTagsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Modify custom fields to payment transaction
	 */
	async modifyTransactionCustomFieldsRaw(
		requestParameters: ModifyTransactionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling modifyTransactionCustomFields.'
			);
		}

		if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
			throw new runtime.RequiredError(
				'transactionId',
				'Required parameter requestParameters.transactionId was null or undefined when calling modifyTransactionCustomFields.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling modifyTransactionCustomFields.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/paymentTransactions/{transactionId}/customFields`.replace(
					`{${'transactionId'}}`,
					encodeURIComponent(String(requestParameters.transactionId))
				),
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body.map(CustomFieldToJSON)
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Modify custom fields to payment transaction
	 */
	async modifyTransactionCustomFields(
		requestParameters: ModifyTransactionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.modifyTransactionCustomFieldsRaw(requestParameters, initOverrides);
	}

	/**
	 * Mark a pending payment transaction as succeeded or failed
	 */
	async notifyStateChangedRaw(
		requestParameters: NotifyStateChangedRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Payment>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling notifyStateChanged.'
			);
		}

		if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
			throw new runtime.RequiredError(
				'transactionId',
				'Required parameter requestParameters.transactionId was null or undefined when calling notifyStateChanged.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling notifyStateChanged.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.controlPluginName) {
			queryParameters['controlPluginName'] = requestParameters.controlPluginName;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/paymentTransactions/{transactionId}`.replace(
					`{${'transactionId'}}`,
					encodeURIComponent(String(requestParameters.transactionId))
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: PaymentTransactionToJSON(requestParameters.body)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => PaymentFromJSON(jsonValue));
	}

	/**
	 * Mark a pending payment transaction as succeeded or failed
	 */
	async notifyStateChanged(
		requestParameters: NotifyStateChangedRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Payment> {
		const response = await this.notifyStateChangedRaw(requestParameters, initOverrides);
		return await response.value();
	}
}

/**
 * @export
 */
export const GetPaymentByTransactionExternalKeyAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type GetPaymentByTransactionExternalKeyAuditEnum =
	(typeof GetPaymentByTransactionExternalKeyAuditEnum)[keyof typeof GetPaymentByTransactionExternalKeyAuditEnum];
/**
 * @export
 */
export const GetPaymentByTransactionIdAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type GetPaymentByTransactionIdAuditEnum =
	(typeof GetPaymentByTransactionIdAuditEnum)[keyof typeof GetPaymentByTransactionIdAuditEnum];
/**
 * @export
 */
export const GetTransactionCustomFieldsAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type GetTransactionCustomFieldsAuditEnum =
	(typeof GetTransactionCustomFieldsAuditEnum)[keyof typeof GetTransactionCustomFieldsAuditEnum];
/**
 * @export
 */
export const GetTransactionTagsAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type GetTransactionTagsAuditEnum =
	(typeof GetTransactionTagsAuditEnum)[keyof typeof GetTransactionTagsAuditEnum];
