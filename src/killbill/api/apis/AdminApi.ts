/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminPayment,
} from '../models';
import {
    AdminPaymentFromJSON,
    AdminPaymentToJSON,
} from '../models';

export interface GetQueueEntriesRequest {
    accountId?: string;
    queueName?: string;
    serviceName?: string;
    withHistory?: boolean;
    minDate?: string;
    maxDate?: string;
    withInProcessing?: boolean;
    withBusEvents?: boolean;
    withNotifications?: boolean;
}

export interface InvalidatesCacheRequest {
    cacheName?: string;
}

export interface InvalidatesCacheByAccountRequest {
    accountId: string;
}

export interface TriggerInvoiceGenerationForParkedAccountsRequest {
    xKillbillCreatedBy: string;
    offset?: number;
    limit?: number;
    pluginProperty?: Array<string>;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface UpdatePaymentTransactionStateRequest {
    body: AdminPayment;
    paymentId: string;
    paymentTransactionId: string;
    xKillbillCreatedBy: string;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Get queues entries
     */
    async getQueueEntriesRaw(requestParameters: GetQueueEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.queueName !== undefined) {
            queryParameters['queueName'] = requestParameters.queueName;
        }

        if (requestParameters.serviceName !== undefined) {
            queryParameters['serviceName'] = requestParameters.serviceName;
        }

        if (requestParameters.withHistory !== undefined) {
            queryParameters['withHistory'] = requestParameters.withHistory;
        }

        if (requestParameters.minDate !== undefined) {
            queryParameters['minDate'] = requestParameters.minDate;
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['maxDate'] = requestParameters.maxDate;
        }

        if (requestParameters.withInProcessing !== undefined) {
            queryParameters['withInProcessing'] = requestParameters.withInProcessing;
        }

        if (requestParameters.withBusEvents !== undefined) {
            queryParameters['withBusEvents'] = requestParameters.withBusEvents;
        }

        if (requestParameters.withNotifications !== undefined) {
            queryParameters['withNotifications'] = requestParameters.withNotifications;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/admin/queues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get queues entries
     */
    async getQueueEntries(requestParameters: GetQueueEntriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getQueueEntriesRaw(requestParameters, initOverrides);
    }

    /**
     * Invalidates the given Cache if specified, otherwise invalidates all caches
     */
    async invalidatesCacheRaw(requestParameters: InvalidatesCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.cacheName !== undefined) {
            queryParameters['cacheName'] = requestParameters.cacheName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/admin/cache`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invalidates the given Cache if specified, otherwise invalidates all caches
     */
    async invalidatesCache(requestParameters: InvalidatesCacheRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.invalidatesCacheRaw(requestParameters, initOverrides);
    }

    /**
     * Invalidates Caches per account level
     */
    async invalidatesCacheByAccountRaw(requestParameters: InvalidatesCacheByAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling invalidatesCacheByAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/admin/cache/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invalidates Caches per account level
     */
    async invalidatesCacheByAccount(requestParameters: InvalidatesCacheByAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.invalidatesCacheByAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Invalidates Caches per tenant level
     */
    async invalidatesCacheByTenantRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/admin/cache/tenants`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invalidates Caches per tenant level
     */
    async invalidatesCacheByTenant(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.invalidatesCacheByTenantRaw(initOverrides);
    }

    /**
     * Put the host back into rotation
     */
    async putInRotationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/admin/healthcheck`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Put the host back into rotation
     */
    async putInRotation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putInRotationRaw(initOverrides);
    }

    /**
     * Put the host out of rotation
     */
    async putOutOfRotationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/admin/healthcheck`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Put the host out of rotation
     */
    async putOutOfRotation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putOutOfRotationRaw(initOverrides);
    }

    /**
     * Trigger an invoice generation for all parked accounts
     */
    async triggerInvoiceGenerationForParkedAccountsRaw(requestParameters: TriggerInvoiceGenerationForParkedAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling triggerInvoiceGenerationForParkedAccounts.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pluginProperty) {
            queryParameters['pluginProperty'] = requestParameters.pluginProperty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/admin/invoices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Trigger an invoice generation for all parked accounts
     */
    async triggerInvoiceGenerationForParkedAccounts(requestParameters: TriggerInvoiceGenerationForParkedAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.triggerInvoiceGenerationForParkedAccountsRaw(requestParameters, initOverrides);
    }

    /**
     * Update existing paymentTransaction and associated payment state
     */
    async updatePaymentTransactionStateRaw(requestParameters: UpdatePaymentTransactionStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updatePaymentTransactionState.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling updatePaymentTransactionState.');
        }

        if (requestParameters.paymentTransactionId === null || requestParameters.paymentTransactionId === undefined) {
            throw new runtime.RequiredError('paymentTransactionId','Required parameter requestParameters.paymentTransactionId was null or undefined when calling updatePaymentTransactionState.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling updatePaymentTransactionState.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/admin/payments/{paymentId}/transactions/{paymentTransactionId}`.replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))).replace(`{${"paymentTransactionId"}}`, encodeURIComponent(String(requestParameters.paymentTransactionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdminPaymentToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update existing paymentTransaction and associated payment state
     */
    async updatePaymentTransactionState(requestParameters: UpdatePaymentTransactionStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePaymentTransactionStateRaw(requestParameters, initOverrides);
    }

}
