/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuditLog,
  CustomField,
  Invoice,
  InvoiceDryRun,
  InvoiceItem,
  InvoicePayment,
  Tag,
} from '../models';
import {
    AuditLogFromJSON,
    AuditLogToJSON,
    CustomFieldFromJSON,
    CustomFieldToJSON,
    InvoiceFromJSON,
    InvoiceToJSON,
    InvoiceDryRunFromJSON,
    InvoiceDryRunToJSON,
    InvoiceItemFromJSON,
    InvoiceItemToJSON,
    InvoicePaymentFromJSON,
    InvoicePaymentToJSON,
    TagFromJSON,
    TagToJSON,
} from '../models';

export interface AdjustInvoiceItemRequest {
    body: InvoiceItem;
    invoiceId: string;
    xKillbillCreatedBy: string;
    requestedDate?: Date;
    pluginProperty?: Array<string>;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface CommitInvoiceRequest {
    invoiceId: string;
    xKillbillCreatedBy: string;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface CreateExternalChargesRequest {
    body: Array<InvoiceItem>;
    accountId: string;
    xKillbillCreatedBy: string;
    requestedDate?: Date;
    autoCommit?: boolean;
    pluginProperty?: Array<string>;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface CreateFutureInvoiceRequest {
    accountId: string;
    xKillbillCreatedBy: string;
    targetDate?: Date;
    pluginProperty?: Array<string>;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface CreateFutureInvoiceGroupRequest {
    accountId: string;
    xKillbillCreatedBy: string;
    targetDate?: Date;
    pluginProperty?: Array<string>;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface CreateInstantPaymentRequest {
    body: InvoicePayment;
    invoiceId: string;
    xKillbillCreatedBy: string;
    externalPayment?: boolean;
    controlPluginName?: Array<string>;
    pluginProperty?: Array<string>;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface CreateInvoiceCustomFieldsRequest {
    body: Array<CustomField>;
    invoiceId: string;
    xKillbillCreatedBy: string;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface CreateInvoiceTagsRequest {
    body: Array<string>;
    invoiceId: string;
    xKillbillCreatedBy: string;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface CreateMigrationInvoiceRequest {
    body: Array<InvoiceItem>;
    accountId: string;
    xKillbillCreatedBy: string;
    targetDate?: Date;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface CreateTaxItemsRequest {
    body: Array<InvoiceItem>;
    accountId: string;
    xKillbillCreatedBy: string;
    autoCommit?: boolean;
    requestedDate?: Date;
    pluginProperty?: Array<string>;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface DeleteCBARequest {
    invoiceId: string;
    invoiceItemId: string;
    accountId: string;
    xKillbillCreatedBy: string;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface DeleteInvoiceCustomFieldsRequest {
    invoiceId: string;
    xKillbillCreatedBy: string;
    customField?: Array<string>;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface DeleteInvoiceTagsRequest {
    invoiceId: string;
    xKillbillCreatedBy: string;
    tagDef?: Array<string>;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface GenerateDryRunInvoiceRequest {
    body: InvoiceDryRun;
    accountId: string;
    xKillbillCreatedBy: string;
    targetDate?: Date;
    pluginProperty?: Array<string>;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface GetCatalogTranslationRequest {
    locale: string;
}

export interface GetInvoiceRequest {
    invoiceId: string;
    withChildrenItems?: boolean;
    audit?: GetInvoiceAuditEnum;
}

export interface GetInvoiceAsHTMLRequest {
    invoiceId: string;
}

export interface GetInvoiceAuditLogsWithHistoryRequest {
    invoiceId: string;
}

export interface GetInvoiceByItemIdRequest {
    itemId: string;
    withChildrenItems?: boolean;
    audit?: GetInvoiceByItemIdAuditEnum;
}

export interface GetInvoiceByNumberRequest {
    invoiceNumber: number;
    withChildrenItems?: boolean;
    audit?: GetInvoiceByNumberAuditEnum;
}

export interface GetInvoiceCustomFieldsRequest {
    invoiceId: string;
    audit?: GetInvoiceCustomFieldsAuditEnum;
}

export interface GetInvoiceMPTemplateRequest {
    locale: string;
}

export interface GetInvoiceTagsRequest {
    invoiceId: string;
    includedDeleted?: boolean;
    audit?: GetInvoiceTagsAuditEnum;
}

export interface GetInvoiceTranslationRequest {
    locale: string;
}

export interface GetInvoicesRequest {
    offset?: number;
    limit?: number;
    audit?: GetInvoicesAuditEnum;
}

export interface GetInvoicesGroupRequest {
    groupId: string;
    accountId: string;
    withChildrenItems?: boolean;
    audit?: GetInvoicesGroupAuditEnum;
}

export interface GetPaymentsForInvoiceRequest {
    invoiceId: string;
    withPluginInfo?: boolean;
    withAttempts?: boolean;
    audit?: GetPaymentsForInvoiceAuditEnum;
}

export interface ModifyInvoiceCustomFieldsRequest {
    body: Array<CustomField>;
    invoiceId: string;
    xKillbillCreatedBy: string;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface SearchInvoicesRequest {
    searchKey: string;
    offset?: number;
    limit?: number;
    audit?: SearchInvoicesAuditEnum;
}

export interface UploadCatalogTranslationRequest {
    body: string;
    locale: string;
    xKillbillCreatedBy: string;
    deleteIfExists?: boolean;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface UploadInvoiceMPTemplateRequest {
    body: string;
    xKillbillCreatedBy: string;
    deleteIfExists?: boolean;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface UploadInvoiceTemplateRequest {
    body: string;
    xKillbillCreatedBy: string;
    deleteIfExists?: boolean;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface UploadInvoiceTranslationRequest {
    body: string;
    locale: string;
    xKillbillCreatedBy: string;
    deleteIfExists?: boolean;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

export interface VoidInvoiceRequest {
    invoiceId: string;
    xKillbillCreatedBy: string;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

/**
 * 
 */
export class InvoiceApi extends runtime.BaseAPI {

    /**
     * Adjust an invoice item
     */
    async adjustInvoiceItemRaw(requestParameters: AdjustInvoiceItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling adjustInvoiceItem.');
        }

        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling adjustInvoiceItem.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling adjustInvoiceItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.requestedDate !== undefined) {
            queryParameters['requestedDate'] = (requestParameters.requestedDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.pluginProperty) {
            queryParameters['pluginProperty'] = requestParameters.pluginProperty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceItemToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * Adjust an invoice item
     */
    async adjustInvoiceItem(requestParameters: AdjustInvoiceItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invoice> {
        const response = await this.adjustInvoiceItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform the invoice status transition from DRAFT to COMMITTED
     */
    async commitInvoiceRaw(requestParameters: CommitInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling commitInvoice.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling commitInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/commitInvoice`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Perform the invoice status transition from DRAFT to COMMITTED
     */
    async commitInvoice(requestParameters: CommitInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.commitInvoiceRaw(requestParameters, initOverrides);
    }

    /**
     * Create external charge(s)
     */
    async createExternalChargesRaw(requestParameters: CreateExternalChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InvoiceItem>>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createExternalCharges.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling createExternalCharges.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createExternalCharges.');
        }

        const queryParameters: any = {};

        if (requestParameters.requestedDate !== undefined) {
            queryParameters['requestedDate'] = (requestParameters.requestedDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.autoCommit !== undefined) {
            queryParameters['autoCommit'] = requestParameters.autoCommit;
        }

        if (requestParameters.pluginProperty) {
            queryParameters['pluginProperty'] = requestParameters.pluginProperty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/charges/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(InvoiceItemToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoiceItemFromJSON));
    }

    /**
     * Create external charge(s)
     */
    async createExternalCharges(requestParameters: CreateExternalChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InvoiceItem>> {
        const response = await this.createExternalChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger an invoice generation
     */
    async createFutureInvoiceRaw(requestParameters: CreateFutureInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling createFutureInvoice.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createFutureInvoice.');
        }

        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.targetDate !== undefined) {
            queryParameters['targetDate'] = (requestParameters.targetDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.pluginProperty) {
            queryParameters['pluginProperty'] = requestParameters.pluginProperty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * Trigger an invoice generation
     */
    async createFutureInvoice(requestParameters: CreateFutureInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invoice> {
        const response = await this.createFutureInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger an invoice generation
     */
    async createFutureInvoiceGroupRaw(requestParameters: CreateFutureInvoiceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Invoice>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling createFutureInvoiceGroup.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createFutureInvoiceGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.targetDate !== undefined) {
            queryParameters['targetDate'] = (requestParameters.targetDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.pluginProperty) {
            queryParameters['pluginProperty'] = requestParameters.pluginProperty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoiceFromJSON));
    }

    /**
     * Trigger an invoice generation
     */
    async createFutureInvoiceGroup(requestParameters: CreateFutureInvoiceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Invoice>> {
        const response = await this.createFutureInvoiceGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger a payment for invoice
     */
    async createInstantPaymentRaw(requestParameters: CreateInstantPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoicePayment>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createInstantPayment.');
        }

        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling createInstantPayment.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createInstantPayment.');
        }

        const queryParameters: any = {};

        if (requestParameters.externalPayment !== undefined) {
            queryParameters['externalPayment'] = requestParameters.externalPayment;
        }

        if (requestParameters.controlPluginName) {
            queryParameters['controlPluginName'] = requestParameters.controlPluginName;
        }

        if (requestParameters.pluginProperty) {
            queryParameters['pluginProperty'] = requestParameters.pluginProperty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/payments`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvoicePaymentToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoicePaymentFromJSON(jsonValue));
    }

    /**
     * Trigger a payment for invoice
     */
    async createInstantPayment(requestParameters: CreateInstantPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoicePayment> {
        const response = await this.createInstantPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add custom fields to invoice
     */
    async createInvoiceCustomFieldsRaw(requestParameters: CreateInvoiceCustomFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomField>>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createInvoiceCustomFields.');
        }

        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling createInvoiceCustomFields.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createInvoiceCustomFields.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/customFields`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(CustomFieldToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldFromJSON));
    }

    /**
     * Add custom fields to invoice
     */
    async createInvoiceCustomFields(requestParameters: CreateInvoiceCustomFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomField>> {
        const response = await this.createInvoiceCustomFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add tags to invoice
     */
    async createInvoiceTagsRaw(requestParameters: CreateInvoiceTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Tag>>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createInvoiceTags.');
        }

        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling createInvoiceTags.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createInvoiceTags.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/tags`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
    }

    /**
     * Add tags to invoice
     */
    async createInvoiceTags(requestParameters: CreateInvoiceTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Tag>> {
        const response = await this.createInvoiceTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a migration invoice
     */
    async createMigrationInvoiceRaw(requestParameters: CreateMigrationInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createMigrationInvoice.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling createMigrationInvoice.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createMigrationInvoice.');
        }

        const queryParameters: any = {};

        if (requestParameters.targetDate !== undefined) {
            queryParameters['targetDate'] = (requestParameters.targetDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/migration/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(InvoiceItemToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * Create a migration invoice
     */
    async createMigrationInvoice(requestParameters: CreateMigrationInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invoice> {
        const response = await this.createMigrationInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create tax items
     */
    async createTaxItemsRaw(requestParameters: CreateTaxItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InvoiceItem>>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createTaxItems.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling createTaxItems.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createTaxItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.autoCommit !== undefined) {
            queryParameters['autoCommit'] = requestParameters.autoCommit;
        }

        if (requestParameters.requestedDate !== undefined) {
            queryParameters['requestedDate'] = (requestParameters.requestedDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.pluginProperty) {
            queryParameters['pluginProperty'] = requestParameters.pluginProperty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/taxes/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(InvoiceItemToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoiceItemFromJSON));
    }

    /**
     * Create tax items
     */
    async createTaxItems(requestParameters: CreateTaxItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InvoiceItem>> {
        const response = await this.createTaxItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a CBA item
     */
    async deleteCBARaw(requestParameters: DeleteCBARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling deleteCBA.');
        }

        if (requestParameters.invoiceItemId === null || requestParameters.invoiceItemId === undefined) {
            throw new runtime.RequiredError('invoiceItemId','Required parameter requestParameters.invoiceItemId was null or undefined when calling deleteCBA.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteCBA.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deleteCBA.');
        }

        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/{invoiceItemId}/cba`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))).replace(`{${"invoiceItemId"}}`, encodeURIComponent(String(requestParameters.invoiceItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a CBA item
     */
    async deleteCBA(requestParameters: DeleteCBARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCBARaw(requestParameters, initOverrides);
    }

    /**
     * Remove custom fields from invoice
     */
    async deleteInvoiceCustomFieldsRaw(requestParameters: DeleteInvoiceCustomFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling deleteInvoiceCustomFields.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deleteInvoiceCustomFields.');
        }

        const queryParameters: any = {};

        if (requestParameters.customField) {
            queryParameters['customField'] = requestParameters.customField;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/customFields`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove custom fields from invoice
     */
    async deleteInvoiceCustomFields(requestParameters: DeleteInvoiceCustomFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteInvoiceCustomFieldsRaw(requestParameters, initOverrides);
    }

    /**
     * Remove tags from invoice
     */
    async deleteInvoiceTagsRaw(requestParameters: DeleteInvoiceTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling deleteInvoiceTags.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deleteInvoiceTags.');
        }

        const queryParameters: any = {};

        if (requestParameters.tagDef) {
            queryParameters['tagDef'] = requestParameters.tagDef;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/tags`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove tags from invoice
     */
    async deleteInvoiceTags(requestParameters: DeleteInvoiceTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteInvoiceTagsRaw(requestParameters, initOverrides);
    }

    /**
     * Generate a dryRun invoice
     */
    async generateDryRunInvoiceRaw(requestParameters: GenerateDryRunInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling generateDryRunInvoice.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling generateDryRunInvoice.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling generateDryRunInvoice.');
        }

        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.targetDate !== undefined) {
            queryParameters['targetDate'] = (requestParameters.targetDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.pluginProperty) {
            queryParameters['pluginProperty'] = requestParameters.pluginProperty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/dryRun`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceDryRunToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * Generate a dryRun invoice
     */
    async generateDryRunInvoice(requestParameters: GenerateDryRunInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invoice> {
        const response = await this.generateDryRunInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the catalog translation for the tenant
     */
    async getCatalogTranslationRaw(requestParameters: GetCatalogTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.locale === null || requestParameters.locale === undefined) {
            throw new runtime.RequiredError('locale','Required parameter requestParameters.locale was null or undefined when calling getCatalogTranslation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/catalogTranslation/{locale}`.replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters.locale))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Retrieves the catalog translation for the tenant
     */
    async getCatalogTranslation(requestParameters: GetCatalogTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getCatalogTranslationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an invoice by id
     */
    async getInvoiceRaw(requestParameters: GetInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling getInvoice.');
        }

        const queryParameters: any = {};

        if (requestParameters.withChildrenItems !== undefined) {
            queryParameters['withChildrenItems'] = requestParameters.withChildrenItems;
        }

        if (requestParameters.audit !== undefined) {
            queryParameters['audit'] = requestParameters.audit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * Retrieve an invoice by id
     */
    async getInvoice(requestParameters: GetInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invoice> {
        const response = await this.getInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Render an invoice as HTML
     */
    async getInvoiceAsHTMLRaw(requestParameters: GetInvoiceAsHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling getInvoiceAsHTML.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/html`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Render an invoice as HTML
     */
    async getInvoiceAsHTML(requestParameters: GetInvoiceAsHTMLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getInvoiceAsHTMLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve invoice audit logs with history by id
     */
    async getInvoiceAuditLogsWithHistoryRaw(requestParameters: GetInvoiceAuditLogsWithHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AuditLog>>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling getInvoiceAuditLogsWithHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/auditLogsWithHistory`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuditLogFromJSON));
    }

    /**
     * Retrieve invoice audit logs with history by id
     */
    async getInvoiceAuditLogsWithHistory(requestParameters: GetInvoiceAuditLogsWithHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AuditLog>> {
        const response = await this.getInvoiceAuditLogsWithHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an invoice by invoice item id
     */
    async getInvoiceByItemIdRaw(requestParameters: GetInvoiceByItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getInvoiceByItemId.');
        }

        const queryParameters: any = {};

        if (requestParameters.withChildrenItems !== undefined) {
            queryParameters['withChildrenItems'] = requestParameters.withChildrenItems;
        }

        if (requestParameters.audit !== undefined) {
            queryParameters['audit'] = requestParameters.audit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/byItemId/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * Retrieve an invoice by invoice item id
     */
    async getInvoiceByItemId(requestParameters: GetInvoiceByItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invoice> {
        const response = await this.getInvoiceByItemIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an invoice by number
     */
    async getInvoiceByNumberRaw(requestParameters: GetInvoiceByNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.invoiceNumber === null || requestParameters.invoiceNumber === undefined) {
            throw new runtime.RequiredError('invoiceNumber','Required parameter requestParameters.invoiceNumber was null or undefined when calling getInvoiceByNumber.');
        }

        const queryParameters: any = {};

        if (requestParameters.withChildrenItems !== undefined) {
            queryParameters['withChildrenItems'] = requestParameters.withChildrenItems;
        }

        if (requestParameters.audit !== undefined) {
            queryParameters['audit'] = requestParameters.audit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/byNumber/{invoiceNumber}`.replace(`{${"invoiceNumber"}}`, encodeURIComponent(String(requestParameters.invoiceNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * Retrieve an invoice by number
     */
    async getInvoiceByNumber(requestParameters: GetInvoiceByNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invoice> {
        const response = await this.getInvoiceByNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve invoice custom fields
     */
    async getInvoiceCustomFieldsRaw(requestParameters: GetInvoiceCustomFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomField>>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling getInvoiceCustomFields.');
        }

        const queryParameters: any = {};

        if (requestParameters.audit !== undefined) {
            queryParameters['audit'] = requestParameters.audit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/customFields`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldFromJSON));
    }

    /**
     * Retrieve invoice custom fields
     */
    async getInvoiceCustomFields(requestParameters: GetInvoiceCustomFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomField>> {
        const response = await this.getInvoiceCustomFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the manualPay invoice template for the tenant
     */
    async getInvoiceMPTemplateRaw(requestParameters: GetInvoiceMPTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.locale === null || requestParameters.locale === undefined) {
            throw new runtime.RequiredError('locale','Required parameter requestParameters.locale was null or undefined when calling getInvoiceMPTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/manualPayTemplate/{locale}`.replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters.locale))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Retrieves the manualPay invoice template for the tenant
     */
    async getInvoiceMPTemplate(requestParameters: GetInvoiceMPTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getInvoiceMPTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve invoice tags
     */
    async getInvoiceTagsRaw(requestParameters: GetInvoiceTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Tag>>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling getInvoiceTags.');
        }

        const queryParameters: any = {};

        if (requestParameters.includedDeleted !== undefined) {
            queryParameters['includedDeleted'] = requestParameters.includedDeleted;
        }

        if (requestParameters.audit !== undefined) {
            queryParameters['audit'] = requestParameters.audit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/tags`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
    }

    /**
     * Retrieve invoice tags
     */
    async getInvoiceTags(requestParameters: GetInvoiceTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Tag>> {
        const response = await this.getInvoiceTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the invoice template for the tenant
     */
    async getInvoiceTemplateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/template`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Retrieves the invoice template for the tenant
     */
    async getInvoiceTemplate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getInvoiceTemplateRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the invoice translation for the tenant
     */
    async getInvoiceTranslationRaw(requestParameters: GetInvoiceTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.locale === null || requestParameters.locale === undefined) {
            throw new runtime.RequiredError('locale','Required parameter requestParameters.locale was null or undefined when calling getInvoiceTranslation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/translation/{locale}`.replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters.locale))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Retrieves the invoice translation for the tenant
     */
    async getInvoiceTranslation(requestParameters: GetInvoiceTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getInvoiceTranslationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List invoices
     */
    async getInvoicesRaw(requestParameters: GetInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Invoice>>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.audit !== undefined) {
            queryParameters['audit'] = requestParameters.audit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/pagination`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoiceFromJSON));
    }

    /**
     * List invoices
     */
    async getInvoices(requestParameters: GetInvoicesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Invoice>> {
        const response = await this.getInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a set of invoices by group id
     */
    async getInvoicesGroupRaw(requestParameters: GetInvoicesGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Invoice>>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getInvoicesGroup.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getInvoicesGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.withChildrenItems !== undefined) {
            queryParameters['withChildrenItems'] = requestParameters.withChildrenItems;
        }

        if (requestParameters.audit !== undefined) {
            queryParameters['audit'] = requestParameters.audit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{groupId}/group`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoiceFromJSON));
    }

    /**
     * Retrieve a set of invoices by group id
     */
    async getInvoicesGroup(requestParameters: GetInvoicesGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Invoice>> {
        const response = await this.getInvoicesGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve payments associated with an invoice
     */
    async getPaymentsForInvoiceRaw(requestParameters: GetPaymentsForInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InvoicePayment>>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling getPaymentsForInvoice.');
        }

        const queryParameters: any = {};

        if (requestParameters.withPluginInfo !== undefined) {
            queryParameters['withPluginInfo'] = requestParameters.withPluginInfo;
        }

        if (requestParameters.withAttempts !== undefined) {
            queryParameters['withAttempts'] = requestParameters.withAttempts;
        }

        if (requestParameters.audit !== undefined) {
            queryParameters['audit'] = requestParameters.audit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/payments`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoicePaymentFromJSON));
    }

    /**
     * Retrieve payments associated with an invoice
     */
    async getPaymentsForInvoice(requestParameters: GetPaymentsForInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InvoicePayment>> {
        const response = await this.getPaymentsForInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify custom fields to invoice
     */
    async modifyInvoiceCustomFieldsRaw(requestParameters: ModifyInvoiceCustomFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling modifyInvoiceCustomFields.');
        }

        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling modifyInvoiceCustomFields.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling modifyInvoiceCustomFields.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/customFields`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(CustomFieldToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Modify custom fields to invoice
     */
    async modifyInvoiceCustomFields(requestParameters: ModifyInvoiceCustomFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.modifyInvoiceCustomFieldsRaw(requestParameters, initOverrides);
    }

    /**
     * Search invoices
     */
    async searchInvoicesRaw(requestParameters: SearchInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Invoice>>> {
        if (requestParameters.searchKey === null || requestParameters.searchKey === undefined) {
            throw new runtime.RequiredError('searchKey','Required parameter requestParameters.searchKey was null or undefined when calling searchInvoices.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.audit !== undefined) {
            queryParameters['audit'] = requestParameters.audit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/search/{searchKey}`.replace(`{${"searchKey"}}`, encodeURIComponent(String(requestParameters.searchKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoiceFromJSON));
    }

    /**
     * Search invoices
     */
    async searchInvoices(requestParameters: SearchInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Invoice>> {
        const response = await this.searchInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload the catalog translation for the tenant
     */
    async uploadCatalogTranslationRaw(requestParameters: UploadCatalogTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling uploadCatalogTranslation.');
        }

        if (requestParameters.locale === null || requestParameters.locale === undefined) {
            throw new runtime.RequiredError('locale','Required parameter requestParameters.locale was null or undefined when calling uploadCatalogTranslation.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling uploadCatalogTranslation.');
        }

        const queryParameters: any = {};

        if (requestParameters.deleteIfExists !== undefined) {
            queryParameters['deleteIfExists'] = requestParameters.deleteIfExists;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/catalogTranslation/{locale}`.replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters.locale))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Upload the catalog translation for the tenant
     */
    async uploadCatalogTranslation(requestParameters: UploadCatalogTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.uploadCatalogTranslationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload the manualPay invoice template for the tenant
     */
    async uploadInvoiceMPTemplateRaw(requestParameters: UploadInvoiceMPTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling uploadInvoiceMPTemplate.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling uploadInvoiceMPTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.deleteIfExists !== undefined) {
            queryParameters['deleteIfExists'] = requestParameters.deleteIfExists;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/html';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/manualPayTemplate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Upload the manualPay invoice template for the tenant
     */
    async uploadInvoiceMPTemplate(requestParameters: UploadInvoiceMPTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.uploadInvoiceMPTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload the invoice template for the tenant
     */
    async uploadInvoiceTemplateRaw(requestParameters: UploadInvoiceTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling uploadInvoiceTemplate.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling uploadInvoiceTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.deleteIfExists !== undefined) {
            queryParameters['deleteIfExists'] = requestParameters.deleteIfExists;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/html';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Upload the invoice template for the tenant
     */
    async uploadInvoiceTemplate(requestParameters: UploadInvoiceTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.uploadInvoiceTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload the invoice translation for the tenant
     */
    async uploadInvoiceTranslationRaw(requestParameters: UploadInvoiceTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling uploadInvoiceTranslation.');
        }

        if (requestParameters.locale === null || requestParameters.locale === undefined) {
            throw new runtime.RequiredError('locale','Required parameter requestParameters.locale was null or undefined when calling uploadInvoiceTranslation.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling uploadInvoiceTranslation.');
        }

        const queryParameters: any = {};

        if (requestParameters.deleteIfExists !== undefined) {
            queryParameters['deleteIfExists'] = requestParameters.deleteIfExists;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/translation/{locale}`.replace(`{${"locale"}}`, encodeURIComponent(String(requestParameters.locale))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Upload the invoice translation for the tenant
     */
    async uploadInvoiceTranslation(requestParameters: UploadInvoiceTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.uploadInvoiceTranslationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform the action of voiding an invoice
     */
    async voidInvoiceRaw(requestParameters: VoidInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling voidInvoice.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling voidInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiKey"] = this.configuration.apiKey("X-Killbill-ApiKey"); // Killbill Api Key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Killbill-ApiSecret"] = this.configuration.apiKey("X-Killbill-ApiSecret"); // Killbill Api Secret authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/invoices/{invoiceId}/voidInvoice`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Perform the action of voiding an invoice
     */
    async voidInvoice(requestParameters: VoidInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.voidInvoiceRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetInvoiceAuditEnum = {
    Full: 'FULL',
    Minimal: 'MINIMAL',
    None: 'NONE'
} as const;
export type GetInvoiceAuditEnum = typeof GetInvoiceAuditEnum[keyof typeof GetInvoiceAuditEnum];
/**
 * @export
 */
export const GetInvoiceByItemIdAuditEnum = {
    Full: 'FULL',
    Minimal: 'MINIMAL',
    None: 'NONE'
} as const;
export type GetInvoiceByItemIdAuditEnum = typeof GetInvoiceByItemIdAuditEnum[keyof typeof GetInvoiceByItemIdAuditEnum];
/**
 * @export
 */
export const GetInvoiceByNumberAuditEnum = {
    Full: 'FULL',
    Minimal: 'MINIMAL',
    None: 'NONE'
} as const;
export type GetInvoiceByNumberAuditEnum = typeof GetInvoiceByNumberAuditEnum[keyof typeof GetInvoiceByNumberAuditEnum];
/**
 * @export
 */
export const GetInvoiceCustomFieldsAuditEnum = {
    Full: 'FULL',
    Minimal: 'MINIMAL',
    None: 'NONE'
} as const;
export type GetInvoiceCustomFieldsAuditEnum = typeof GetInvoiceCustomFieldsAuditEnum[keyof typeof GetInvoiceCustomFieldsAuditEnum];
/**
 * @export
 */
export const GetInvoiceTagsAuditEnum = {
    Full: 'FULL',
    Minimal: 'MINIMAL',
    None: 'NONE'
} as const;
export type GetInvoiceTagsAuditEnum = typeof GetInvoiceTagsAuditEnum[keyof typeof GetInvoiceTagsAuditEnum];
/**
 * @export
 */
export const GetInvoicesAuditEnum = {
    Full: 'FULL',
    Minimal: 'MINIMAL',
    None: 'NONE'
} as const;
export type GetInvoicesAuditEnum = typeof GetInvoicesAuditEnum[keyof typeof GetInvoicesAuditEnum];
/**
 * @export
 */
export const GetInvoicesGroupAuditEnum = {
    Full: 'FULL',
    Minimal: 'MINIMAL',
    None: 'NONE'
} as const;
export type GetInvoicesGroupAuditEnum = typeof GetInvoicesGroupAuditEnum[keyof typeof GetInvoicesGroupAuditEnum];
/**
 * @export
 */
export const GetPaymentsForInvoiceAuditEnum = {
    Full: 'FULL',
    Minimal: 'MINIMAL',
    None: 'NONE'
} as const;
export type GetPaymentsForInvoiceAuditEnum = typeof GetPaymentsForInvoiceAuditEnum[keyof typeof GetPaymentsForInvoiceAuditEnum];
/**
 * @export
 */
export const SearchInvoicesAuditEnum = {
    Full: 'FULL',
    Minimal: 'MINIMAL',
    None: 'NONE'
} as const;
export type SearchInvoicesAuditEnum = typeof SearchInvoicesAuditEnum[keyof typeof SearchInvoicesAuditEnum];
