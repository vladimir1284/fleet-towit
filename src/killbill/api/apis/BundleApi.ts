/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { AuditLog, BlockingState, Bundle, CustomField, Tag } from '../models';
import {
	AuditLogFromJSON,
	AuditLogToJSON,
	BlockingStateFromJSON,
	BlockingStateToJSON,
	BundleFromJSON,
	BundleToJSON,
	CustomFieldFromJSON,
	CustomFieldToJSON,
	TagFromJSON,
	TagToJSON
} from '../models';

export interface AddBundleBlockingStateRequest {
	body: BlockingState;
	bundleId: string;
	xKillbillCreatedBy: string;
	requestedDate?: Date;
	pluginProperty?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface CreateBundleCustomFieldsRequest {
	body: Array<CustomField>;
	bundleId: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface CreateBundleTagsRequest {
	body: Array<string>;
	bundleId: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface DeleteBundleCustomFieldsRequest {
	bundleId: string;
	xKillbillCreatedBy: string;
	customField?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface DeleteBundleTagsRequest {
	bundleId: string;
	xKillbillCreatedBy: string;
	tagDef?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface GetBundleRequest {
	bundleId: string;
	audit?: GetBundleAuditEnum;
}

export interface GetBundleAuditLogsWithHistoryRequest {
	bundleId: string;
}

export interface GetBundleByKeyRequest {
	externalKey: string;
	includedDeleted?: boolean;
	audit?: GetBundleByKeyAuditEnum;
}

export interface GetBundleCustomFieldsRequest {
	bundleId: string;
	audit?: GetBundleCustomFieldsAuditEnum;
}

export interface GetBundleTagsRequest {
	bundleId: string;
	includedDeleted?: boolean;
	audit?: GetBundleTagsAuditEnum;
}

export interface GetBundlesRequest {
	offset?: number;
	limit?: number;
	audit?: GetBundlesAuditEnum;
}

export interface ModifyBundleCustomFieldsRequest {
	body: Array<CustomField>;
	bundleId: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface PauseBundleRequest {
	bundleId: string;
	xKillbillCreatedBy: string;
	requestedDate?: Date;
	pluginProperty?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface RenameExternalKeyRequest {
	body: Bundle;
	bundleId: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface ResumeBundleRequest {
	bundleId: string;
	xKillbillCreatedBy: string;
	requestedDate?: Date;
	pluginProperty?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface SearchBundlesRequest {
	searchKey: string;
	offset?: number;
	limit?: number;
	audit?: SearchBundlesAuditEnum;
}

export interface TransferBundleRequest {
	body: Bundle;
	bundleId: string;
	xKillbillCreatedBy: string;
	requestedDate?: Date;
	billingPolicy?: TransferBundleBillingPolicyEnum;
	bcdTransfer?: TransferBundleBcdTransferEnum;
	pluginProperty?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

/**
 *
 */
export class BundleApi extends runtime.BaseAPI {
	/**
	 * Block a bundle
	 */
	async addBundleBlockingStateRaw(
		requestParameters: AddBundleBlockingStateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<BlockingState>>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling addBundleBlockingState.'
			);
		}

		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling addBundleBlockingState.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling addBundleBlockingState.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.requestedDate !== undefined) {
			queryParameters['requestedDate'] = (requestParameters.requestedDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}/block`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: BlockingStateToJSON(requestParameters.body)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) =>
			jsonValue.map(BlockingStateFromJSON)
		);
	}

	/**
	 * Block a bundle
	 */
	async addBundleBlockingState(
		requestParameters: AddBundleBlockingStateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<BlockingState>> {
		const response = await this.addBundleBlockingStateRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Add custom fields to bundle
	 */
	async createBundleCustomFieldsRaw(
		requestParameters: CreateBundleCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<CustomField>>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling createBundleCustomFields.'
			);
		}

		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling createBundleCustomFields.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createBundleCustomFields.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}/customFields`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body.map(CustomFieldToJSON)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldFromJSON));
	}

	/**
	 * Add custom fields to bundle
	 */
	async createBundleCustomFields(
		requestParameters: CreateBundleCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<CustomField>> {
		const response = await this.createBundleCustomFieldsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Add tags to bundle
	 */
	async createBundleTagsRaw(
		requestParameters: CreateBundleTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<Tag>>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling createBundleTags.'
			);
		}

		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling createBundleTags.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createBundleTags.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}/tags`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
	}

	/**
	 * Add tags to bundle
	 */
	async createBundleTags(
		requestParameters: CreateBundleTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<Tag>> {
		const response = await this.createBundleTagsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Remove custom fields from bundle
	 */
	async deleteBundleCustomFieldsRaw(
		requestParameters: DeleteBundleCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling deleteBundleCustomFields.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deleteBundleCustomFields.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.customField) {
			queryParameters['customField'] = requestParameters.customField;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}/customFields`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Remove custom fields from bundle
	 */
	async deleteBundleCustomFields(
		requestParameters: DeleteBundleCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.deleteBundleCustomFieldsRaw(requestParameters, initOverrides);
	}

	/**
	 * Remove tags from bundle
	 */
	async deleteBundleTagsRaw(
		requestParameters: DeleteBundleTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling deleteBundleTags.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deleteBundleTags.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.tagDef) {
			queryParameters['tagDef'] = requestParameters.tagDef;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}/tags`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Remove tags from bundle
	 */
	async deleteBundleTags(
		requestParameters: DeleteBundleTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.deleteBundleTagsRaw(requestParameters, initOverrides);
	}

	/**
	 * Retrieve a bundle by id
	 */
	async getBundleRaw(
		requestParameters: GetBundleRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Bundle>> {
		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling getBundle.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => BundleFromJSON(jsonValue));
	}

	/**
	 * Retrieve a bundle by id
	 */
	async getBundle(
		requestParameters: GetBundleRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Bundle> {
		const response = await this.getBundleRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve bundle audit logs with history by id
	 */
	async getBundleAuditLogsWithHistoryRaw(
		requestParameters: GetBundleAuditLogsWithHistoryRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<AuditLog>>> {
		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling getBundleAuditLogsWithHistory.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}/auditLogsWithHistory`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuditLogFromJSON));
	}

	/**
	 * Retrieve bundle audit logs with history by id
	 */
	async getBundleAuditLogsWithHistory(
		requestParameters: GetBundleAuditLogsWithHistoryRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<AuditLog>> {
		const response = await this.getBundleAuditLogsWithHistoryRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve a bundle by external key
	 */
	async getBundleByKeyRaw(
		requestParameters: GetBundleByKeyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<Bundle>>> {
		if (requestParameters.externalKey === null || requestParameters.externalKey === undefined) {
			throw new runtime.RequiredError(
				'externalKey',
				'Required parameter requestParameters.externalKey was null or undefined when calling getBundleByKey.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.externalKey !== undefined) {
			queryParameters['externalKey'] = requestParameters.externalKey;
		}

		if (requestParameters.includedDeleted !== undefined) {
			queryParameters['includedDeleted'] = requestParameters.includedDeleted;
		}

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BundleFromJSON));
	}

	/**
	 * Retrieve a bundle by external key
	 */
	async getBundleByKey(
		requestParameters: GetBundleByKeyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<Bundle>> {
		const response = await this.getBundleByKeyRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve bundle custom fields
	 */
	async getBundleCustomFieldsRaw(
		requestParameters: GetBundleCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<CustomField>>> {
		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling getBundleCustomFields.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}/customFields`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldFromJSON));
	}

	/**
	 * Retrieve bundle custom fields
	 */
	async getBundleCustomFields(
		requestParameters: GetBundleCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<CustomField>> {
		const response = await this.getBundleCustomFieldsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve bundle tags
	 */
	async getBundleTagsRaw(
		requestParameters: GetBundleTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<Tag>>> {
		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling getBundleTags.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.includedDeleted !== undefined) {
			queryParameters['includedDeleted'] = requestParameters.includedDeleted;
		}

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}/tags`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
	}

	/**
	 * Retrieve bundle tags
	 */
	async getBundleTags(
		requestParameters: GetBundleTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<Tag>> {
		const response = await this.getBundleTagsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * List bundles
	 */
	async getBundlesRaw(
		requestParameters: GetBundlesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<Bundle>>> {
		const queryParameters: any = {};

		if (requestParameters.offset !== undefined) {
			queryParameters['offset'] = requestParameters.offset;
		}

		if (requestParameters.limit !== undefined) {
			queryParameters['limit'] = requestParameters.limit;
		}

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/pagination`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BundleFromJSON));
	}

	/**
	 * List bundles
	 */
	async getBundles(
		requestParameters: GetBundlesRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<Bundle>> {
		const response = await this.getBundlesRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Modify custom fields to bundle
	 */
	async modifyBundleCustomFieldsRaw(
		requestParameters: ModifyBundleCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling modifyBundleCustomFields.'
			);
		}

		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling modifyBundleCustomFields.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling modifyBundleCustomFields.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}/customFields`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body.map(CustomFieldToJSON)
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Modify custom fields to bundle
	 */
	async modifyBundleCustomFields(
		requestParameters: ModifyBundleCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.modifyBundleCustomFieldsRaw(requestParameters, initOverrides);
	}

	/**
	 * Pause a bundle
	 */
	async pauseBundleRaw(
		requestParameters: PauseBundleRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling pauseBundle.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling pauseBundle.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.requestedDate !== undefined) {
			queryParameters['requestedDate'] = (requestParameters.requestedDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}/pause`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Pause a bundle
	 */
	async pauseBundle(
		requestParameters: PauseBundleRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.pauseBundleRaw(requestParameters, initOverrides);
	}

	/**
	 * Update a bundle externalKey
	 */
	async renameExternalKeyRaw(
		requestParameters: RenameExternalKeyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling renameExternalKey.'
			);
		}

		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling renameExternalKey.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling renameExternalKey.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}/renameKey`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters,
				body: BundleToJSON(requestParameters.body)
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Update a bundle externalKey
	 */
	async renameExternalKey(
		requestParameters: RenameExternalKeyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.renameExternalKeyRaw(requestParameters, initOverrides);
	}

	/**
	 * Resume a bundle
	 */
	async resumeBundleRaw(
		requestParameters: ResumeBundleRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling resumeBundle.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling resumeBundle.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.requestedDate !== undefined) {
			queryParameters['requestedDate'] = (requestParameters.requestedDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}/resume`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Resume a bundle
	 */
	async resumeBundle(
		requestParameters: ResumeBundleRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.resumeBundleRaw(requestParameters, initOverrides);
	}

	/**
	 * Search bundles
	 */
	async searchBundlesRaw(
		requestParameters: SearchBundlesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<Bundle>>> {
		if (requestParameters.searchKey === null || requestParameters.searchKey === undefined) {
			throw new runtime.RequiredError(
				'searchKey',
				'Required parameter requestParameters.searchKey was null or undefined when calling searchBundles.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.offset !== undefined) {
			queryParameters['offset'] = requestParameters.offset;
		}

		if (requestParameters.limit !== undefined) {
			queryParameters['limit'] = requestParameters.limit;
		}

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/search/{searchKey}`.replace(
					`{${'searchKey'}}`,
					encodeURIComponent(String(requestParameters.searchKey))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BundleFromJSON));
	}

	/**
	 * Search bundles
	 */
	async searchBundles(
		requestParameters: SearchBundlesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<Bundle>> {
		const response = await this.searchBundlesRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Transfer a bundle to another account
	 */
	async transferBundleRaw(
		requestParameters: TransferBundleRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Bundle>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling transferBundle.'
			);
		}

		if (requestParameters.bundleId === null || requestParameters.bundleId === undefined) {
			throw new runtime.RequiredError(
				'bundleId',
				'Required parameter requestParameters.bundleId was null or undefined when calling transferBundle.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling transferBundle.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.requestedDate !== undefined) {
			queryParameters['requestedDate'] = (requestParameters.requestedDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.billingPolicy !== undefined) {
			queryParameters['billingPolicy'] = requestParameters.billingPolicy;
		}

		if (requestParameters.bcdTransfer !== undefined) {
			queryParameters['bcdTransfer'] = requestParameters.bcdTransfer;
		}

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/bundles/{bundleId}`.replace(
					`{${'bundleId'}}`,
					encodeURIComponent(String(requestParameters.bundleId))
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: BundleToJSON(requestParameters.body)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => BundleFromJSON(jsonValue));
	}

	/**
	 * Transfer a bundle to another account
	 */
	async transferBundle(
		requestParameters: TransferBundleRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Bundle> {
		const response = await this.transferBundleRaw(requestParameters, initOverrides);
		return await response.value();
	}
}

/**
 * @export
 */
export const GetBundleAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type GetBundleAuditEnum = (typeof GetBundleAuditEnum)[keyof typeof GetBundleAuditEnum];
/**
 * @export
 */
export const GetBundleByKeyAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type GetBundleByKeyAuditEnum =
	(typeof GetBundleByKeyAuditEnum)[keyof typeof GetBundleByKeyAuditEnum];
/**
 * @export
 */
export const GetBundleCustomFieldsAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type GetBundleCustomFieldsAuditEnum =
	(typeof GetBundleCustomFieldsAuditEnum)[keyof typeof GetBundleCustomFieldsAuditEnum];
/**
 * @export
 */
export const GetBundleTagsAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type GetBundleTagsAuditEnum =
	(typeof GetBundleTagsAuditEnum)[keyof typeof GetBundleTagsAuditEnum];
/**
 * @export
 */
export const GetBundlesAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type GetBundlesAuditEnum = (typeof GetBundlesAuditEnum)[keyof typeof GetBundlesAuditEnum];
/**
 * @export
 */
export const SearchBundlesAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type SearchBundlesAuditEnum =
	(typeof SearchBundlesAuditEnum)[keyof typeof SearchBundlesAuditEnum];
/**
 * @export
 */
export const TransferBundleBillingPolicyEnum = {
	StartOfTerm: 'START_OF_TERM',
	EndOfTerm: 'END_OF_TERM',
	Immediate: 'IMMEDIATE',
	Illegal: 'ILLEGAL'
} as const;
export type TransferBundleBillingPolicyEnum =
	(typeof TransferBundleBillingPolicyEnum)[keyof typeof TransferBundleBillingPolicyEnum];
/**
 * @export
 */
export const TransferBundleBcdTransferEnum = {
	None: 'NONE',
	UseExisting: 'USE_EXISTING',
	AlignWithEffDt: 'ALIGN_WITH_EFF_DT'
} as const;
export type TransferBundleBcdTransferEnum =
	(typeof TransferBundleBcdTransferEnum)[keyof typeof TransferBundleBcdTransferEnum];
