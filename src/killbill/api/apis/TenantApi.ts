/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { Tenant, TenantKeyValue } from '../models';
import {
	TenantFromJSON,
	TenantToJSON,
	TenantKeyValueFromJSON,
	TenantKeyValueToJSON
} from '../models';

export interface CreateTenantRequest {
	body: Tenant;
	xKillbillCreatedBy: string;
	useGlobalDefault?: boolean;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface DeletePerTenantConfigurationRequest {
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface DeletePluginConfigurationRequest {
	pluginName: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface DeletePluginPaymentStateMachineConfigRequest {
	pluginName: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface DeletePushNotificationCallbacksRequest {
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface DeleteUserKeyValueRequest {
	keyName: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface GetAllPluginConfigurationRequest {
	keyPrefix: string;
}

export interface GetPluginConfigurationRequest {
	pluginName: string;
}

export interface GetPluginPaymentStateMachineConfigRequest {
	pluginName: string;
}

export interface GetTenantRequest {
	tenantId: string;
}

export interface GetTenantByApiKeyRequest {
	apiKey?: string;
}

export interface GetUserKeyValueRequest {
	keyName: string;
}

export interface InsertUserKeyValueRequest {
	body: string;
	keyName: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface RegisterPushNotificationCallbackRequest {
	xKillbillCreatedBy: string;
	cb?: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface UploadPerTenantConfigurationRequest {
	body: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface UploadPluginConfigurationRequest {
	body: string;
	pluginName: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface UploadPluginPaymentStateMachineConfigRequest {
	body: string;
	pluginName: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

/**
 *
 */
export class TenantApi extends runtime.BaseAPI {
	/**
	 * Create a tenant
	 */
	async createTenantRaw(
		requestParameters: CreateTenantRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Tenant>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling createTenant.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createTenant.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.useGlobalDefault !== undefined) {
			queryParameters['useGlobalDefault'] = requestParameters.useGlobalDefault;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: TenantToJSON(requestParameters.body)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
	}

	/**
	 * Create a tenant
	 */
	async createTenant(
		requestParameters: CreateTenantRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Tenant> {
		const response = await this.createTenantRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Delete a per tenant configuration (system properties)
	 */
	async deletePerTenantConfigurationRaw(
		requestParameters: DeletePerTenantConfigurationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deletePerTenantConfiguration.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/uploadPerTenantConfig`,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Delete a per tenant configuration (system properties)
	 */
	async deletePerTenantConfiguration(
		requestParameters: DeletePerTenantConfigurationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.deletePerTenantConfigurationRaw(requestParameters, initOverrides);
	}

	/**
	 * Delete a per tenant configuration for a plugin
	 */
	async deletePluginConfigurationRaw(
		requestParameters: DeletePluginConfigurationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.pluginName === null || requestParameters.pluginName === undefined) {
			throw new runtime.RequiredError(
				'pluginName',
				'Required parameter requestParameters.pluginName was null or undefined when calling deletePluginConfiguration.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deletePluginConfiguration.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/uploadPluginConfig/{pluginName}`.replace(
					`{${'pluginName'}}`,
					encodeURIComponent(String(requestParameters.pluginName))
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Delete a per tenant configuration for a plugin
	 */
	async deletePluginConfiguration(
		requestParameters: DeletePluginConfigurationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.deletePluginConfigurationRaw(requestParameters, initOverrides);
	}

	/**
	 * Delete a per tenant payment state machine for a plugin
	 */
	async deletePluginPaymentStateMachineConfigRaw(
		requestParameters: DeletePluginPaymentStateMachineConfigRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.pluginName === null || requestParameters.pluginName === undefined) {
			throw new runtime.RequiredError(
				'pluginName',
				'Required parameter requestParameters.pluginName was null or undefined when calling deletePluginPaymentStateMachineConfig.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deletePluginPaymentStateMachineConfig.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/uploadPluginPaymentStateMachineConfig/{pluginName}`.replace(
					`{${'pluginName'}}`,
					encodeURIComponent(String(requestParameters.pluginName))
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Delete a per tenant payment state machine for a plugin
	 */
	async deletePluginPaymentStateMachineConfig(
		requestParameters: DeletePluginPaymentStateMachineConfigRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.deletePluginPaymentStateMachineConfigRaw(requestParameters, initOverrides);
	}

	/**
	 * Delete a push notification
	 */
	async deletePushNotificationCallbacksRaw(
		requestParameters: DeletePushNotificationCallbacksRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deletePushNotificationCallbacks.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/registerNotificationCallback`,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Delete a push notification
	 */
	async deletePushNotificationCallbacks(
		requestParameters: DeletePushNotificationCallbacksRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.deletePushNotificationCallbacksRaw(requestParameters, initOverrides);
	}

	/**
	 * Delete  a per tenant user key/value
	 */
	async deleteUserKeyValueRaw(
		requestParameters: DeleteUserKeyValueRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.keyName === null || requestParameters.keyName === undefined) {
			throw new runtime.RequiredError(
				'keyName',
				'Required parameter requestParameters.keyName was null or undefined when calling deleteUserKeyValue.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deleteUserKeyValue.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/userKeyValue/{keyName}`.replace(
					`{${'keyName'}}`,
					encodeURIComponent(String(requestParameters.keyName))
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Delete  a per tenant user key/value
	 */
	async deleteUserKeyValue(
		requestParameters: DeleteUserKeyValueRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.deleteUserKeyValueRaw(requestParameters, initOverrides);
	}

	/**
	 * Retrieve a per tenant key value based on key prefix
	 */
	async getAllPluginConfigurationRaw(
		requestParameters: GetAllPluginConfigurationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<TenantKeyValue>>> {
		if (requestParameters.keyPrefix === null || requestParameters.keyPrefix === undefined) {
			throw new runtime.RequiredError(
				'keyPrefix',
				'Required parameter requestParameters.keyPrefix was null or undefined when calling getAllPluginConfiguration.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/uploadPerTenantConfig/{keyPrefix}/search`.replace(
					`{${'keyPrefix'}}`,
					encodeURIComponent(String(requestParameters.keyPrefix))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) =>
			jsonValue.map(TenantKeyValueFromJSON)
		);
	}

	/**
	 * Retrieve a per tenant key value based on key prefix
	 */
	async getAllPluginConfiguration(
		requestParameters: GetAllPluginConfigurationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<TenantKeyValue>> {
		const response = await this.getAllPluginConfigurationRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve a per tenant configuration (system properties)
	 */
	async getPerTenantConfigurationRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TenantKeyValue>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/uploadPerTenantConfig`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TenantKeyValueFromJSON(jsonValue));
	}

	/**
	 * Retrieve a per tenant configuration (system properties)
	 */
	async getPerTenantConfiguration(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TenantKeyValue> {
		const response = await this.getPerTenantConfigurationRaw(initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve a per tenant configuration for a plugin
	 */
	async getPluginConfigurationRaw(
		requestParameters: GetPluginConfigurationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TenantKeyValue>> {
		if (requestParameters.pluginName === null || requestParameters.pluginName === undefined) {
			throw new runtime.RequiredError(
				'pluginName',
				'Required parameter requestParameters.pluginName was null or undefined when calling getPluginConfiguration.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/uploadPluginConfig/{pluginName}`.replace(
					`{${'pluginName'}}`,
					encodeURIComponent(String(requestParameters.pluginName))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TenantKeyValueFromJSON(jsonValue));
	}

	/**
	 * Retrieve a per tenant configuration for a plugin
	 */
	async getPluginConfiguration(
		requestParameters: GetPluginConfigurationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TenantKeyValue> {
		const response = await this.getPluginConfigurationRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve a per tenant payment state machine for a plugin
	 */
	async getPluginPaymentStateMachineConfigRaw(
		requestParameters: GetPluginPaymentStateMachineConfigRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TenantKeyValue>> {
		if (requestParameters.pluginName === null || requestParameters.pluginName === undefined) {
			throw new runtime.RequiredError(
				'pluginName',
				'Required parameter requestParameters.pluginName was null or undefined when calling getPluginPaymentStateMachineConfig.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/uploadPluginPaymentStateMachineConfig/{pluginName}`.replace(
					`{${'pluginName'}}`,
					encodeURIComponent(String(requestParameters.pluginName))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TenantKeyValueFromJSON(jsonValue));
	}

	/**
	 * Retrieve a per tenant payment state machine for a plugin
	 */
	async getPluginPaymentStateMachineConfig(
		requestParameters: GetPluginPaymentStateMachineConfigRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TenantKeyValue> {
		const response = await this.getPluginPaymentStateMachineConfigRaw(
			requestParameters,
			initOverrides
		);
		return await response.value();
	}

	/**
	 * Retrieve a push notification
	 */
	async getPushNotificationCallbacksRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TenantKeyValue>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/registerNotificationCallback`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TenantKeyValueFromJSON(jsonValue));
	}

	/**
	 * Retrieve a push notification
	 */
	async getPushNotificationCallbacks(
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TenantKeyValue> {
		const response = await this.getPushNotificationCallbacksRaw(initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve a tenant by id
	 */
	async getTenantRaw(
		requestParameters: GetTenantRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Tenant>> {
		if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
			throw new runtime.RequiredError(
				'tenantId',
				'Required parameter requestParameters.tenantId was null or undefined when calling getTenant.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/{tenantId}`.replace(
					`{${'tenantId'}}`,
					encodeURIComponent(String(requestParameters.tenantId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
	}

	/**
	 * Retrieve a tenant by id
	 */
	async getTenant(
		requestParameters: GetTenantRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Tenant> {
		const response = await this.getTenantRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve a tenant by its API key
	 */
	async getTenantByApiKeyRaw(
		requestParameters: GetTenantByApiKeyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Tenant>> {
		const queryParameters: any = {};

		if (requestParameters.apiKey !== undefined) {
			queryParameters['apiKey'] = requestParameters.apiKey;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
	}

	/**
	 * Retrieve a tenant by its API key
	 */
	async getTenantByApiKey(
		requestParameters: GetTenantByApiKeyRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Tenant> {
		const response = await this.getTenantByApiKeyRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve a per tenant user key/value
	 */
	async getUserKeyValueRaw(
		requestParameters: GetUserKeyValueRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TenantKeyValue>> {
		if (requestParameters.keyName === null || requestParameters.keyName === undefined) {
			throw new runtime.RequiredError(
				'keyName',
				'Required parameter requestParameters.keyName was null or undefined when calling getUserKeyValue.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/userKeyValue/{keyName}`.replace(
					`{${'keyName'}}`,
					encodeURIComponent(String(requestParameters.keyName))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TenantKeyValueFromJSON(jsonValue));
	}

	/**
	 * Retrieve a per tenant user key/value
	 */
	async getUserKeyValue(
		requestParameters: GetUserKeyValueRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TenantKeyValue> {
		const response = await this.getUserKeyValueRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Add a per tenant user key/value
	 */
	async insertUserKeyValueRaw(
		requestParameters: InsertUserKeyValueRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TenantKeyValue>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling insertUserKeyValue.'
			);
		}

		if (requestParameters.keyName === null || requestParameters.keyName === undefined) {
			throw new runtime.RequiredError(
				'keyName',
				'Required parameter requestParameters.keyName was null or undefined when calling insertUserKeyValue.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling insertUserKeyValue.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'text/plain';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/userKeyValue/{keyName}`.replace(
					`{${'keyName'}}`,
					encodeURIComponent(String(requestParameters.keyName))
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body as any
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TenantKeyValueFromJSON(jsonValue));
	}

	/**
	 * Add a per tenant user key/value
	 */
	async insertUserKeyValue(
		requestParameters: InsertUserKeyValueRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TenantKeyValue> {
		const response = await this.insertUserKeyValueRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Create a push notification
	 */
	async registerPushNotificationCallbackRaw(
		requestParameters: RegisterPushNotificationCallbackRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TenantKeyValue>> {
		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling registerPushNotificationCallback.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.cb !== undefined) {
			queryParameters['cb'] = requestParameters.cb;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/registerNotificationCallback`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TenantKeyValueFromJSON(jsonValue));
	}

	/**
	 * Create a push notification
	 */
	async registerPushNotificationCallback(
		requestParameters: RegisterPushNotificationCallbackRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TenantKeyValue> {
		const response = await this.registerPushNotificationCallbackRaw(
			requestParameters,
			initOverrides
		);
		return await response.value();
	}

	/**
	 * Add a per tenant configuration (system properties)
	 */
	async uploadPerTenantConfigurationRaw(
		requestParameters: UploadPerTenantConfigurationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TenantKeyValue>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling uploadPerTenantConfiguration.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling uploadPerTenantConfiguration.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'text/plain';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/uploadPerTenantConfig`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body as any
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TenantKeyValueFromJSON(jsonValue));
	}

	/**
	 * Add a per tenant configuration (system properties)
	 */
	async uploadPerTenantConfiguration(
		requestParameters: UploadPerTenantConfigurationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TenantKeyValue> {
		const response = await this.uploadPerTenantConfigurationRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Add a per tenant configuration for a plugin
	 */
	async uploadPluginConfigurationRaw(
		requestParameters: UploadPluginConfigurationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TenantKeyValue>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling uploadPluginConfiguration.'
			);
		}

		if (requestParameters.pluginName === null || requestParameters.pluginName === undefined) {
			throw new runtime.RequiredError(
				'pluginName',
				'Required parameter requestParameters.pluginName was null or undefined when calling uploadPluginConfiguration.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling uploadPluginConfiguration.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'text/plain';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/uploadPluginConfig/{pluginName}`.replace(
					`{${'pluginName'}}`,
					encodeURIComponent(String(requestParameters.pluginName))
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body as any
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TenantKeyValueFromJSON(jsonValue));
	}

	/**
	 * Add a per tenant configuration for a plugin
	 */
	async uploadPluginConfiguration(
		requestParameters: UploadPluginConfigurationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TenantKeyValue> {
		const response = await this.uploadPluginConfigurationRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Add a per tenant payment state machine for a plugin
	 */
	async uploadPluginPaymentStateMachineConfigRaw(
		requestParameters: UploadPluginPaymentStateMachineConfigRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TenantKeyValue>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling uploadPluginPaymentStateMachineConfig.'
			);
		}

		if (requestParameters.pluginName === null || requestParameters.pluginName === undefined) {
			throw new runtime.RequiredError(
				'pluginName',
				'Required parameter requestParameters.pluginName was null or undefined when calling uploadPluginPaymentStateMachineConfig.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling uploadPluginPaymentStateMachineConfig.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'text/plain';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/tenants/uploadPluginPaymentStateMachineConfig/{pluginName}`.replace(
					`{${'pluginName'}}`,
					encodeURIComponent(String(requestParameters.pluginName))
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body as any
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TenantKeyValueFromJSON(jsonValue));
	}

	/**
	 * Add a per tenant payment state machine for a plugin
	 */
	async uploadPluginPaymentStateMachineConfig(
		requestParameters: UploadPluginPaymentStateMachineConfigRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TenantKeyValue> {
		const response = await this.uploadPluginPaymentStateMachineConfigRaw(
			requestParameters,
			initOverrides
		);
		return await response.value();
	}
}
