/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NodeCommand,
  NodeInfo,
} from '../models';
import {
    NodeCommandFromJSON,
    NodeCommandToJSON,
    NodeInfoFromJSON,
    NodeInfoToJSON,
} from '../models';

export interface TriggerNodeCommandRequest {
    body: NodeCommand;
    xKillbillCreatedBy: string;
    localNodeOnly?: boolean;
    xKillbillReason?: string;
    xKillbillComment?: string;
}

/**
 * 
 */
export class NodesInfoApi extends runtime.BaseAPI {

    /**
     * Retrieve all the nodes infos
     */
    async getNodesInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NodeInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/nodesInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NodeInfoFromJSON));
    }

    /**
     * Retrieve all the nodes infos
     */
    async getNodesInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NodeInfo>> {
        const response = await this.getNodesInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Trigger a node command
     */
    async triggerNodeCommandRaw(requestParameters: TriggerNodeCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling triggerNodeCommand.');
        }

        if (requestParameters.xKillbillCreatedBy === null || requestParameters.xKillbillCreatedBy === undefined) {
            throw new runtime.RequiredError('xKillbillCreatedBy','Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling triggerNodeCommand.');
        }

        const queryParameters: any = {};

        if (requestParameters.localNodeOnly !== undefined) {
            queryParameters['localNodeOnly'] = requestParameters.localNodeOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xKillbillCreatedBy !== undefined && requestParameters.xKillbillCreatedBy !== null) {
            headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
        }

        if (requestParameters.xKillbillReason !== undefined && requestParameters.xKillbillReason !== null) {
            headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
        }

        if (requestParameters.xKillbillComment !== undefined && requestParameters.xKillbillComment !== null) {
            headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/1.0/kb/nodesInfo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NodeCommandToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Trigger a node command
     */
    async triggerNodeCommand(requestParameters: TriggerNodeCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.triggerNodeCommandRaw(requestParameters, initOverrides);
    }

}
