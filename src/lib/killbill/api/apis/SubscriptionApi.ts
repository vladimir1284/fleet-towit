/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
	AuditLog,
	BlockingState,
	BulkSubscriptionsBundle,
	Bundle,
	CustomField,
	Subscription,
	Tag
} from '../models';
import {
	AuditLogFromJSON,
	AuditLogToJSON,
	BlockingStateFromJSON,
	BlockingStateToJSON,
	BulkSubscriptionsBundleFromJSON,
	BulkSubscriptionsBundleToJSON,
	BundleFromJSON,
	BundleToJSON,
	CustomFieldFromJSON,
	CustomFieldToJSON,
	SubscriptionFromJSON,
	SubscriptionToJSON,
	TagFromJSON,
	TagToJSON
} from '../models';

export interface AddSubscriptionBlockingStateRequest {
	body: BlockingState;
	subscriptionId: string;
	xKillbillCreatedBy: string;
	requestedDate?: Date;
	pluginProperty?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface CancelSubscriptionPlanRequest {
	subscriptionId: string;
	xKillbillCreatedBy: string;
	requestedDate?: Date;
	callCompletion?: boolean;
	callTimeoutSec?: number;
	entitlementPolicy?: CancelSubscriptionPlanEntitlementPolicyEnum;
	billingPolicy?: CancelSubscriptionPlanBillingPolicyEnum;
	useRequestedDateForBilling?: boolean;
	pluginProperty?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface ChangeSubscriptionPlanRequest {
	body: Subscription;
	subscriptionId: string;
	xKillbillCreatedBy: string;
	requestedDate?: Date;
	callCompletion?: boolean;
	callTimeoutSec?: number;
	billingPolicy?: ChangeSubscriptionPlanBillingPolicyEnum;
	pluginProperty?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface CreateSubscriptionRequest {
	body: Subscription;
	xKillbillCreatedBy: string;
	entitlementDate?: Date;
	billingDate?: Date;
	renameKeyIfExistsAndUnused?: boolean;
	migrated?: boolean;
	skipResponse?: boolean;
	callCompletion?: boolean;
	callTimeoutSec?: number;
	pluginProperty?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface CreateSubscriptionCustomFieldsRequest {
	body: Array<CustomField>;
	subscriptionId: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface CreateSubscriptionTagsRequest {
	body: Array<string>;
	subscriptionId: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface CreateSubscriptionWithAddOnsRequest {
	body: Array<Subscription>;
	xKillbillCreatedBy: string;
	entitlementDate?: Date;
	billingDate?: Date;
	migrated?: boolean;
	skipResponse?: boolean;
	renameKeyIfExistsAndUnused?: boolean;
	callCompletion?: boolean;
	callTimeoutSec?: number;
	pluginProperty?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface CreateSubscriptionsWithAddOnsRequest {
	body: Array<BulkSubscriptionsBundle>;
	xKillbillCreatedBy: string;
	entitlementDate?: Date;
	billingDate?: Date;
	renameKeyIfExistsAndUnused?: boolean;
	migrated?: boolean;
	skipResponse?: boolean;
	callCompletion?: boolean;
	callTimeoutSec?: number;
	pluginProperty?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface DeleteSubscriptionCustomFieldsRequest {
	subscriptionId: string;
	xKillbillCreatedBy: string;
	customField?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface DeleteSubscriptionTagsRequest {
	subscriptionId: string;
	xKillbillCreatedBy: string;
	tagDef?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface GetSubscriptionRequest {
	subscriptionId: string;
	audit?: GetSubscriptionAuditEnum;
}

export interface GetSubscriptionAuditLogsWithHistoryRequest {
	subscriptionId: string;
}

export interface GetSubscriptionByKeyRequest {
	externalKey: string;
	audit?: GetSubscriptionByKeyAuditEnum;
}

export interface GetSubscriptionCustomFieldsRequest {
	subscriptionId: string;
	audit?: GetSubscriptionCustomFieldsAuditEnum;
}

export interface GetSubscriptionEventAuditLogsWithHistoryRequest {
	eventId: string;
}

export interface GetSubscriptionTagsRequest {
	subscriptionId: string;
	includedDeleted?: boolean;
	audit?: GetSubscriptionTagsAuditEnum;
}

export interface ModifySubscriptionCustomFieldsRequest {
	body: Array<CustomField>;
	subscriptionId: string;
	xKillbillCreatedBy: string;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface UncancelSubscriptionPlanRequest {
	subscriptionId: string;
	xKillbillCreatedBy: string;
	pluginProperty?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface UndoChangeSubscriptionPlanRequest {
	subscriptionId: string;
	xKillbillCreatedBy: string;
	pluginProperty?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface UpdateSubscriptionBCDRequest {
	body: Subscription;
	subscriptionId: string;
	xKillbillCreatedBy: string;
	effectiveFromDate?: Date;
	forceNewBcdWithPastEffectiveDate?: boolean;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface UpdateSubscriptionQuantityRequest {
	body: Subscription;
	subscriptionId: string;
	xKillbillCreatedBy: string;
	effectiveFromDate?: Date;
	forceNewQuantityWithPastEffectiveDate?: boolean;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

/**
 *
 */
export class SubscriptionApi extends runtime.BaseAPI {
	/**
	 * Block a subscription
	 */
	async addSubscriptionBlockingStateRaw(
		requestParameters: AddSubscriptionBlockingStateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<BlockingState>>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling addSubscriptionBlockingState.'
			);
		}

		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling addSubscriptionBlockingState.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling addSubscriptionBlockingState.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.requestedDate !== undefined) {
			queryParameters['requestedDate'] = (requestParameters.requestedDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}/block`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: BlockingStateToJSON(requestParameters.body)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) =>
			jsonValue.map(BlockingStateFromJSON)
		);
	}

	/**
	 * Block a subscription
	 */
	async addSubscriptionBlockingState(
		requestParameters: AddSubscriptionBlockingStateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<BlockingState>> {
		const response = await this.addSubscriptionBlockingStateRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Cancel an entitlement plan
	 */
	async cancelSubscriptionPlanRaw(
		requestParameters: CancelSubscriptionPlanRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling cancelSubscriptionPlan.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling cancelSubscriptionPlan.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.requestedDate !== undefined) {
			queryParameters['requestedDate'] = (requestParameters.requestedDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.callCompletion !== undefined) {
			queryParameters['callCompletion'] = requestParameters.callCompletion;
		}

		if (requestParameters.callTimeoutSec !== undefined) {
			queryParameters['callTimeoutSec'] = requestParameters.callTimeoutSec;
		}

		if (requestParameters.entitlementPolicy !== undefined) {
			queryParameters['entitlementPolicy'] = requestParameters.entitlementPolicy;
		}

		if (requestParameters.billingPolicy !== undefined) {
			queryParameters['billingPolicy'] = requestParameters.billingPolicy;
		}

		if (requestParameters.useRequestedDateForBilling !== undefined) {
			queryParameters['useRequestedDateForBilling'] = requestParameters.useRequestedDateForBilling;
		}

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Cancel an entitlement plan
	 */
	async cancelSubscriptionPlan(
		requestParameters: CancelSubscriptionPlanRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.cancelSubscriptionPlanRaw(requestParameters, initOverrides);
	}

	/**
	 * Change entitlement plan
	 */
	async changeSubscriptionPlanRaw(
		requestParameters: ChangeSubscriptionPlanRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling changeSubscriptionPlan.'
			);
		}

		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling changeSubscriptionPlan.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling changeSubscriptionPlan.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.requestedDate !== undefined) {
			queryParameters['requestedDate'] = (requestParameters.requestedDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.callCompletion !== undefined) {
			queryParameters['callCompletion'] = requestParameters.callCompletion;
		}

		if (requestParameters.callTimeoutSec !== undefined) {
			queryParameters['callTimeoutSec'] = requestParameters.callTimeoutSec;
		}

		if (requestParameters.billingPolicy !== undefined) {
			queryParameters['billingPolicy'] = requestParameters.billingPolicy;
		}

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters,
				body: SubscriptionToJSON(requestParameters.body)
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Change entitlement plan
	 */
	async changeSubscriptionPlan(
		requestParameters: ChangeSubscriptionPlanRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.changeSubscriptionPlanRaw(requestParameters, initOverrides);
	}

	/**
	 * Create an subscription
	 */
	async createSubscriptionRaw(
		requestParameters: CreateSubscriptionRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Subscription>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling createSubscription.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createSubscription.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.entitlementDate !== undefined) {
			queryParameters['entitlementDate'] = (requestParameters.entitlementDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.billingDate !== undefined) {
			queryParameters['billingDate'] = (requestParameters.billingDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.renameKeyIfExistsAndUnused !== undefined) {
			queryParameters['renameKeyIfExistsAndUnused'] = requestParameters.renameKeyIfExistsAndUnused;
		}

		if (requestParameters.migrated !== undefined) {
			queryParameters['migrated'] = requestParameters.migrated;
		}

		if (requestParameters.skipResponse !== undefined) {
			queryParameters['skipResponse'] = requestParameters.skipResponse;
		}

		if (requestParameters.callCompletion !== undefined) {
			queryParameters['callCompletion'] = requestParameters.callCompletion;
		}

		if (requestParameters.callTimeoutSec !== undefined) {
			queryParameters['callTimeoutSec'] = requestParameters.callTimeoutSec;
		}

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: SubscriptionToJSON(requestParameters.body)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
	}

	/**
	 * Create an subscription
	 */
	async createSubscription(
		requestParameters: CreateSubscriptionRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Subscription> {
		const response = await this.createSubscriptionRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Add custom fields to subscription
	 */
	async createSubscriptionCustomFieldsRaw(
		requestParameters: CreateSubscriptionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling createSubscriptionCustomFields.'
			);
		}

		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling createSubscriptionCustomFields.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createSubscriptionCustomFields.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}/customFields`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body.map(CustomFieldToJSON)
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Add custom fields to subscription
	 */
	async createSubscriptionCustomFields(
		requestParameters: CreateSubscriptionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.createSubscriptionCustomFieldsRaw(requestParameters, initOverrides);
	}

	/**
	 */
	async createSubscriptionTagsRaw(
		requestParameters: CreateSubscriptionTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling createSubscriptionTags.'
			);
		}

		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling createSubscriptionTags.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createSubscriptionTags.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}/tags`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 */
	async createSubscriptionTags(
		requestParameters: CreateSubscriptionTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.createSubscriptionTagsRaw(requestParameters, initOverrides);
	}

	/**
	 * Create an entitlement with addOn products
	 */
	async createSubscriptionWithAddOnsRaw(
		requestParameters: CreateSubscriptionWithAddOnsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Bundle>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling createSubscriptionWithAddOns.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createSubscriptionWithAddOns.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.entitlementDate !== undefined) {
			queryParameters['entitlementDate'] = (requestParameters.entitlementDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.billingDate !== undefined) {
			queryParameters['billingDate'] = (requestParameters.billingDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.migrated !== undefined) {
			queryParameters['migrated'] = requestParameters.migrated;
		}

		if (requestParameters.skipResponse !== undefined) {
			queryParameters['skipResponse'] = requestParameters.skipResponse;
		}

		if (requestParameters.renameKeyIfExistsAndUnused !== undefined) {
			queryParameters['renameKeyIfExistsAndUnused'] = requestParameters.renameKeyIfExistsAndUnused;
		}

		if (requestParameters.callCompletion !== undefined) {
			queryParameters['callCompletion'] = requestParameters.callCompletion;
		}

		if (requestParameters.callTimeoutSec !== undefined) {
			queryParameters['callTimeoutSec'] = requestParameters.callTimeoutSec;
		}

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/createSubscriptionWithAddOns`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body.map(SubscriptionToJSON)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => BundleFromJSON(jsonValue));
	}

	/**
	 * Create an entitlement with addOn products
	 */
	async createSubscriptionWithAddOns(
		requestParameters: CreateSubscriptionWithAddOnsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Bundle> {
		const response = await this.createSubscriptionWithAddOnsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Create multiple entitlements with addOn products
	 */
	async createSubscriptionsWithAddOnsRaw(
		requestParameters: CreateSubscriptionsWithAddOnsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<Bundle>>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling createSubscriptionsWithAddOns.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createSubscriptionsWithAddOns.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.entitlementDate !== undefined) {
			queryParameters['entitlementDate'] = (requestParameters.entitlementDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.billingDate !== undefined) {
			queryParameters['billingDate'] = (requestParameters.billingDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.renameKeyIfExistsAndUnused !== undefined) {
			queryParameters['renameKeyIfExistsAndUnused'] = requestParameters.renameKeyIfExistsAndUnused;
		}

		if (requestParameters.migrated !== undefined) {
			queryParameters['migrated'] = requestParameters.migrated;
		}

		if (requestParameters.skipResponse !== undefined) {
			queryParameters['skipResponse'] = requestParameters.skipResponse;
		}

		if (requestParameters.callCompletion !== undefined) {
			queryParameters['callCompletion'] = requestParameters.callCompletion;
		}

		if (requestParameters.callTimeoutSec !== undefined) {
			queryParameters['callTimeoutSec'] = requestParameters.callTimeoutSec;
		}

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/createSubscriptionsWithAddOns`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body.map(BulkSubscriptionsBundleToJSON)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BundleFromJSON));
	}

	/**
	 * Create multiple entitlements with addOn products
	 */
	async createSubscriptionsWithAddOns(
		requestParameters: CreateSubscriptionsWithAddOnsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<Bundle>> {
		const response = await this.createSubscriptionsWithAddOnsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Remove custom fields from subscription
	 */
	async deleteSubscriptionCustomFieldsRaw(
		requestParameters: DeleteSubscriptionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling deleteSubscriptionCustomFields.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deleteSubscriptionCustomFields.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.customField) {
			queryParameters['customField'] = requestParameters.customField;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}/customFields`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Remove custom fields from subscription
	 */
	async deleteSubscriptionCustomFields(
		requestParameters: DeleteSubscriptionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.deleteSubscriptionCustomFieldsRaw(requestParameters, initOverrides);
	}

	/**
	 * Remove tags from subscription
	 */
	async deleteSubscriptionTagsRaw(
		requestParameters: DeleteSubscriptionTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling deleteSubscriptionTags.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling deleteSubscriptionTags.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.tagDef) {
			queryParameters['tagDef'] = requestParameters.tagDef;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}/tags`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Remove tags from subscription
	 */
	async deleteSubscriptionTags(
		requestParameters: DeleteSubscriptionTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.deleteSubscriptionTagsRaw(requestParameters, initOverrides);
	}

	/**
	 * Retrieve a subscription by id
	 */
	async getSubscriptionRaw(
		requestParameters: GetSubscriptionRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Subscription>> {
		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling getSubscription.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
	}

	/**
	 * Retrieve a subscription by id
	 */
	async getSubscription(
		requestParameters: GetSubscriptionRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Subscription> {
		const response = await this.getSubscriptionRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve subscription audit logs with history by id
	 */
	async getSubscriptionAuditLogsWithHistoryRaw(
		requestParameters: GetSubscriptionAuditLogsWithHistoryRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<AuditLog>>> {
		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling getSubscriptionAuditLogsWithHistory.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}/auditLogsWithHistory`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuditLogFromJSON));
	}

	/**
	 * Retrieve subscription audit logs with history by id
	 */
	async getSubscriptionAuditLogsWithHistory(
		requestParameters: GetSubscriptionAuditLogsWithHistoryRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<AuditLog>> {
		const response = await this.getSubscriptionAuditLogsWithHistoryRaw(
			requestParameters,
			initOverrides
		);
		return await response.value();
	}

	/**
	 * Retrieve a subscription by external key
	 */
	async getSubscriptionByKeyRaw(
		requestParameters: GetSubscriptionByKeyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Subscription>> {
		if (requestParameters.externalKey === null || requestParameters.externalKey === undefined) {
			throw new runtime.RequiredError(
				'externalKey',
				'Required parameter requestParameters.externalKey was null or undefined when calling getSubscriptionByKey.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.externalKey !== undefined) {
			queryParameters['externalKey'] = requestParameters.externalKey;
		}

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
	}

	/**
	 * Retrieve a subscription by external key
	 */
	async getSubscriptionByKey(
		requestParameters: GetSubscriptionByKeyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Subscription> {
		const response = await this.getSubscriptionByKeyRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve subscription custom fields
	 */
	async getSubscriptionCustomFieldsRaw(
		requestParameters: GetSubscriptionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<CustomField>>> {
		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling getSubscriptionCustomFields.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}/customFields`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFieldFromJSON));
	}

	/**
	 * Retrieve subscription custom fields
	 */
	async getSubscriptionCustomFields(
		requestParameters: GetSubscriptionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<CustomField>> {
		const response = await this.getSubscriptionCustomFieldsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve subscription event audit logs with history by id
	 */
	async getSubscriptionEventAuditLogsWithHistoryRaw(
		requestParameters: GetSubscriptionEventAuditLogsWithHistoryRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<AuditLog>>> {
		if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
			throw new runtime.RequiredError(
				'eventId',
				'Required parameter requestParameters.eventId was null or undefined when calling getSubscriptionEventAuditLogsWithHistory.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/events/{eventId}/auditLogsWithHistory`.replace(
					`{${'eventId'}}`,
					encodeURIComponent(String(requestParameters.eventId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuditLogFromJSON));
	}

	/**
	 * Retrieve subscription event audit logs with history by id
	 */
	async getSubscriptionEventAuditLogsWithHistory(
		requestParameters: GetSubscriptionEventAuditLogsWithHistoryRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<AuditLog>> {
		const response = await this.getSubscriptionEventAuditLogsWithHistoryRaw(
			requestParameters,
			initOverrides
		);
		return await response.value();
	}

	/**
	 * Retrieve subscription tags
	 */
	async getSubscriptionTagsRaw(
		requestParameters: GetSubscriptionTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<Tag>>> {
		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling getSubscriptionTags.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.includedDeleted !== undefined) {
			queryParameters['includedDeleted'] = requestParameters.includedDeleted;
		}

		if (requestParameters.audit !== undefined) {
			queryParameters['audit'] = requestParameters.audit;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}/tags`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
	}

	/**
	 * Retrieve subscription tags
	 */
	async getSubscriptionTags(
		requestParameters: GetSubscriptionTagsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<Tag>> {
		const response = await this.getSubscriptionTagsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Modify custom fields to subscription
	 */
	async modifySubscriptionCustomFieldsRaw(
		requestParameters: ModifySubscriptionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling modifySubscriptionCustomFields.'
			);
		}

		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling modifySubscriptionCustomFields.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling modifySubscriptionCustomFields.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}/customFields`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body.map(CustomFieldToJSON)
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Modify custom fields to subscription
	 */
	async modifySubscriptionCustomFields(
		requestParameters: ModifySubscriptionCustomFieldsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.modifySubscriptionCustomFieldsRaw(requestParameters, initOverrides);
	}

	/**
	 * Un-cancel an entitlement
	 */
	async uncancelSubscriptionPlanRaw(
		requestParameters: UncancelSubscriptionPlanRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling uncancelSubscriptionPlan.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling uncancelSubscriptionPlan.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}/uncancel`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Un-cancel an entitlement
	 */
	async uncancelSubscriptionPlan(
		requestParameters: UncancelSubscriptionPlanRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.uncancelSubscriptionPlanRaw(requestParameters, initOverrides);
	}

	/**
	 * Undo a pending change plan on an entitlement
	 */
	async undoChangeSubscriptionPlanRaw(
		requestParameters: UndoChangeSubscriptionPlanRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling undoChangeSubscriptionPlan.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling undoChangeSubscriptionPlan.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}/undoChangePlan`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Undo a pending change plan on an entitlement
	 */
	async undoChangeSubscriptionPlan(
		requestParameters: UndoChangeSubscriptionPlanRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.undoChangeSubscriptionPlanRaw(requestParameters, initOverrides);
	}

	/**
	 * Update the BCD associated to a subscription
	 */
	async updateSubscriptionBCDRaw(
		requestParameters: UpdateSubscriptionBCDRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling updateSubscriptionBCD.'
			);
		}

		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling updateSubscriptionBCD.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling updateSubscriptionBCD.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.effectiveFromDate !== undefined) {
			queryParameters['effectiveFromDate'] = (requestParameters.effectiveFromDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.forceNewBcdWithPastEffectiveDate !== undefined) {
			queryParameters['forceNewBcdWithPastEffectiveDate'] =
				requestParameters.forceNewBcdWithPastEffectiveDate;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}/bcd`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters,
				body: SubscriptionToJSON(requestParameters.body)
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Update the BCD associated to a subscription
	 */
	async updateSubscriptionBCD(
		requestParameters: UpdateSubscriptionBCDRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.updateSubscriptionBCDRaw(requestParameters, initOverrides);
	}

	/**
	 * Update the quantity associated to a subscription
	 */
	async updateSubscriptionQuantityRaw(
		requestParameters: UpdateSubscriptionQuantityRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling updateSubscriptionQuantity.'
			);
		}

		if (
			requestParameters.subscriptionId === null ||
			requestParameters.subscriptionId === undefined
		) {
			throw new runtime.RequiredError(
				'subscriptionId',
				'Required parameter requestParameters.subscriptionId was null or undefined when calling updateSubscriptionQuantity.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling updateSubscriptionQuantity.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.effectiveFromDate !== undefined) {
			queryParameters['effectiveFromDate'] = (requestParameters.effectiveFromDate as any)
				.toISOString()
				.substr(0, 10);
		}

		if (requestParameters.forceNewQuantityWithPastEffectiveDate !== undefined) {
			queryParameters['forceNewQuantityWithPastEffectiveDate'] =
				requestParameters.forceNewQuantityWithPastEffectiveDate;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/subscriptions/{subscriptionId}/quantity`.replace(
					`{${'subscriptionId'}}`,
					encodeURIComponent(String(requestParameters.subscriptionId))
				),
				method: 'PUT',
				headers: headerParameters,
				query: queryParameters,
				body: SubscriptionToJSON(requestParameters.body)
			},
			initOverrides
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Update the quantity associated to a subscription
	 */
	async updateSubscriptionQuantity(
		requestParameters: UpdateSubscriptionQuantityRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<void> {
		await this.updateSubscriptionQuantityRaw(requestParameters, initOverrides);
	}
}

/**
 * @export
 */
export const CancelSubscriptionPlanEntitlementPolicyEnum = {
	Immediate: 'IMMEDIATE',
	EndOfTerm: 'END_OF_TERM'
} as const;
export type CancelSubscriptionPlanEntitlementPolicyEnum =
	(typeof CancelSubscriptionPlanEntitlementPolicyEnum)[keyof typeof CancelSubscriptionPlanEntitlementPolicyEnum];
/**
 * @export
 */
export const CancelSubscriptionPlanBillingPolicyEnum = {
	StartOfTerm: 'START_OF_TERM',
	EndOfTerm: 'END_OF_TERM',
	Immediate: 'IMMEDIATE',
	Illegal: 'ILLEGAL'
} as const;
export type CancelSubscriptionPlanBillingPolicyEnum =
	(typeof CancelSubscriptionPlanBillingPolicyEnum)[keyof typeof CancelSubscriptionPlanBillingPolicyEnum];
/**
 * @export
 */
export const ChangeSubscriptionPlanBillingPolicyEnum = {
	StartOfTerm: 'START_OF_TERM',
	EndOfTerm: 'END_OF_TERM',
	Immediate: 'IMMEDIATE',
	Illegal: 'ILLEGAL'
} as const;
export type ChangeSubscriptionPlanBillingPolicyEnum =
	(typeof ChangeSubscriptionPlanBillingPolicyEnum)[keyof typeof ChangeSubscriptionPlanBillingPolicyEnum];
/**
 * @export
 */
export const GetSubscriptionAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type GetSubscriptionAuditEnum =
	(typeof GetSubscriptionAuditEnum)[keyof typeof GetSubscriptionAuditEnum];
/**
 * @export
 */
export const GetSubscriptionByKeyAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type GetSubscriptionByKeyAuditEnum =
	(typeof GetSubscriptionByKeyAuditEnum)[keyof typeof GetSubscriptionByKeyAuditEnum];
/**
 * @export
 */
export const GetSubscriptionCustomFieldsAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type GetSubscriptionCustomFieldsAuditEnum =
	(typeof GetSubscriptionCustomFieldsAuditEnum)[keyof typeof GetSubscriptionCustomFieldsAuditEnum];
/**
 * @export
 */
export const GetSubscriptionTagsAuditEnum = {
	Full: 'FULL',
	Minimal: 'MINIMAL',
	None: 'NONE'
} as const;
export type GetSubscriptionTagsAuditEnum =
	(typeof GetSubscriptionTagsAuditEnum)[keyof typeof GetSubscriptionTagsAuditEnum];
