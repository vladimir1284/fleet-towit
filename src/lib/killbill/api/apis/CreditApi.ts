/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { InvoiceItem } from '../models';
import { InvoiceItemFromJSON, InvoiceItemToJSON } from '../models';

export interface CreateCreditsRequest {
	body: Array<InvoiceItem>;
	xKillbillCreatedBy: string;
	autoCommit?: boolean;
	pluginProperty?: Array<string>;
	xKillbillReason?: string;
	xKillbillComment?: string;
}

export interface GetCreditRequest {
	creditId: string;
}

/**
 *
 */
export class CreditApi extends runtime.BaseAPI {
	/**
	 * Create a credit
	 */
	async createCreditsRaw(
		requestParameters: CreateCreditsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<InvoiceItem>>> {
		if (requestParameters.body === null || requestParameters.body === undefined) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling createCredits.'
			);
		}

		if (
			requestParameters.xKillbillCreatedBy === null ||
			requestParameters.xKillbillCreatedBy === undefined
		) {
			throw new runtime.RequiredError(
				'xKillbillCreatedBy',
				'Required parameter requestParameters.xKillbillCreatedBy was null or undefined when calling createCredits.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.autoCommit !== undefined) {
			queryParameters['autoCommit'] = requestParameters.autoCommit;
		}

		if (requestParameters.pluginProperty) {
			queryParameters['pluginProperty'] = requestParameters.pluginProperty;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xKillbillCreatedBy !== undefined &&
			requestParameters.xKillbillCreatedBy !== null
		) {
			headerParameters['X-Killbill-CreatedBy'] = String(requestParameters.xKillbillCreatedBy);
		}

		if (
			requestParameters.xKillbillReason !== undefined &&
			requestParameters.xKillbillReason !== null
		) {
			headerParameters['X-Killbill-Reason'] = String(requestParameters.xKillbillReason);
		}

		if (
			requestParameters.xKillbillComment !== undefined &&
			requestParameters.xKillbillComment !== null
		) {
			headerParameters['X-Killbill-Comment'] = String(requestParameters.xKillbillComment);
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/credits`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body.map(InvoiceItemToJSON)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoiceItemFromJSON));
	}

	/**
	 * Create a credit
	 */
	async createCredits(
		requestParameters: CreateCreditsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<InvoiceItem>> {
		const response = await this.createCreditsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieve a credit by id
	 */
	async getCreditRaw(
		requestParameters: GetCreditRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<InvoiceItem>> {
		if (requestParameters.creditId === null || requestParameters.creditId === undefined) {
			throw new runtime.RequiredError(
				'creditId',
				'Required parameter requestParameters.creditId was null or undefined when calling getCredit.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiKey'] = this.configuration.apiKey('X-Killbill-ApiKey'); // Killbill Api Key authentication
		}

		if (this.configuration && this.configuration.apiKey) {
			headerParameters['X-Killbill-ApiSecret'] = this.configuration.apiKey('X-Killbill-ApiSecret'); // Killbill Api Secret authentication
		}

		if (
			this.configuration &&
			(this.configuration.username !== undefined || this.configuration.password !== undefined)
		) {
			headerParameters['Authorization'] =
				'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
		}
		const response = await this.request(
			{
				path: `/1.0/kb/credits/{creditId}`.replace(
					`{${'creditId'}}`,
					encodeURIComponent(String(requestParameters.creditId))
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceItemFromJSON(jsonValue));
	}

	/**
	 * Retrieve a credit by id
	 */
	async getCredit(
		requestParameters: GetCreditRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<InvoiceItem> {
		const response = await this.getCreditRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
