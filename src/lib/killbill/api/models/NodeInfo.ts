/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PluginInfo } from './PluginInfo';
import { PluginInfoFromJSON, PluginInfoFromJSONTyped, PluginInfoToJSON } from './PluginInfo';

/**
 *
 * @export
 * @interface NodeInfo
 */
export interface NodeInfo {
	/**
	 *
	 * @type {string}
	 * @memberof NodeInfo
	 */
	nodeName?: string;
	/**
	 *
	 * @type {Date}
	 * @memberof NodeInfo
	 */
	bootTime?: Date;
	/**
	 *
	 * @type {Date}
	 * @memberof NodeInfo
	 */
	lastUpdatedDate?: Date;
	/**
	 *
	 * @type {string}
	 * @memberof NodeInfo
	 */
	kbVersion?: string;
	/**
	 *
	 * @type {string}
	 * @memberof NodeInfo
	 */
	apiVersion?: string;
	/**
	 *
	 * @type {string}
	 * @memberof NodeInfo
	 */
	pluginApiVersion?: string;
	/**
	 *
	 * @type {string}
	 * @memberof NodeInfo
	 */
	commonVersion?: string;
	/**
	 *
	 * @type {string}
	 * @memberof NodeInfo
	 */
	platformVersion?: string;
	/**
	 *
	 * @type {Array<PluginInfo>}
	 * @memberof NodeInfo
	 */
	pluginsInfo?: Array<PluginInfo>;
}

/**
 * Check if a given object implements the NodeInfo interface.
 */
export function instanceOfNodeInfo(value: object): boolean {
	let isInstance = true;

	return isInstance;
}

export function NodeInfoFromJSON(json: any): NodeInfo {
	return NodeInfoFromJSONTyped(json, false);
}

export function NodeInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): NodeInfo {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		nodeName: !exists(json, 'nodeName') ? undefined : json['nodeName'],
		bootTime: !exists(json, 'bootTime') ? undefined : new Date(json['bootTime']),
		lastUpdatedDate: !exists(json, 'lastUpdatedDate')
			? undefined
			: new Date(json['lastUpdatedDate']),
		kbVersion: !exists(json, 'kbVersion') ? undefined : json['kbVersion'],
		apiVersion: !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
		pluginApiVersion: !exists(json, 'pluginApiVersion') ? undefined : json['pluginApiVersion'],
		commonVersion: !exists(json, 'commonVersion') ? undefined : json['commonVersion'],
		platformVersion: !exists(json, 'platformVersion') ? undefined : json['platformVersion'],
		pluginsInfo: !exists(json, 'pluginsInfo')
			? undefined
			: (json['pluginsInfo'] as Array<any>).map(PluginInfoFromJSON)
	};
}

export function NodeInfoToJSON(value?: NodeInfo | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		nodeName: value.nodeName,
		bootTime: value.bootTime === undefined ? undefined : value.bootTime.toISOString(),
		lastUpdatedDate:
			value.lastUpdatedDate === undefined ? undefined : value.lastUpdatedDate.toISOString(),
		kbVersion: value.kbVersion,
		apiVersion: value.apiVersion,
		pluginApiVersion: value.pluginApiVersion,
		commonVersion: value.commonVersion,
		platformVersion: value.platformVersion,
		pluginsInfo:
			value.pluginsInfo === undefined
				? undefined
				: (value.pluginsInfo as Array<any>).map(PluginInfoToJSON)
	};
}
