/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditLog } from './AuditLog';
import { AuditLogFromJSON, AuditLogFromJSONTyped, AuditLogToJSON } from './AuditLog';

/**
 *
 * @export
 * @interface EventSubscription
 */
export interface EventSubscription {
	/**
	 *
	 * @type {string}
	 * @memberof EventSubscription
	 */
	eventId?: string;
	/**
	 *
	 * @type {string}
	 * @memberof EventSubscription
	 */
	billingPeriod?: EventSubscriptionBillingPeriodEnum;
	/**
	 *
	 * @type {Date}
	 * @memberof EventSubscription
	 */
	effectiveDate?: Date;
	/**
	 *
	 * @type {Date}
	 * @memberof EventSubscription
	 */
	catalogEffectiveDate?: Date;
	/**
	 *
	 * @type {string}
	 * @memberof EventSubscription
	 */
	plan?: string;
	/**
	 *
	 * @type {string}
	 * @memberof EventSubscription
	 */
	product?: string;
	/**
	 *
	 * @type {string}
	 * @memberof EventSubscription
	 */
	priceList?: string;
	/**
	 *
	 * @type {string}
	 * @memberof EventSubscription
	 */
	eventType?: EventSubscriptionEventTypeEnum;
	/**
	 *
	 * @type {boolean}
	 * @memberof EventSubscription
	 */
	isBlockedBilling?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof EventSubscription
	 */
	isBlockedEntitlement?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof EventSubscription
	 */
	serviceName?: string;
	/**
	 *
	 * @type {string}
	 * @memberof EventSubscription
	 */
	serviceStateName?: string;
	/**
	 *
	 * @type {string}
	 * @memberof EventSubscription
	 */
	phase?: string;
	/**
	 *
	 * @type {Array<AuditLog>}
	 * @memberof EventSubscription
	 */
	auditLogs?: Array<AuditLog>;
}

/**
 * @export
 */
export const EventSubscriptionBillingPeriodEnum = {
	Daily: 'DAILY',
	Weekly: 'WEEKLY',
	Biweekly: 'BIWEEKLY',
	ThirtyDays: 'THIRTY_DAYS',
	ThirtyOneDays: 'THIRTY_ONE_DAYS',
	SixtyDays: 'SIXTY_DAYS',
	NinetyDays: 'NINETY_DAYS',
	Monthly: 'MONTHLY',
	Bimestrial: 'BIMESTRIAL',
	Quarterly: 'QUARTERLY',
	Triannual: 'TRIANNUAL',
	Biannual: 'BIANNUAL',
	Annual: 'ANNUAL',
	Sesquiennial: 'SESQUIENNIAL',
	Biennial: 'BIENNIAL',
	Triennial: 'TRIENNIAL',
	NoBillingPeriod: 'NO_BILLING_PERIOD'
} as const;
export type EventSubscriptionBillingPeriodEnum =
	(typeof EventSubscriptionBillingPeriodEnum)[keyof typeof EventSubscriptionBillingPeriodEnum];

/**
 * @export
 */
export const EventSubscriptionEventTypeEnum = {
	StartEntitlement: 'START_ENTITLEMENT',
	StartBilling: 'START_BILLING',
	PauseEntitlement: 'PAUSE_ENTITLEMENT',
	PauseBilling: 'PAUSE_BILLING',
	ResumeEntitlement: 'RESUME_ENTITLEMENT',
	ResumeBilling: 'RESUME_BILLING',
	Phase: 'PHASE',
	Change: 'CHANGE',
	StopEntitlement: 'STOP_ENTITLEMENT',
	StopBilling: 'STOP_BILLING',
	ServiceStateChange: 'SERVICE_STATE_CHANGE'
} as const;
export type EventSubscriptionEventTypeEnum =
	(typeof EventSubscriptionEventTypeEnum)[keyof typeof EventSubscriptionEventTypeEnum];

/**
 * Check if a given object implements the EventSubscription interface.
 */
export function instanceOfEventSubscription(value: object): boolean {
	let isInstance = true;

	return isInstance;
}

export function EventSubscriptionFromJSON(json: any): EventSubscription {
	return EventSubscriptionFromJSONTyped(json, false);
}

export function EventSubscriptionFromJSONTyped(
	json: any,
	ignoreDiscriminator: boolean
): EventSubscription {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		eventId: !exists(json, 'eventId') ? undefined : json['eventId'],
		billingPeriod: !exists(json, 'billingPeriod') ? undefined : json['billingPeriod'],
		effectiveDate: !exists(json, 'effectiveDate') ? undefined : new Date(json['effectiveDate']),
		catalogEffectiveDate: !exists(json, 'catalogEffectiveDate')
			? undefined
			: new Date(json['catalogEffectiveDate']),
		plan: !exists(json, 'plan') ? undefined : json['plan'],
		product: !exists(json, 'product') ? undefined : json['product'],
		priceList: !exists(json, 'priceList') ? undefined : json['priceList'],
		eventType: !exists(json, 'eventType') ? undefined : json['eventType'],
		isBlockedBilling: !exists(json, 'isBlockedBilling') ? undefined : json['isBlockedBilling'],
		isBlockedEntitlement: !exists(json, 'isBlockedEntitlement')
			? undefined
			: json['isBlockedEntitlement'],
		serviceName: !exists(json, 'serviceName') ? undefined : json['serviceName'],
		serviceStateName: !exists(json, 'serviceStateName') ? undefined : json['serviceStateName'],
		phase: !exists(json, 'phase') ? undefined : json['phase'],
		auditLogs: !exists(json, 'auditLogs')
			? undefined
			: (json['auditLogs'] as Array<any>).map(AuditLogFromJSON)
	};
}

export function EventSubscriptionToJSON(value?: EventSubscription | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		eventId: value.eventId,
		billingPeriod: value.billingPeriod,
		effectiveDate:
			value.effectiveDate === undefined ? undefined : value.effectiveDate.toISOString(),
		catalogEffectiveDate:
			value.catalogEffectiveDate === undefined
				? undefined
				: value.catalogEffectiveDate.toISOString(),
		plan: value.plan,
		product: value.product,
		priceList: value.priceList,
		eventType: value.eventType,
		isBlockedBilling: value.isBlockedBilling,
		isBlockedEntitlement: value.isBlockedEntitlement,
		serviceName: value.serviceName,
		serviceStateName: value.serviceStateName,
		phase: value.phase,
		auditLogs:
			value.auditLogs === undefined
				? undefined
				: (value.auditLogs as Array<any>).map(AuditLogToJSON)
	};
}
