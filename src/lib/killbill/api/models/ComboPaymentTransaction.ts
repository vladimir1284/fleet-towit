/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Account } from './Account';
import { AccountFromJSON, AccountFromJSONTyped, AccountToJSON } from './Account';
import type { AuditLog } from './AuditLog';
import { AuditLogFromJSON, AuditLogFromJSONTyped, AuditLogToJSON } from './AuditLog';
import type { PaymentMethod } from './PaymentMethod';
import {
	PaymentMethodFromJSON,
	PaymentMethodFromJSONTyped,
	PaymentMethodToJSON
} from './PaymentMethod';
import type { PaymentTransaction } from './PaymentTransaction';
import {
	PaymentTransactionFromJSON,
	PaymentTransactionFromJSONTyped,
	PaymentTransactionToJSON
} from './PaymentTransaction';
import type { PluginProperty } from './PluginProperty';
import {
	PluginPropertyFromJSON,
	PluginPropertyFromJSONTyped,
	PluginPropertyToJSON
} from './PluginProperty';

/**
 *
 * @export
 * @interface ComboPaymentTransaction
 */
export interface ComboPaymentTransaction {
	/**
	 *
	 * @type {Account}
	 * @memberof ComboPaymentTransaction
	 */
	account?: Account;
	/**
	 *
	 * @type {PaymentMethod}
	 * @memberof ComboPaymentTransaction
	 */
	paymentMethod?: PaymentMethod;
	/**
	 *
	 * @type {PaymentTransaction}
	 * @memberof ComboPaymentTransaction
	 */
	transaction?: PaymentTransaction;
	/**
	 *
	 * @type {Array<PluginProperty>}
	 * @memberof ComboPaymentTransaction
	 */
	paymentMethodPluginProperties?: Array<PluginProperty>;
	/**
	 *
	 * @type {Array<PluginProperty>}
	 * @memberof ComboPaymentTransaction
	 */
	transactionPluginProperties?: Array<PluginProperty>;
	/**
	 *
	 * @type {Array<AuditLog>}
	 * @memberof ComboPaymentTransaction
	 */
	auditLogs?: Array<AuditLog>;
}

/**
 * Check if a given object implements the ComboPaymentTransaction interface.
 */
export function instanceOfComboPaymentTransaction(value: object): boolean {
	let isInstance = true;

	return isInstance;
}

export function ComboPaymentTransactionFromJSON(json: any): ComboPaymentTransaction {
	return ComboPaymentTransactionFromJSONTyped(json, false);
}

export function ComboPaymentTransactionFromJSONTyped(
	json: any,
	ignoreDiscriminator: boolean
): ComboPaymentTransaction {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		account: !exists(json, 'account') ? undefined : AccountFromJSON(json['account']),
		paymentMethod: !exists(json, 'paymentMethod')
			? undefined
			: PaymentMethodFromJSON(json['paymentMethod']),
		transaction: !exists(json, 'transaction')
			? undefined
			: PaymentTransactionFromJSON(json['transaction']),
		paymentMethodPluginProperties: !exists(json, 'paymentMethodPluginProperties')
			? undefined
			: (json['paymentMethodPluginProperties'] as Array<any>).map(PluginPropertyFromJSON),
		transactionPluginProperties: !exists(json, 'transactionPluginProperties')
			? undefined
			: (json['transactionPluginProperties'] as Array<any>).map(PluginPropertyFromJSON),
		auditLogs: !exists(json, 'auditLogs')
			? undefined
			: (json['auditLogs'] as Array<any>).map(AuditLogFromJSON)
	};
}

export function ComboPaymentTransactionToJSON(value?: ComboPaymentTransaction | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		account: AccountToJSON(value.account),
		paymentMethod: PaymentMethodToJSON(value.paymentMethod),
		transaction: PaymentTransactionToJSON(value.transaction),
		paymentMethodPluginProperties:
			value.paymentMethodPluginProperties === undefined
				? undefined
				: (value.paymentMethodPluginProperties as Array<any>).map(PluginPropertyToJSON),
		transactionPluginProperties:
			value.transactionPluginProperties === undefined
				? undefined
				: (value.transactionPluginProperties as Array<any>).map(PluginPropertyToJSON),
		auditLogs:
			value.auditLogs === undefined
				? undefined
				: (value.auditLogs as Array<any>).map(AuditLogToJSON)
	};
}
