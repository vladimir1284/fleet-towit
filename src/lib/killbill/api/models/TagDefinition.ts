/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditLog } from './AuditLog';
import { AuditLogFromJSON, AuditLogFromJSONTyped, AuditLogToJSON } from './AuditLog';

/**
 *
 * @export
 * @interface TagDefinition
 */
export interface TagDefinition {
	/**
	 *
	 * @type {string}
	 * @memberof TagDefinition
	 */
	id?: string;
	/**
	 *
	 * @type {boolean}
	 * @memberof TagDefinition
	 */
	isControlTag?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof TagDefinition
	 */
	name: string;
	/**
	 *
	 * @type {string}
	 * @memberof TagDefinition
	 */
	description: string;
	/**
	 *
	 * @type {Set<string>}
	 * @memberof TagDefinition
	 */
	applicableObjectTypes?: Set<TagDefinitionApplicableObjectTypesEnum>;
	/**
	 *
	 * @type {Array<AuditLog>}
	 * @memberof TagDefinition
	 */
	auditLogs?: Array<AuditLog>;
}

/**
 * @export
 */
export const TagDefinitionApplicableObjectTypesEnum = {
	Account: 'ACCOUNT',
	AccountEmail: 'ACCOUNT_EMAIL',
	BlockingStates: 'BLOCKING_STATES',
	Bundle: 'BUNDLE',
	CustomField: 'CUSTOM_FIELD',
	Invoice: 'INVOICE',
	Payment: 'PAYMENT',
	Transaction: 'TRANSACTION',
	InvoiceItem: 'INVOICE_ITEM',
	InvoicePayment: 'INVOICE_PAYMENT',
	Subscription: 'SUBSCRIPTION',
	SubscriptionEvent: 'SUBSCRIPTION_EVENT',
	ServiceBroadcast: 'SERVICE_BROADCAST',
	PaymentAttempt: 'PAYMENT_ATTEMPT',
	PaymentMethod: 'PAYMENT_METHOD',
	Tag: 'TAG',
	TagDefinition: 'TAG_DEFINITION',
	Tenant: 'TENANT',
	TenantKvs: 'TENANT_KVS'
} as const;
export type TagDefinitionApplicableObjectTypesEnum =
	(typeof TagDefinitionApplicableObjectTypesEnum)[keyof typeof TagDefinitionApplicableObjectTypesEnum];

/**
 * Check if a given object implements the TagDefinition interface.
 */
export function instanceOfTagDefinition(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && 'name' in value;
	isInstance = isInstance && 'description' in value;

	return isInstance;
}

export function TagDefinitionFromJSON(json: any): TagDefinition {
	return TagDefinitionFromJSONTyped(json, false);
}

export function TagDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): TagDefinition {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		id: !exists(json, 'id') ? undefined : json['id'],
		isControlTag: !exists(json, 'isControlTag') ? undefined : json['isControlTag'],
		name: json['name'],
		description: json['description'],
		applicableObjectTypes: !exists(json, 'applicableObjectTypes')
			? undefined
			: json['applicableObjectTypes'],
		auditLogs: !exists(json, 'auditLogs')
			? undefined
			: (json['auditLogs'] as Array<any>).map(AuditLogFromJSON)
	};
}

export function TagDefinitionToJSON(value?: TagDefinition | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		id: value.id,
		isControlTag: value.isControlTag,
		name: value.name,
		description: value.description,
		applicableObjectTypes:
			value.applicableObjectTypes === undefined
				? undefined
				: Array.from(value.applicableObjectTypes as Set<any>),
		auditLogs:
			value.auditLogs === undefined
				? undefined
				: (value.auditLogs as Array<any>).map(AuditLogToJSON)
	};
}
