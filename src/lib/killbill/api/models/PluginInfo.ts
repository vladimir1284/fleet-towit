/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PluginServiceInfo } from './PluginServiceInfo';
import {
	PluginServiceInfoFromJSON,
	PluginServiceInfoFromJSONTyped,
	PluginServiceInfoToJSON
} from './PluginServiceInfo';

/**
 *
 * @export
 * @interface PluginInfo
 */
export interface PluginInfo {
	/**
	 *
	 * @type {string}
	 * @memberof PluginInfo
	 */
	bundleSymbolicName?: string;
	/**
	 *
	 * @type {string}
	 * @memberof PluginInfo
	 */
	pluginKey?: string;
	/**
	 *
	 * @type {string}
	 * @memberof PluginInfo
	 */
	pluginName?: string;
	/**
	 *
	 * @type {string}
	 * @memberof PluginInfo
	 */
	version?: string;
	/**
	 *
	 * @type {string}
	 * @memberof PluginInfo
	 */
	state?: string;
	/**
	 *
	 * @type {boolean}
	 * @memberof PluginInfo
	 */
	isSelectedForStart?: boolean;
	/**
	 *
	 * @type {Set<PluginServiceInfo>}
	 * @memberof PluginInfo
	 */
	services?: Set<PluginServiceInfo>;
}

/**
 * Check if a given object implements the PluginInfo interface.
 */
export function instanceOfPluginInfo(value: object): boolean {
	let isInstance = true;

	return isInstance;
}

export function PluginInfoFromJSON(json: any): PluginInfo {
	return PluginInfoFromJSONTyped(json, false);
}

export function PluginInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginInfo {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		bundleSymbolicName: !exists(json, 'bundleSymbolicName')
			? undefined
			: json['bundleSymbolicName'],
		pluginKey: !exists(json, 'pluginKey') ? undefined : json['pluginKey'],
		pluginName: !exists(json, 'pluginName') ? undefined : json['pluginName'],
		version: !exists(json, 'version') ? undefined : json['version'],
		state: !exists(json, 'state') ? undefined : json['state'],
		isSelectedForStart: !exists(json, 'isSelectedForStart')
			? undefined
			: json['isSelectedForStart'],
		services: !exists(json, 'services')
			? undefined
			: new Set((json['services'] as Array<any>).map(PluginServiceInfoFromJSON))
	};
}

export function PluginInfoToJSON(value?: PluginInfo | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		bundleSymbolicName: value.bundleSymbolicName,
		pluginKey: value.pluginKey,
		pluginName: value.pluginName,
		version: value.version,
		state: value.state,
		isSelectedForStart: value.isSelectedForStart,
		services:
			value.services === undefined
				? undefined
				: Array.from(value.services as Set<any>).map(PluginServiceInfoToJSON)
	};
}
