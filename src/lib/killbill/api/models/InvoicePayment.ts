/* tslint:disable */
/* eslint-disable */
/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditLog } from './AuditLog';
import { AuditLogFromJSON, AuditLogFromJSONTyped, AuditLogToJSON } from './AuditLog';
import type { PaymentAttempt } from './PaymentAttempt';
import {
	PaymentAttemptFromJSON,
	PaymentAttemptFromJSONTyped,
	PaymentAttemptToJSON
} from './PaymentAttempt';
import type { PaymentTransaction } from './PaymentTransaction';
import {
	PaymentTransactionFromJSON,
	PaymentTransactionFromJSONTyped,
	PaymentTransactionToJSON
} from './PaymentTransaction';

/**
 *
 * @export
 * @interface InvoicePayment
 */
export interface InvoicePayment {
	/**
	 *
	 * @type {string}
	 * @memberof InvoicePayment
	 */
	targetInvoiceId?: string;
	/**
	 *
	 * @type {string}
	 * @memberof InvoicePayment
	 */
	accountId?: string;
	/**
	 *
	 * @type {string}
	 * @memberof InvoicePayment
	 */
	paymentId?: string;
	/**
	 *
	 * @type {string}
	 * @memberof InvoicePayment
	 */
	paymentNumber?: string;
	/**
	 *
	 * @type {string}
	 * @memberof InvoicePayment
	 */
	paymentExternalKey?: string;
	/**
	 *
	 * @type {number}
	 * @memberof InvoicePayment
	 */
	authAmount?: number;
	/**
	 *
	 * @type {number}
	 * @memberof InvoicePayment
	 */
	capturedAmount?: number;
	/**
	 *
	 * @type {number}
	 * @memberof InvoicePayment
	 */
	purchasedAmount?: number;
	/**
	 *
	 * @type {number}
	 * @memberof InvoicePayment
	 */
	refundedAmount?: number;
	/**
	 *
	 * @type {number}
	 * @memberof InvoicePayment
	 */
	creditedAmount?: number;
	/**
	 *
	 * @type {string}
	 * @memberof InvoicePayment
	 */
	currency?: InvoicePaymentCurrencyEnum;
	/**
	 *
	 * @type {string}
	 * @memberof InvoicePayment
	 */
	paymentMethodId?: string;
	/**
	 *
	 * @type {Array<PaymentTransaction>}
	 * @memberof InvoicePayment
	 */
	transactions?: Array<PaymentTransaction>;
	/**
	 *
	 * @type {Array<PaymentAttempt>}
	 * @memberof InvoicePayment
	 */
	paymentAttempts?: Array<PaymentAttempt>;
	/**
	 *
	 * @type {Array<AuditLog>}
	 * @memberof InvoicePayment
	 */
	auditLogs?: Array<AuditLog>;
}

/**
 * @export
 */
export const InvoicePaymentCurrencyEnum = {
	Aed: 'AED',
	Afn: 'AFN',
	All: 'ALL',
	Amd: 'AMD',
	Ang: 'ANG',
	Aoa: 'AOA',
	Ars: 'ARS',
	Aud: 'AUD',
	Awg: 'AWG',
	Azn: 'AZN',
	Bam: 'BAM',
	Bbd: 'BBD',
	Bdt: 'BDT',
	Bgn: 'BGN',
	Bhd: 'BHD',
	Bif: 'BIF',
	Bmd: 'BMD',
	Bnd: 'BND',
	Bob: 'BOB',
	Brl: 'BRL',
	Bsd: 'BSD',
	Btn: 'BTN',
	Bwp: 'BWP',
	Byr: 'BYR',
	Bzd: 'BZD',
	Cad: 'CAD',
	Cdf: 'CDF',
	Chf: 'CHF',
	Clp: 'CLP',
	Cny: 'CNY',
	Cop: 'COP',
	Crc: 'CRC',
	Cuc: 'CUC',
	Cup: 'CUP',
	Cve: 'CVE',
	Czk: 'CZK',
	Djf: 'DJF',
	Dkk: 'DKK',
	Dop: 'DOP',
	Dzd: 'DZD',
	Egp: 'EGP',
	Ern: 'ERN',
	Etb: 'ETB',
	Eur: 'EUR',
	Fjd: 'FJD',
	Fkp: 'FKP',
	Gbp: 'GBP',
	Gel: 'GEL',
	Ggp: 'GGP',
	Ghs: 'GHS',
	Gip: 'GIP',
	Gmd: 'GMD',
	Gnf: 'GNF',
	Gtq: 'GTQ',
	Gyd: 'GYD',
	Hkd: 'HKD',
	Hnl: 'HNL',
	Hrk: 'HRK',
	Htg: 'HTG',
	Huf: 'HUF',
	Idr: 'IDR',
	Ils: 'ILS',
	Imp: 'IMP',
	Inr: 'INR',
	Iqd: 'IQD',
	Irr: 'IRR',
	Isk: 'ISK',
	Jep: 'JEP',
	Jmd: 'JMD',
	Jod: 'JOD',
	Jpy: 'JPY',
	Kes: 'KES',
	Kgs: 'KGS',
	Khr: 'KHR',
	Kmf: 'KMF',
	Kpw: 'KPW',
	Krw: 'KRW',
	Kwd: 'KWD',
	Kyd: 'KYD',
	Kzt: 'KZT',
	Lak: 'LAK',
	Lbp: 'LBP',
	Lkr: 'LKR',
	Lrd: 'LRD',
	Lsl: 'LSL',
	Ltl: 'LTL',
	Lvl: 'LVL',
	Lyd: 'LYD',
	Mad: 'MAD',
	Mdl: 'MDL',
	Mga: 'MGA',
	Mkd: 'MKD',
	Mmk: 'MMK',
	Mnt: 'MNT',
	Mop: 'MOP',
	Mro: 'MRO',
	Mur: 'MUR',
	Mvr: 'MVR',
	Mwk: 'MWK',
	Mxn: 'MXN',
	Myr: 'MYR',
	Mzn: 'MZN',
	Nad: 'NAD',
	Ngn: 'NGN',
	Nio: 'NIO',
	Nok: 'NOK',
	Npr: 'NPR',
	Nzd: 'NZD',
	Omr: 'OMR',
	Pab: 'PAB',
	Pen: 'PEN',
	Pgk: 'PGK',
	Php: 'PHP',
	Pkr: 'PKR',
	Pln: 'PLN',
	Pyg: 'PYG',
	Qar: 'QAR',
	Ron: 'RON',
	Rsd: 'RSD',
	Rub: 'RUB',
	Rwf: 'RWF',
	Sar: 'SAR',
	Sbd: 'SBD',
	Scr: 'SCR',
	Sdg: 'SDG',
	Sek: 'SEK',
	Sgd: 'SGD',
	Shp: 'SHP',
	Sll: 'SLL',
	Sos: 'SOS',
	Spl: 'SPL',
	Srd: 'SRD',
	Std: 'STD',
	Svc: 'SVC',
	Syp: 'SYP',
	Szl: 'SZL',
	Thb: 'THB',
	Tjs: 'TJS',
	Tmt: 'TMT',
	Tnd: 'TND',
	Top: 'TOP',
	Try: 'TRY',
	Ttd: 'TTD',
	Tvd: 'TVD',
	Twd: 'TWD',
	Tzs: 'TZS',
	Uah: 'UAH',
	Ugx: 'UGX',
	Usd: 'USD',
	Uyu: 'UYU',
	Uzs: 'UZS',
	Vef: 'VEF',
	Vnd: 'VND',
	Vuv: 'VUV',
	Wst: 'WST',
	Xaf: 'XAF',
	Xcd: 'XCD',
	Xdr: 'XDR',
	Xof: 'XOF',
	Xpf: 'XPF',
	Yer: 'YER',
	Zar: 'ZAR',
	Zmw: 'ZMW',
	Zwd: 'ZWD',
	Btc: 'BTC'
} as const;
export type InvoicePaymentCurrencyEnum =
	(typeof InvoicePaymentCurrencyEnum)[keyof typeof InvoicePaymentCurrencyEnum];

/**
 * Check if a given object implements the InvoicePayment interface.
 */
export function instanceOfInvoicePayment(value: object): boolean {
	let isInstance = true;

	return isInstance;
}

export function InvoicePaymentFromJSON(json: any): InvoicePayment {
	return InvoicePaymentFromJSONTyped(json, false);
}

export function InvoicePaymentFromJSONTyped(
	json: any,
	ignoreDiscriminator: boolean
): InvoicePayment {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		targetInvoiceId: !exists(json, 'targetInvoiceId') ? undefined : json['targetInvoiceId'],
		accountId: !exists(json, 'accountId') ? undefined : json['accountId'],
		paymentId: !exists(json, 'paymentId') ? undefined : json['paymentId'],
		paymentNumber: !exists(json, 'paymentNumber') ? undefined : json['paymentNumber'],
		paymentExternalKey: !exists(json, 'paymentExternalKey')
			? undefined
			: json['paymentExternalKey'],
		authAmount: !exists(json, 'authAmount') ? undefined : json['authAmount'],
		capturedAmount: !exists(json, 'capturedAmount') ? undefined : json['capturedAmount'],
		purchasedAmount: !exists(json, 'purchasedAmount') ? undefined : json['purchasedAmount'],
		refundedAmount: !exists(json, 'refundedAmount') ? undefined : json['refundedAmount'],
		creditedAmount: !exists(json, 'creditedAmount') ? undefined : json['creditedAmount'],
		currency: !exists(json, 'currency') ? undefined : json['currency'],
		paymentMethodId: !exists(json, 'paymentMethodId') ? undefined : json['paymentMethodId'],
		transactions: !exists(json, 'transactions')
			? undefined
			: (json['transactions'] as Array<any>).map(PaymentTransactionFromJSON),
		paymentAttempts: !exists(json, 'paymentAttempts')
			? undefined
			: (json['paymentAttempts'] as Array<any>).map(PaymentAttemptFromJSON),
		auditLogs: !exists(json, 'auditLogs')
			? undefined
			: (json['auditLogs'] as Array<any>).map(AuditLogFromJSON)
	};
}

export function InvoicePaymentToJSON(value?: InvoicePayment | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		targetInvoiceId: value.targetInvoiceId,
		accountId: value.accountId,
		paymentId: value.paymentId,
		paymentNumber: value.paymentNumber,
		paymentExternalKey: value.paymentExternalKey,
		authAmount: value.authAmount,
		capturedAmount: value.capturedAmount,
		purchasedAmount: value.purchasedAmount,
		refundedAmount: value.refundedAmount,
		creditedAmount: value.creditedAmount,
		currency: value.currency,
		paymentMethodId: value.paymentMethodId,
		transactions:
			value.transactions === undefined
				? undefined
				: (value.transactions as Array<any>).map(PaymentTransactionToJSON),
		paymentAttempts:
			value.paymentAttempts === undefined
				? undefined
				: (value.paymentAttempts as Array<any>).map(PaymentAttemptToJSON),
		auditLogs:
			value.auditLogs === undefined
				? undefined
				: (value.auditLogs as Array<any>).map(AuditLogToJSON)
	};
}
