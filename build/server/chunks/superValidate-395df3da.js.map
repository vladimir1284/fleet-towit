{"version":3,"file":"superValidate-395df3da.js","sources":["../../../../node_modules/.pnpm/sveltekit-superforms@1.13.2_@sveltejs+kit@2.0.6_svelte@4.2.8_zod@3.22.4/node_modules/sveltekit-superforms/dist/superValidate.js","../../../../node_modules/.pnpm/sveltekit-superforms@1.13.2_@sveltejs+kit@2.0.6_svelte@4.2.8_zod@3.22.4/node_modules/sveltekit-superforms/dist/errors.js","../../../../node_modules/.pnpm/sveltekit-superforms@1.13.2_@sveltejs+kit@2.0.6_svelte@4.2.8_zod@3.22.4/node_modules/sveltekit-superforms/dist/schemaEntity.js","../../../../node_modules/.pnpm/sveltekit-superforms@1.13.2_@sveltejs+kit@2.0.6_svelte@4.2.8_zod@3.22.4/node_modules/sveltekit-superforms/dist/utils.js","../../../../node_modules/.pnpm/sveltekit-superforms@1.13.2_@sveltejs+kit@2.0.6_svelte@4.2.8_zod@3.22.4/node_modules/sveltekit-superforms/dist/klona.js","../../../../node_modules/.pnpm/sveltekit-superforms@1.13.2_@sveltejs+kit@2.0.6_svelte@4.2.8_zod@3.22.4/node_modules/sveltekit-superforms/dist/traversal.js","../../../../node_modules/.pnpm/sveltekit-superforms@1.13.2_@sveltejs+kit@2.0.6_svelte@4.2.8_zod@3.22.4/node_modules/sveltekit-superforms/dist/index.js","../../../../node_modules/.pnpm/sveltekit-superforms@1.13.2_@sveltejs+kit@2.0.6_svelte@4.2.8_zod@3.22.4/node_modules/sveltekit-superforms/dist/stringPath.js","../../../../node_modules/.pnpm/devalue@4.3.2/node_modules/devalue/src/parse.js"],"sourcesContent":["import { fail, json } from '@sveltejs/kit';\nimport { parse, stringify } from 'devalue';\nimport { SuperFormError } from './index.js';\nimport { entityData, unwrapZodType, valueOrDefault } from './schemaEntity.js';\nimport { traversePath } from './traversal.js';\nimport { splitPath } from './stringPath.js';\nimport { clone } from './utils.js';\nimport { mapErrors } from './errors.js';\nexport { defaultValues } from './schemaEntity.js';\n/**\n * Sends a message with a form, with an optional HTTP status code that will set\n * form.valid to false if status >= 400. A status lower than 400 cannot be sent.\n */\nexport function message(form, message, options) {\n    if (options?.status && options.status >= 400) {\n        form.valid = false;\n    }\n    form.message = message;\n    return !form.valid ? fail(options?.status ?? 400, { form }) : { form };\n}\nexport const setMessage = message;\nexport function setError(form, path, error, options) {\n    // Unify signatures\n    if (error == undefined ||\n        (typeof error !== 'string' && !Array.isArray(error))) {\n        options = error;\n        error = path;\n        path = '';\n    }\n    if (options === undefined)\n        options = {};\n    const errArr = Array.isArray(error) ? error : [error];\n    if (!form.errors)\n        form.errors = {};\n    if (path === null || path === '') {\n        if (!form.errors._errors)\n            form.errors._errors = [];\n        form.errors._errors = options.overwrite\n            ? errArr\n            : form.errors._errors.concat(errArr);\n    }\n    else {\n        const realPath = splitPath(path);\n        const leaf = traversePath(form.errors, realPath, ({ parent, key, value }) => {\n            if (value === undefined)\n                parent[key] = {};\n            return parent[key];\n        });\n        if (leaf) {\n            leaf.parent[leaf.key] =\n                Array.isArray(leaf.value) && !options.overwrite\n                    ? leaf.value.concat(errArr)\n                    : errArr;\n        }\n    }\n    form.valid = false;\n    return fail(options.status ?? 400, { form });\n}\nfunction formDataToValidation(data, schemaData, preprocessed) {\n    const strictData = {};\n    const parsedData = {};\n    const { schemaKeys, entityInfo } = schemaData;\n    for (const key of schemaKeys) {\n        const typeInfo = entityInfo.typeInfo[key];\n        const entries = data.getAll(key);\n        if (!(typeInfo.zodType._def.typeName == 'ZodArray')) {\n            parsedData[key] = parseSingleEntry(key, entries[0], typeInfo);\n        }\n        else {\n            const arrayType = unwrapZodType(typeInfo.zodType._def.type);\n            parsedData[key] = entries.map((e) => parseSingleEntry(key, e, arrayType));\n        }\n        if (!entries.length && !typeInfo.isOptional) {\n            strictData[key] = undefined;\n        }\n        else {\n            strictData[key] = parsedData[key];\n        }\n    }\n    for (const key of Object.keys(strictData)) {\n        if (strictData[key] === undefined)\n            delete strictData[key];\n    }\n    return { parsed: parsedData, partial: strictData };\n    function parseSingleEntry(key, entry, typeInfo) {\n        if (preprocessed && preprocessed.includes(key)) {\n            return entry;\n        }\n        if (entry && typeof entry !== 'string') {\n            // File object, not supported\n            return undefined;\n        }\n        return parseFormDataEntry(key, entry, typeInfo);\n    }\n    function parseFormDataEntry(field, value, typeInfo) {\n        const newValue = valueOrDefault(value, typeInfo);\n        const zodType = typeInfo.zodType;\n        const typeName = zodType._def.typeName;\n        // If the value was empty, it now contains the default value,\n        // so it can be returned immediately, unless it's boolean, which\n        // means it could have been posted as a checkbox.\n        if (!value && typeName != 'ZodBoolean') {\n            return newValue;\n        }\n        //console.log(`FormData field \"${field}\" (${typeName}): ${value}`\n        if (typeName == 'ZodString') {\n            return value;\n        }\n        else if (typeName == 'ZodNumber') {\n            return zodType.isInt\n                ? parseInt(value ?? '', 10)\n                : parseFloat(value ?? '');\n        }\n        else if (typeName == 'ZodBoolean') {\n            return Boolean(value == 'false' ? '' : value).valueOf();\n        }\n        else if (typeName == 'ZodDate') {\n            return new Date(value ?? '');\n        }\n        else if (typeName == 'ZodArray') {\n            const arrayType = unwrapZodType(zodType._def.type);\n            return parseFormDataEntry(field, value, arrayType);\n        }\n        else if (typeName == 'ZodBigInt') {\n            try {\n                return BigInt(value ?? '.');\n            }\n            catch {\n                return NaN;\n            }\n        }\n        else if (typeName == 'ZodLiteral') {\n            const literalType = typeof zodType.value;\n            if (literalType === 'string')\n                return value;\n            else if (literalType === 'number')\n                return parseFloat(value ?? '');\n            else if (literalType === 'boolean')\n                return Boolean(value).valueOf();\n            else {\n                throw new SuperFormError('Unsupported ZodLiteral type: ' + literalType);\n            }\n        }\n        else if (typeName == 'ZodUnion' ||\n            typeName == 'ZodEnum' ||\n            typeName == 'ZodAny') {\n            return value;\n        }\n        else if (typeName == 'ZodNativeEnum') {\n            const zodEnum = zodType;\n            if (value !== null && value in zodEnum.enum) {\n                const enumValue = zodEnum.enum[value];\n                if (typeof enumValue === 'number')\n                    return enumValue;\n                else if (enumValue in zodEnum.enum)\n                    return zodEnum.enum[enumValue];\n            }\n            else if (value !== null &&\n                Object.values(zodEnum.enum).includes(value)) {\n                return value;\n            }\n            return undefined;\n        }\n        else if (typeName == 'ZodSymbol') {\n            return Symbol(String(value));\n        }\n        if (typeName == 'ZodObject') {\n            throw new SuperFormError(`Object found in form field \"${field}\". ` +\n                `Set the dataType option to \"json\" and add use:enhance on the client to use nested data structures. ` +\n                `More information: https://superforms.rocks/concepts/nested-data`);\n        }\n        throw new SuperFormError('Unsupported Zod default type: ' + zodType.constructor.name);\n    }\n}\n/**\n * Check what data to validate. If no parsed data, the default entity\n * may still have to be validated if there are side-effects or errors\n * should be displayed.\n */\nfunction dataToValidate(parsed, schemaData) {\n    const strict = schemaData.opts?.strict ?? false;\n    if (!parsed.data) {\n        return schemaData.hasEffects || schemaData.opts.errors === true\n            ? schemaData.entityInfo.defaultEntity\n            : undefined;\n    }\n    else if (strict && parsed.partialData) {\n        return parsed.partialData;\n    }\n    else\n        return parsed.data;\n}\nfunction parseFormData(formData, schemaData, preprocessed) {\n    function tryParseSuperJson() {\n        if (formData.has('__superform_json')) {\n            try {\n                const output = parse(formData.getAll('__superform_json').join('') ?? '');\n                if (typeof output === 'object') {\n                    return output;\n                }\n            }\n            catch {\n                //\n            }\n        }\n        return null;\n    }\n    const data = tryParseSuperJson();\n    const id = formData.get('__superform_id')?.toString() ?? undefined;\n    if (data) {\n        return { id, data, posted: true, partialData: null };\n    }\n    const parsed = formDataToValidation(formData, schemaData, preprocessed);\n    return {\n        id,\n        data: parsed.parsed,\n        partialData: parsed.partial,\n        posted: true\n    };\n}\nfunction parseSearchParams(data, schemaData, preprocessed) {\n    if (data instanceof URL)\n        data = data.searchParams;\n    const convert = new FormData();\n    for (const [key, value] of data.entries()) {\n        convert.append(key, value);\n    }\n    // Only FormData can be posted.\n    const output = parseFormData(convert, schemaData, preprocessed);\n    output.posted = false;\n    return output;\n}\nfunction validateResult(parsed, schemaData, result) {\n    const { opts: options, entityInfo } = schemaData;\n    const posted = parsed.posted;\n    // Determine id for form\n    // 1. options.id\n    // 2. formData.__superform_id\n    // 3. schema hash\n    const id = parsed.data\n        ? options.id ?? parsed.id ?? entityInfo.hash\n        : options.id ?? entityInfo.hash;\n    if (!parsed.data) {\n        let data = undefined;\n        let errors = {};\n        const valid = result?.success ?? false;\n        const addErrors = options.errors ?? options.strict;\n        if (result) {\n            if (result.success) {\n                data = result.data;\n            }\n            else if (addErrors) {\n                errors = mapErrors(result.error.format(), entityInfo.errorShape);\n            }\n        }\n        return {\n            id,\n            valid,\n            posted,\n            errors,\n            // Copy the default entity so it's not modified\n            data: data ?? clone(entityInfo.defaultEntity),\n            constraints: entityInfo.constraints\n        };\n    }\n    else {\n        const { opts: options, schemaKeys, entityInfo, unwrappedSchema } = schemaData;\n        if (!result) {\n            throw new SuperFormError('Validation data exists without validation result.');\n        }\n        if (!result.success) {\n            const partialData = parsed.data;\n            const errors = options.errors !== false\n                ? mapErrors(result.error.format(), entityInfo.errorShape)\n                : {};\n            // passthrough, strip, strict\n            const zodKeyStatus = unwrappedSchema._def.unknownKeys;\n            let data;\n            if (options.strict) {\n                data = parsed.data;\n            }\n            else if (zodKeyStatus == 'passthrough') {\n                data = { ...clone(entityInfo.defaultEntity), ...partialData };\n            }\n            else {\n                data = Object.fromEntries(schemaKeys.map((key) => [\n                    key,\n                    key in partialData\n                        ? partialData[key]\n                        : clone(entityInfo.defaultEntity[key])\n                ]));\n            }\n            return {\n                id,\n                valid: false,\n                posted,\n                errors,\n                data,\n                constraints: entityInfo.constraints\n            };\n        }\n        else {\n            return {\n                id,\n                valid: true,\n                posted,\n                errors: {},\n                data: result.data,\n                constraints: entityInfo.constraints\n            };\n        }\n    }\n}\nfunction getSchemaData(schema, options) {\n    const originalSchema = schema;\n    let unwrappedSchema = schema;\n    let hasEffects = false;\n    while (unwrappedSchema._def.typeName == 'ZodEffects') {\n        hasEffects = true;\n        unwrappedSchema = unwrappedSchema._def.schema;\n    }\n    if (!(unwrappedSchema._def.typeName == 'ZodObject')) {\n        throw new SuperFormError('Only Zod schema objects can be used with superValidate. ' +\n            'Define the schema with z.object({ ... }) and optionally refine/superRefine/transform at the end.');\n    }\n    const entityInfo = entityData(unwrappedSchema, options?.warnings);\n    return {\n        originalSchema,\n        unwrappedSchema: unwrappedSchema,\n        hasEffects,\n        entityInfo,\n        schemaKeys: entityInfo.keys,\n        opts: options ?? {}\n    };\n}\n/**\n * Validates a Zod schema for usage in a SvelteKit form.\n * @param data Data structure for a Zod schema, or RequestEvent/FormData/URL. If falsy, the schema's defaultEntity will be used.\n * @param schema The Zod schema to validate against.\n */\nexport async function superValidate(data, schema, options) {\n    if (data && typeof data === 'object' && 'safeParseAsync' in data) {\n        options = schema;\n        schema = data;\n        data = null;\n    }\n    const schemaData = getSchemaData(schema, options);\n    async function tryParseFormData(request) {\n        let formData = undefined;\n        try {\n            formData = await request.formData();\n        }\n        catch (e) {\n            if (e instanceof TypeError &&\n                e.message.includes('already been consumed')) {\n                // Pass through the \"body already consumed\" error, which applies to\n                // POST requests when event/request is used after formData has been fetched.\n                throw e;\n            }\n            // No data found, return an empty form\n            return {\n                id: undefined,\n                data: undefined,\n                posted: false,\n                partialData: undefined\n            };\n        }\n        return parseFormData(formData, schemaData, options?.preprocessed);\n    }\n    async function parseRequest() {\n        let parsed;\n        if (data instanceof FormData) {\n            parsed = parseFormData(data, schemaData, options?.preprocessed);\n        }\n        else if (data instanceof URL || data instanceof URLSearchParams) {\n            parsed = parseSearchParams(data, schemaData, options?.preprocessed);\n        }\n        else if (data instanceof Request) {\n            parsed = await tryParseFormData(data);\n        }\n        else if (data &&\n            typeof data === 'object' &&\n            'request' in data &&\n            data.request instanceof Request) {\n            parsed = await tryParseFormData(data.request);\n        }\n        else if (options?.strict) {\n            // Ensure that defaults are set on data if strict mode is enabled (Should this maybe always happen?)\n            const params = new URLSearchParams(data);\n            parsed = parseSearchParams(params, schemaData, options?.preprocessed);\n        }\n        else {\n            parsed = {\n                id: undefined,\n                posted: false,\n                data: data,\n                partialData: data\n            };\n        }\n        //////////////////////////////////////////////////////////////////////\n        // This logic is shared between superValidate and superValidateSync //\n        const toValidate = dataToValidate(parsed, schemaData);\n        const result = toValidate\n            ? await schemaData.originalSchema.safeParseAsync(toValidate)\n            : undefined;\n        //////////////////////////////////////////////////////////////////////\n        return { parsed, result };\n    }\n    const { parsed, result } = await parseRequest();\n    const superValidated = validateResult(parsed, schemaData, result);\n    return superValidated;\n}\n/**\n * Validates a Zod schema for usage in a SvelteKit form.\n * @param data Data structure for a Zod schema, or RequestEvent/FormData/URL. If falsy, the schema's defaultEntity will be used.\n * @param schema The Zod schema to validate against.\n */\nexport function superValidateSync(data, schema, options) {\n    if (data && typeof data === 'object' && 'safeParse' in data) {\n        options = schema;\n        schema = data;\n        data = null;\n    }\n    const schemaData = getSchemaData(schema, options);\n    const parsed = data instanceof FormData\n        ? parseFormData(data, schemaData, options?.preprocessed)\n        : data instanceof URL || data instanceof URLSearchParams\n            ? parseSearchParams(data, schemaData)\n            : {\n                id: undefined,\n                data: data,\n                partialData: data,\n                posted: false\n            }; // Only schema, null or undefined left\n    //////////////////////////////////////////////////////////////////////\n    // This logic is shared between superValidate and superValidateSync //\n    const toValidate = dataToValidate(parsed, schemaData);\n    const result = toValidate\n        ? schemaData.originalSchema.safeParse(toValidate)\n        : undefined;\n    //////////////////////////////////////////////////////////////////////\n    return validateResult(parsed, schemaData, result);\n}\nexport function actionResult(type, data, options) {\n    function cookieData() {\n        if (typeof options === 'number' || !options?.message)\n            return '';\n        const extra = [\n            `Path=${options?.cookieOptions?.path || '/'}`,\n            `Max-Age=${options?.cookieOptions?.maxAge || 120}`,\n            `SameSite=${options?.cookieOptions?.sameSite ?? 'Strict'}`\n        ];\n        if (options?.cookieOptions?.secure) {\n            extra.push(`Secure`);\n        }\n        return (`flash=${encodeURIComponent(JSON.stringify(options.message))}; ` +\n            extra.join('; '));\n    }\n    const status = options && typeof options !== 'number' ? options.status : options;\n    const result = (struct) => {\n        return json({ type, ...struct }, {\n            status: struct.status,\n            headers: typeof options === 'object' && options.message\n                ? {\n                    'Set-Cookie': cookieData()\n                }\n                : undefined\n        });\n    };\n    if (type == 'error') {\n        return result({\n            status: status || 500,\n            error: typeof data === 'string' ? { message: data } : data\n        });\n    }\n    else if (type == 'redirect') {\n        return result({\n            status: status || 303,\n            location: data\n        });\n    }\n    else if (type == 'failure') {\n        return result({\n            status: status || 400,\n            data: stringify(data)\n        });\n    }\n    else {\n        return result({ status: status || 200, data: stringify(data) });\n    }\n}\n","import { mergePath } from './stringPath.js';\nimport { unwrapZodType } from './schemaEntity.js';\nimport { setPaths, traversePaths } from './traversal.js';\nconst _cachedErrorShapes = new WeakMap();\nexport function errorShape(schema) {\n    if (!_cachedErrorShapes.has(schema)) {\n        _cachedErrorShapes.set(schema, _errorShape(schema));\n    }\n    // Can be casted since it guaranteed to be an object\n    return _cachedErrorShapes.get(schema);\n}\nfunction _errorShape(type) {\n    const unwrapped = unwrapZodType(type).zodType;\n    if (unwrapped._def.typeName == 'ZodObject') {\n        return Object.fromEntries(Object.entries(unwrapped.shape)\n            .map(([key, value]) => {\n            return [key, _errorShape(value)];\n        })\n            .filter((entry) => entry[1] !== undefined));\n    }\n    else if (unwrapped._def.typeName == 'ZodArray') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return _errorShape(unwrapped._def.type) ?? {};\n    }\n    else if (unwrapped._def.typeName == 'ZodRecord') {\n        return _errorShape(unwrapped._def.valueType) ?? {};\n    }\n    else if (unwrapped._def.typeName == 'ZodUnion') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const options = unwrapped._def\n            .options;\n        return options.reduce((shape, next) => {\n            const nextShape = _errorShape(next);\n            if (nextShape)\n                shape = { ...(shape ?? {}), ...nextShape };\n            return shape;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, undefined);\n    }\n    return undefined;\n}\nexport function mapErrors(obj, errorShape, inObject = true) {\n    /*\n    console.log('====================================================');\n    console.dir(obj, { depth: 7 });\n    console.log('----------------------------------------------------');\n    console.dir(errorShape, { depth: 7 });\n    */\n    const output = {};\n    const entries = Object.entries(obj);\n    if ('_errors' in obj && obj._errors.length) {\n        // Check if we are at the end of a node\n        if (!errorShape || !inObject) {\n            return obj._errors;\n        }\n        else {\n            output._errors = obj._errors;\n        }\n    }\n    for (const [key, value] of entries.filter(([key]) => key !== '_errors')) {\n        // Keep current errorShape if the object key is numeric\n        // which means we are in an array.\n        const numericKey = /^\\d+$/.test(key);\n        // _errors are filtered out, so casting is fine\n        output[key] = mapErrors(value, errorShape ? (numericKey ? errorShape : errorShape[key]) : undefined, !!errorShape?.[key] // We're not in an object if there is no key in the ErrorShape\n        );\n    }\n    return output;\n}\nexport function flattenErrors(errors) {\n    return _flattenErrors(errors, []);\n}\nfunction _flattenErrors(errors, path) {\n    const entries = Object.entries(errors);\n    return entries\n        .filter(([, value]) => value !== undefined)\n        .flatMap(([key, messages]) => {\n        if (Array.isArray(messages) && messages.length > 0) {\n            const currPath = path.concat([key]);\n            return { path: mergePath(currPath), messages };\n        }\n        else {\n            return _flattenErrors(errors[key], path.concat([key]));\n        }\n    });\n}\nexport function clearErrors(Errors, options) {\n    Errors.update(($errors) => {\n        traversePaths($errors, (pathData) => {\n            if (pathData.path.length == 1 &&\n                pathData.path[0] == '_errors' &&\n                !options.clearFormLevelErrors) {\n                return;\n            }\n            if (Array.isArray(pathData.value)) {\n                return pathData.set(undefined);\n            }\n        });\n        if (options.undefinePath)\n            setPaths($errors, [options.undefinePath], undefined);\n        return $errors;\n    });\n}\n","import { SuperFormError } from './index.js';\nimport { errorShape } from './errors.js';\nexport function hasEffects(zodType) {\n    const type = unwrapZodType(zodType);\n    if (type.effects)\n        return true;\n    const name = type.zodType._def.typeName;\n    if (name == 'ZodObject') {\n        const obj = type.zodType;\n        for (const field of Object.values(obj._def.shape())) {\n            if (hasEffects(field))\n                return true;\n        }\n    }\n    else if (name == 'ZodArray') {\n        const array = type.zodType;\n        return hasEffects(array.element);\n    }\n    return false;\n}\nexport function unwrapZodType(zodType) {\n    const originalType = zodType;\n    let _wrapped = true;\n    let isNullable = false;\n    let isOptional = false;\n    let hasDefault = false;\n    let effects = undefined;\n    let defaultValue = undefined;\n    //let i = 0;\n    while (_wrapped) {\n        //console.log(' '.repeat(++i * 2) + zodType.constructor.name);\n        switch (zodType._def.typeName) {\n            case 'ZodNullable':\n                isNullable = true;\n                zodType = zodType.unwrap();\n                break;\n            case 'ZodDefault':\n                hasDefault = true;\n                defaultValue = zodType._def.defaultValue();\n                zodType = zodType._def.innerType;\n                break;\n            case 'ZodOptional':\n                isOptional = true;\n                zodType = zodType.unwrap();\n                break;\n            case 'ZodEffects':\n                if (!effects)\n                    effects = zodType;\n                zodType = zodType._def.schema;\n                break;\n            case 'ZodPipeline':\n                zodType = zodType._def.out;\n                break;\n            case 'ZodBranded':\n                zodType = zodType.unwrap();\n                break;\n            default:\n                _wrapped = false;\n        }\n    }\n    return {\n        zodType,\n        originalType,\n        isNullable,\n        isOptional,\n        hasDefault,\n        defaultValue,\n        effects\n    };\n}\n// https://stackoverflow.com/a/8831937/70894\nfunction hashCode(str) {\n    let hash = 0;\n    for (let i = 0, len = str.length; i < len; i++) {\n        const chr = str.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    // Make it unsigned, for the hash appearance\n    if (hash < 0)\n        hash = hash >>> 0;\n    return hash.toString(36);\n}\nexport function entityHash(schema) {\n    //console.log(_entityHash(schema));\n    return hashCode(_entityHash(schema));\n}\nexport function _entityHash(type) {\n    let hash = '';\n    const unwrapped = unwrapZodType(type);\n    switch (unwrapped.zodType._def.typeName) {\n        case 'ZodObject': {\n            for (const [field, zodType] of Object.entries(unwrapped.zodType.shape)) {\n                hash +=\n                    'ZodObject:' + field + ':' + _entityHash(zodType);\n            }\n            break;\n        }\n        case 'ZodArray': {\n            const inner = unwrapped.zodType;\n            hash += 'ZodArray:' + _entityHash(inner.element);\n            break;\n        }\n        default:\n            hash += unwrapped.zodType._def.typeName;\n    }\n    return hash;\n}\nexport function entityData(schema, warnings) {\n    const cached = getCached(schema);\n    if (cached)\n        return cached;\n    const entity = {\n        typeInfo: schemaInfo(schema),\n        defaultEntity: defaultValues(schema),\n        constraints: constraints(schema, warnings),\n        keys: Object.keys(schema.keyof().Values),\n        hash: entityHash(schema),\n        errorShape: errorShape(schema)\n    };\n    setCached(schema, entity);\n    return entity;\n}\nfunction setCached(schema, entity) {\n    entityCache.set(schema, entity);\n}\nfunction getCached(schema) {\n    return entityCache.get(schema);\n}\nconst entityCache = new WeakMap();\n///// Factory functions for Entity ///////////////////////////////////////////\nfunction schemaInfo(schema) {\n    return _mapSchema(schema, (obj) => unwrapZodType(obj));\n}\nexport function valueOrDefault(value, schemaInfo) {\n    if (value)\n        return value;\n    const { zodType, isNullable, isOptional, hasDefault, defaultValue } = schemaInfo;\n    // Based on schema type, check what the empty value should be parsed to\n    // For convenience, make undefined into nullable if possible.\n    // otherwise all nullable fields requires a default value or optional.\n    // In the database, null is assumed if no other value (undefined doesn't exist there),\n    // so this should be ok.\n    // Also make a check for strict, so empty strings from FormData can also be set here.\n    if (hasDefault)\n        return defaultValue;\n    if (isNullable)\n        return null;\n    if (isOptional)\n        return undefined;\n    if (zodType._def.typeName == 'ZodString')\n        return '';\n    if (zodType._def.typeName == 'ZodNumber')\n        return 0;\n    if (zodType._def.typeName == 'ZodBoolean')\n        return false;\n    // Cannot add default for ZodDate due to https://github.com/Rich-Harris/devalue/issues/51\n    //if (zodType._def.typeName == \"ZodDate\") return new Date(NaN);\n    if (zodType._def.typeName == 'ZodArray')\n        return [];\n    if (zodType._def.typeName == 'ZodObject') {\n        return defaultValues(zodType);\n    }\n    if (zodType._def.typeName == 'ZodSet')\n        return new Set();\n    if (zodType._def.typeName == 'ZodRecord')\n        return {};\n    if (zodType._def.typeName == 'ZodBigInt')\n        return BigInt(0);\n    if (zodType._def.typeName == 'ZodSymbol')\n        return Symbol();\n    return undefined;\n}\n/**\n * Returns the default values for a zod validation schema.\n * The main gotcha is that undefined values are changed to null if the field is nullable.\n */\nexport function defaultValues(schema) {\n    while (schema._def.typeName == 'ZodEffects') {\n        schema = schema._def.schema;\n    }\n    if (!(schema._def.typeName == 'ZodObject')) {\n        throw new SuperFormError('Only Zod schema objects can be used with defaultValues. ' +\n            'Define the schema with z.object({ ... }) and optionally refine/superRefine/transform at the end.');\n    }\n    const realSchema = schema;\n    const fields = Object.keys(realSchema.keyof().Values);\n    const schemaTypeInfo = schemaInfo(realSchema);\n    return Object.fromEntries(fields.map((field) => {\n        const typeInfo = schemaTypeInfo[field];\n        const newValue = valueOrDefault(undefined, typeInfo);\n        return [field, newValue];\n    }));\n}\nfunction constraints(schema, warnings) {\n    function constraint(key, zodType, info) {\n        const output = {};\n        if (zodType._def.typeName == 'ZodString') {\n            const zodString = zodType;\n            const patterns = zodString._def.checks.filter((f) => f.kind == 'regex');\n            if (patterns.length > 1 && warnings?.multipleRegexps !== false) {\n                console.warn(`Field \"${key}\" has more than one regexp, only the first one will be used in constraints. Set the warnings.multipleRegexps option to false to disable this warning.`);\n            }\n            const pattern = patterns.length > 0 && patterns[0].kind == 'regex'\n                ? patterns[0].regex.source\n                : undefined;\n            if (pattern)\n                output.pattern = pattern;\n            if (zodString.minLength !== null)\n                output.minlength = zodString.minLength;\n            if (zodString.maxLength !== null)\n                output.maxlength = zodString.maxLength;\n        }\n        else if (zodType._def.typeName == 'ZodNumber') {\n            const zodNumber = zodType;\n            const steps = zodNumber._def.checks.filter((f) => f.kind == 'multipleOf');\n            if (steps.length > 1 && warnings?.multipleSteps !== false) {\n                console.warn(`Field \"${key}\" has more than one step, only the first one will be used in constraints. Set the warnings.multipleSteps option to false to disable this warning.`);\n            }\n            const step = steps.length > 0 && steps[0].kind == 'multipleOf'\n                ? steps[0].value\n                : null;\n            if (zodNumber.minValue !== null)\n                output.min = zodNumber.minValue;\n            if (zodNumber.maxValue !== null)\n                output.max = zodNumber.maxValue;\n            if (step !== null)\n                output.step = step;\n        }\n        else if (zodType._def.typeName == 'ZodDate') {\n            const zodDate = zodType;\n            if (zodDate.minDate)\n                output.min = zodDate.minDate.toISOString();\n            if (zodDate.maxDate)\n                output.max = zodDate.maxDate.toISOString();\n        }\n        else if (zodType._def.typeName == 'ZodArray') {\n            if (zodType._def.minLength)\n                output.min = zodType._def.minLength.value;\n            if (zodType._def.maxLength)\n                output.max = zodType._def.maxLength.value;\n            if (zodType._def.exactLength)\n                output.min = output.max = zodType._def.exactLength.value;\n        }\n        if (!info.isNullable && !info.isOptional) {\n            output.required = true;\n        }\n        return Object.keys(output).length > 0 ? output : undefined;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function mapField(key, value) {\n        const info = unwrapZodType(value);\n        value = info.zodType;\n        if (value._def.typeName == 'ZodArray') {\n            return mapField(key, value._def.type);\n        }\n        else if (value._def.typeName == 'ZodObject') {\n            return constraints(value, warnings);\n        }\n        else {\n            return constraint(key, value, info);\n        }\n    }\n    return _mapSchema(schema, (obj, key) => {\n        return mapField(key, obj);\n    }, (data) => !!data);\n}\n///////////////////////////////////////////////////////////////////////////\nfunction _mapSchema(schema, factory, filter) {\n    const keys = schema.keyof().Values;\n    return Object.fromEntries(Object.keys(keys)\n        .map((key) => [key, factory(schema.shape[key], key)])\n        .filter((entry) => (filter ? filter(entry[1]) : true)));\n}\n","import { klona } from './klona.js';\nexport function clone(data) {\n    return klona(data);\n}\n","// Needed to copy directly from\n// https://github.com/lukeed/klona/blob/master/src/index.js\nexport function klona(x) {\n    if (typeof x !== 'object')\n        return x;\n    var k, tmp, str = Object.prototype.toString.call(x);\n    if (str === '[object Object]') {\n        if (x.constructor !== Object && typeof x.constructor === 'function') {\n            tmp = new x.constructor();\n            for (k in x) {\n                if (x.hasOwnProperty(k) && tmp[k] !== x[k]) {\n                    tmp[k] = klona(x[k]);\n                }\n            }\n        }\n        else {\n            tmp = {}; // null\n            for (k in x) {\n                if (k === '__proto__') {\n                    Object.defineProperty(tmp, k, {\n                        value: klona(x[k]),\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    });\n                }\n                else {\n                    tmp[k] = klona(x[k]);\n                }\n            }\n        }\n        return tmp;\n    }\n    if (str === '[object Array]') {\n        k = x.length;\n        for (tmp = Array(k); k--;) {\n            tmp[k] = klona(x[k]);\n        }\n        return tmp;\n    }\n    if (str === '[object Set]') {\n        tmp = new Set();\n        x.forEach(function (val) {\n            tmp.add(klona(val));\n        });\n        return tmp;\n    }\n    if (str === '[object Map]') {\n        tmp = new Map();\n        x.forEach(function (val, key) {\n            tmp.set(klona(key), klona(val));\n        });\n        return tmp;\n    }\n    if (str === '[object Date]') {\n        return new Date(+x);\n    }\n    if (str === '[object RegExp]') {\n        tmp = new RegExp(x.source, x.flags);\n        tmp.lastIndex = x.lastIndex;\n        return tmp;\n    }\n    if (str === '[object DataView]') {\n        return new x.constructor(klona(x.buffer));\n    }\n    if (str === '[object ArrayBuffer]') {\n        return x.slice(0);\n    }\n    // ArrayBuffer.isView(x)\n    // ~> `new` bcuz `Buffer.slice` => ref\n    if (str.slice(-6) === 'Array]') {\n        return new x.constructor(x);\n    }\n    return x;\n}\n","function setPath(parent, key, value) {\n    parent[key] = value;\n    return 'skip';\n}\nexport function isInvalidPath(originalPath, pathData) {\n    return (pathData.value !== undefined &&\n        typeof pathData.value !== 'object' &&\n        pathData.path.length < originalPath.length);\n}\nexport function pathExists(obj, path, options = {}) {\n    if (!options.modifier) {\n        options.modifier = (pathData) => isInvalidPath(path, pathData) ? undefined : pathData.value;\n    }\n    const exists = traversePath(obj, path, options.modifier);\n    if (!exists)\n        return undefined;\n    if (options.value === undefined)\n        return exists;\n    return options.value(exists.value) ? exists : undefined;\n}\nexport async function traversePathAsync(obj, realPath, modifier) {\n    if (!realPath.length)\n        return undefined;\n    const path = [realPath[0]];\n    let parent = obj;\n    while (path.length < realPath.length) {\n        const key = path[path.length - 1];\n        const value = modifier\n            ? await modifier({\n                parent,\n                key: String(key),\n                value: parent[key],\n                path: path.map((p) => String(p)),\n                isLeaf: false,\n                set: (v) => setPath(parent, key, v)\n            })\n            : parent[key];\n        if (value === undefined)\n            return undefined;\n        else\n            parent = value; // TODO: Handle non-object values\n        path.push(realPath[path.length]);\n    }\n    const key = realPath[realPath.length - 1];\n    return {\n        parent,\n        key: String(key),\n        value: parent[key],\n        path: realPath.map((p) => String(p)),\n        isLeaf: true,\n        set: (v) => setPath(parent, key, v)\n    };\n}\nexport function traversePath(obj, realPath, modifier) {\n    if (!realPath.length)\n        return undefined;\n    const path = [realPath[0]];\n    let parent = obj;\n    while (path.length < realPath.length) {\n        const key = path[path.length - 1];\n        const value = modifier\n            ? modifier({\n                parent,\n                key: String(key),\n                value: parent[key],\n                path: path.map((p) => String(p)),\n                isLeaf: false,\n                set: (v) => setPath(parent, key, v)\n            })\n            : parent[key];\n        if (value === undefined)\n            return undefined;\n        else\n            parent = value; // TODO: Handle non-object values\n        path.push(realPath[path.length]);\n    }\n    const key = realPath[realPath.length - 1];\n    return {\n        parent,\n        key: String(key),\n        value: parent[key],\n        path: realPath.map((p) => String(p)),\n        isLeaf: true,\n        set: (v) => setPath(parent, key, v)\n    };\n}\nexport function traversePaths(parent, modifier, path = []) {\n    for (const key in parent) {\n        const value = parent[key];\n        const isLeaf = value === null || typeof value !== 'object';\n        const pathData = {\n            parent,\n            key,\n            value,\n            path: path.map(String).concat([key]),\n            isLeaf,\n            set: (v) => setPath(parent, key, v)\n        };\n        const status = modifier(pathData);\n        if (status === 'abort')\n            return status;\n        else if (status === 'skip')\n            continue;\n        else if (!isLeaf) {\n            const status = traversePaths(value, modifier, pathData.path);\n            if (status === 'abort')\n                return status;\n        }\n    }\n}\nexport async function traversePathsAsync(parent, modifier, path = []) {\n    for (const key in parent) {\n        const value = parent[key];\n        const isLeaf = value === null || typeof value !== 'object';\n        const pathData = {\n            parent,\n            key,\n            value,\n            path: path.map(String).concat([key]),\n            isLeaf,\n            set: (v) => setPath(parent, key, v)\n        };\n        const status = await modifier(pathData);\n        if (status === 'abort')\n            return status;\n        else if (status === 'skip')\n            break;\n        else if (!isLeaf) {\n            const status = traversePaths(value, modifier, pathData.path);\n            if (status === 'abort')\n                return status;\n        }\n    }\n}\n// Thanks to https://stackoverflow.com/a/31129384/70894\nfunction eqSet(xs, ys) {\n    return (xs === ys || (xs.size === ys.size && [...xs].every((x) => ys.has(x))));\n}\n/**\n * Compare two objects and return the differences as paths.\n */\nexport function comparePaths(newObj, oldObj) {\n    const diffPaths = new Map();\n    function checkPath(data, compareTo) {\n        const exists = traversePath(compareTo, data.path);\n        function addDiff() {\n            diffPaths.set(data.path.join(' '), data.path);\n        }\n        if (data.isLeaf) {\n            if (!exists) {\n                addDiff();\n            }\n            else if (data.value !== exists.value) {\n                addDiff();\n            }\n        }\n        else if (exists) {\n            if (data.value instanceof Date &&\n                exists.value instanceof Date &&\n                data.value.getTime() != exists.value.getTime()) {\n                addDiff();\n            }\n            else if (data.value instanceof Set &&\n                exists.value instanceof Set &&\n                !eqSet(data.value, exists.value)) {\n                addDiff();\n            }\n        }\n    }\n    traversePaths(newObj, (data) => checkPath(data, oldObj));\n    traversePaths(oldObj, (data) => checkPath(data, newObj));\n    return Array.from(diffPaths.values());\n}\nexport function setPaths(obj, paths, value) {\n    for (const path of paths) {\n        const leaf = traversePath(obj, path, ({ parent, key, value }) => {\n            if (value === undefined || typeof value !== 'object') {\n                // If a previous check tainted the node, but the search goes deeper,\n                // so it needs to be replaced with a (parent) node\n                parent[key] = {};\n            }\n            return parent[key];\n        });\n        if (leaf)\n            leaf.parent[leaf.key] = value;\n    }\n}\n","export class SuperFormError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, SuperFormError.prototype);\n    }\n}\nexport {} from './stringPath.js';\n","export function splitPath(path) {\n    return path\n        .toString()\n        .split(/[[\\].]+/)\n        .filter((p) => p);\n}\nexport function mergePath(path) {\n    return path.reduce((acc, next) => {\n        const key = String(next);\n        if (typeof next === 'number' || /^\\d+$/.test(key))\n            acc += `[${key}]`;\n        else if (!acc)\n            acc += key;\n        else\n            acc += `.${key}`;\n        return acc;\n    }, '');\n}\n","import {\n\tHOLE,\n\tNAN,\n\tNEGATIVE_INFINITY,\n\tNEGATIVE_ZERO,\n\tPOSITIVE_INFINITY,\n\tUNDEFINED\n} from './constants.js';\n\n/**\n * Revive a value serialized with `devalue.stringify`\n * @param {string} serialized\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function parse(serialized, revivers) {\n\treturn unflatten(JSON.parse(serialized), revivers);\n}\n\n/**\n * Revive a value flattened with `devalue.stringify`\n * @param {number | any[]} parsed\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function unflatten(parsed, revivers) {\n\tif (typeof parsed === 'number') return hydrate(parsed, true);\n\n\tif (!Array.isArray(parsed) || parsed.length === 0) {\n\t\tthrow new Error('Invalid input');\n\t}\n\n\tconst values = /** @type {any[]} */ (parsed);\n\n\tconst hydrated = Array(values.length);\n\n\t/**\n\t * @param {number} index\n\t * @returns {any}\n\t */\n\tfunction hydrate(index, standalone = false) {\n\t\tif (index === UNDEFINED) return undefined;\n\t\tif (index === NAN) return NaN;\n\t\tif (index === POSITIVE_INFINITY) return Infinity;\n\t\tif (index === NEGATIVE_INFINITY) return -Infinity;\n\t\tif (index === NEGATIVE_ZERO) return -0;\n\n\t\tif (standalone) throw new Error(`Invalid input`);\n\n\t\tif (index in hydrated) return hydrated[index];\n\n\t\tconst value = values[index];\n\n\t\tif (!value || typeof value !== 'object') {\n\t\t\thydrated[index] = value;\n\t\t} else if (Array.isArray(value)) {\n\t\t\tif (typeof value[0] === 'string') {\n\t\t\t\tconst type = value[0];\n\n\t\t\t\tconst reviver = revivers?.[type];\n\t\t\t\tif (reviver) {\n\t\t\t\t\treturn (hydrated[index] = reviver(hydrate(value[1])));\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Date':\n\t\t\t\t\t\thydrated[index] = new Date(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Set':\n\t\t\t\t\t\tconst set = new Set();\n\t\t\t\t\t\thydrated[index] = set;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 1) {\n\t\t\t\t\t\t\tset.add(hydrate(value[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Map':\n\t\t\t\t\t\tconst map = new Map();\n\t\t\t\t\t\thydrated[index] = map;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tmap.set(hydrate(value[i]), hydrate(value[i + 1]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RegExp':\n\t\t\t\t\t\thydrated[index] = new RegExp(value[1], value[2]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\thydrated[index] = Object(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BigInt':\n\t\t\t\t\t\thydrated[index] = BigInt(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'null':\n\t\t\t\t\t\tconst obj = Object.create(null);\n\t\t\t\t\t\thydrated[index] = obj;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tobj[value[i]] = hydrate(value[i + 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unknown type ${type}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = new Array(value.length);\n\t\t\t\thydrated[index] = array;\n\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\tconst n = value[i];\n\t\t\t\t\tif (n === HOLE) continue;\n\n\t\t\t\t\tarray[i] = hydrate(n);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t/** @type {Record<string, any>} */\n\t\t\tconst object = {};\n\t\t\thydrated[index] = object;\n\n\t\t\tfor (const key in value) {\n\t\t\t\tconst n = value[key];\n\t\t\t\tobject[key] = hydrate(n);\n\t\t\t}\n\t\t}\n\n\t\treturn hydrated[index];\n\t}\n\n\treturn hydrate(0);\n}\n"],"names":["parsed","result","entityInfo","options","errorShape","key","schemaInfo","value","status"],"mappings":"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"}