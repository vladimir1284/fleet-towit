{"version":3,"file":"hooks.server-aea965e1.js","sources":["../../../../src/hooks.server.ts","../../../../node_modules/.pnpm/@auth+sveltekit@0.4.0_@sveltejs+kit@2.0.6_nodemailer@6.9.7_svelte@4.2.8/node_modules/@auth/sveltekit/index.js","../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/exports/hooks/sequence.js"],"sourcesContent":["//@ts-nocheck\nimport { sequence } from '@sveltejs/kit/hooks';\nimport { handleErrorWithSentry, sentryHandle } from '@sentry/sveltekit';\nimport * as Sentry from '@sentry/sveltekit';\nimport { type Handle } from '@sveltejs/kit';\nimport { SvelteKitAuth } from '@auth/sveltekit';\nimport Google from '@auth/core/providers/google';\nimport {\n\tGOOGLE_CLIENT_ID,\n\tGOOGLE_CLIENT_SECRET,\n\tSMTP_HOST,\n\tSMTP_PORT,\n\tSMTP_USER,\n\tSMTP_PASSWORD,\n\tEMAIL_FROM,\n\t//ENVIRONMENT\n} from '$env/static/private';\nimport EmailProvider from '@auth/core/providers/email';\nimport { PrismaAdapter } from '@auth/prisma-adapter';\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n\nconst handleAuth = (async(...args) => {\n\tconst [{event}] = args;\n\treturn SvelteKitAuth({\n\t\tcallbacks: {\n\t\t\tasync signIn({ user }) {\n\t\t\t\tlet guest = await prisma.user.findFirst({ where: { email: user.email } });\n\t\t\t\tif (guest) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Unauthorized: ', user);\n\t\t\t\t\t// Return false to display a default error message\n\t\t\t\t\treturn false;\n\t\t\t\t\t// Or you can return a URL to redirect to:\n\t\t\t\t\t// return '/unauthorized'\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync session({ session, user }) {\n\t\t\t\tsession.user = {\n\t\t\t\t\tid: user.id,\n\t\t\t\t\tname: user.name,\n\t\t\t\t\temail: user.email,\n\t\t\t\t\timage: user.image\n\t\t\t\t};\n\t\t\t\tevent.locals.session = session;\n\t\t\t\treturn session;\n\t\t\t},\n\t\t},\n\t\tadapter: PrismaAdapter(prisma),\n\t\tproviders: [\n\t\t\tGoogle({\n\t\t\t\tclientId: GOOGLE_CLIENT_ID,\n\t\t\t\tclientSecret: GOOGLE_CLIENT_SECRET,\n\t\t\t\tallowDangerousEmailAccountLinking: true\n\t\t\t}),\n\t\t\tEmailProvider({\n\t\t\t\tserver: {\n\t\t\t\t\thost: SMTP_HOST,\n\t\t\t\t\tport: SMTP_PORT,\n\t\t\t\t\tauth: {\n\t\t\t\t\t\tuser: SMTP_USER,\n\t\t\t\t\t\tpass: SMTP_PASSWORD\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfrom: EMAIL_FROM,\n\t\t\t\tallowDangerousEmailAccountLinking: true\n\t\t\t})\n\t\t],\n\t\tpages: {\n\t\t\tsignIn: '/signin',\n\t\t\t//error: '/auth/error', // Error code passed in query string as ?error=\n\t\t\tverifyRequest: '/verifyRequest'\n\t\t},\n\t})(...args)\n}) satisfies Handle;\n\n/*if (ENVIRONMENT===\"Production\") {\n\tSentry.init({\n\t\tdsn: 'https://264c6d3e8448a85d1a3717e5ef22a502@o4506418139299840.ingest.sentry.io/4506418143035392',\n\t\ttracesSampleRate: 1.0\n\t});\t\t\n}*/\n// If you have custom handlers, make sure to place them after `sentryHandle()` in the `sequence` function.\nexport const handle = sequence(sentryHandle(), handleAuth);\n\n// If you have a custom error handler, pass it to `handleErrorWithSentry`\nexport const handleError = handleErrorWithSentry();\n","/**\n *\n *\n * :::warning\n * `@auth/sveltekit` is currently experimental. The API _might_ change.\n * :::\n *\n * SvelteKit Auth is the official SvelteKit integration for Auth.js.\n * It provides a simple way to add authentication to your SvelteKit app in a few lines of code.\n *\n *\n * ## Installation\n *\n * ```bash npm2yarn\n * npm install @auth/sveltekit\n * ```\n *\n * ## Usage\n *\n * ```ts title=\"src/hooks.server.ts\"\n * import { SvelteKitAuth } from \"@auth/sveltekit\"\n * import GitHub from \"@auth/sveltekit/providers/github\"\n * import { GITHUB_ID, GITHUB_SECRET } from \"$env/static/private\"\n *\n * export const handle = SvelteKitAuth({\n *   providers: [GitHub({ clientId: GITHUB_ID, clientSecret: GITHUB_SECRET })],\n * })\n * ```\n *\n * or to use SvelteKit platform environment variables for platforms like Cloudflare\n *\n * ```ts title=\"src/hooks.server.ts\"\n * import { SvelteKitAuth } from \"@auth/sveltekit\"\n * import GitHub from \"@auth/sveltekit/providers/github\"\n * import type { Handle } from \"@sveltejs/kit\";\n *\n * export const handle = SvelteKitAuth(async (event) => {\n *   const authOptions = {\n *     providers: [GitHub({ clientId: event.platform.env.GITHUB_ID, clientSecret: event.platform.env.GITHUB_SECRET })]\n *     secret: event.platform.env.AUTH_SECRET,\n *     trustHost: true\n *   }\n *   return authOptions\n * }) satisfies Handle;\n * ```\n *\n * Remember to set the `AUTH_SECRET` [environment variable](https://kit.svelte.dev/docs/modules#$env-dynamic-private). This should be a minimum of 32 characters, random string. On UNIX systems you can use `openssl rand -hex 32` or check out `https://generate-secret.vercel.app/32`.\n *\n * When deploying your app outside Vercel, set the `AUTH_TRUST_HOST` variable to `true` for other hosting providers like Cloudflare Pages or Netlify.\n *\n * The callback URL used by the [providers](https://authjs.dev/getting-started/providers) must be set to the following, unless you override {@link SvelteKitAuthConfig.prefix}:\n * ```\n * [origin]/auth/callback/[provider]\n * ```\n *\n * ## Signing in and signing out\n *\n * The data for the current session in this example was made available through the `$page` store which can be set through the root `+page.server.ts` file.\n * It is not necessary to store the data there, however, this makes it globally accessible throughout your application simplifying state management.\n *\n * ```ts\n * <script>\n *   import { signIn, signOut } from \"@auth/sveltekit/client\"\n *   import { page } from \"$app/stores\"\n * </script>\n *\n * <h1>SvelteKit Auth Example</h1>\n * <p>\n *   {#if $page.data.session}\n *     {#if $page.data.session.user?.image}\n *       <span\n *         style=\"background-image: url('{$page.data.session.user.image}')\"\n *         class=\"avatar\"\n *       />\n *     {/if}\n *     <span class=\"signedInText\">\n *       <small>Signed in as</small><br />\n *       <strong>{$page.data.session.user?.name ?? \"User\"}</strong>\n *     </span>\n *     <button on:click={() => signOut()} class=\"button\">Sign out</button>\n *   {:else}\n *     <span class=\"notSignedInText\">You are not signed in</span>\n *     <button on:click={() => signIn(\"github\")}>Sign In with GitHub</button>\n *   {/if}\n * </p>\n * ```\n *\n * ## Managing the session\n *\n * The above example checks for a session available in `$page.data.session`, however that needs to be set by us somewhere.\n * If you want this data to be available to all your routes you can add this to `src/routes/+layout.server.ts`.\n * The following code sets the session data in the `$page` store to be available to all routes.\n *\n * ```ts\n * import type { LayoutServerLoad } from './$types';\n *\n * export const load: LayoutServerLoad = async (event) => {\n *   return {\n *     session: await event.locals.getSession()\n *   };\n * };\n * ```\n *\n * What you return in the function `LayoutServerLoad` will be available inside the `$page` store, in the `data` property: `$page.data`.\n * In this case we return an object with the 'session' property which is what we are accessing in the other code paths.\n *\n * ## Handling authorization\n *\n * In SvelteKit there are a few ways you could protect routes from unauthenticated users.\n *\n * ### Per component\n *\n * The simplest case is protecting a single page, in which case you should put the logic in the `+page.server.ts` file.\n * Notice in this case that you could also await event.parent and grab the session from there, however this implementation works even if you haven't done the above in your root `+layout.server.ts`\n *\n * ```ts\n * import { redirect } from '@sveltejs/kit';\n * import type { PageServerLoad } from './$types';\n *\n * export const load: PageServerLoad = async (event) => {\n *   const session = await event.locals.getSession();\n *   if (!session?.user) throw redirect(303, '/auth');\n *   return {};\n * };\n * ```\n *\n * :::danger\n * Make sure to ALWAYS grab the session information from the parent instead of using the store in the case of a `PageLoad`.\n * Not doing so can lead to users being able to incorrectly access protected information in the case the `+layout.server.ts` does not run for that page load.\n * This code sample already implements the correct method by using `const { session } = await parent();`\n * :::\n *\n * You should NOT put authorization logic in a `+layout.server.ts` as the logic is not guaranteed to propagate to leafs in the tree.\n * Prefer to manually protect each route through the `+page.server.ts` file to avoid mistakes.\n * It is possible to force the layout file to run the load function on all routes, however that relies certain behaviours that can change and are not easily checked.\n * For more information about these caveats make sure to read this issue in the SvelteKit repository: https://github.com/sveltejs/kit/issues/6315\n *\n * ### Per path\n *\n * Another method that's possible for handling authorization is by restricting certain URIs from being available.\n * For many projects this is better because:\n * - This automatically protects actions and api routes in those URIs\n * - No code duplication between components\n * - Very easy to modify\n *\n * The way to handle authorization through the URI is to override your handle hook.\n * The handle hook, available in `hooks.server.ts`, is a function that receives ALL requests sent to your SvelteKit webapp.\n * You may intercept them inside the handle hook, add and modify things in the request, block requests, etc.\n * Some readers may notice we are already using this handle hook for SvelteKitAuth which returns a handle itself, so we are going to use SvelteKit's sequence to provide middleware-like functions that set the handle hook.\n *\n * ```ts\n * import { SvelteKitAuth } from '@auth/sveltekit';\n * import GitHub from '@auth/sveltekit/providers/github';\n * import { GITHUB_ID, GITHUB_SECRET } from '$env/static/private';\n * import { redirect, type Handle } from '@sveltejs/kit';\n * import { sequence } from '@sveltejs/kit/hooks';\n *\n * async function authorization({ event, resolve }) {\n * \t// Protect any routes under /authenticated\n * \tif (event.url.pathname.startsWith('/authenticated')) {\n *    const session = await event.locals.getSession();\n * \t\tif (!session) {\n * \t\t\tthrow redirect(303, '/auth');\n * \t\t}\n * \t}\n *\n * \t// If the request is still here, just proceed as normally\n * \treturn resolve(event);\n * }\n *\n * // First handle authentication, then authorization\n * // Each function acts as a middleware, receiving the request handle\n * // And returning a handle which gets passed to the next function\n * export const handle: Handle = sequence(\n * \tSvelteKitAuth({\n * \t\tproviders: [GitHub({ clientId: GITHUB_ID, clientSecret: GITHUB_SECRET })]\n * \t}),\n * \tauthorization\n * );\n * ```\n *\n * :::info\n * Learn more about SvelteKit's handle hooks and sequence [here](https://kit.svelte.dev/docs/modules#sveltejs-kit-hooks-sequence).\n * :::\n *\n * Now any routes under `/authenticated` will be transparently protected by the handle hook.\n * You may add more middleware-like functions to the sequence and also implement more complex authorization business logic inside this file.\n * This can also be used along with the component-based approach in case you need a specific page to be protected and doing it by URI could be faulty.\n *\n * ## Notes\n *\n * :::info\n * Learn more about `@auth/sveltekit` [here](https://vercel.com/blog/announcing-sveltekit-auth).\n * :::\n *\n * :::info\n * PRs to improve this documentation are welcome! See [this file](https://github.com/nextauthjs/next-auth/blob/main/packages/frameworks-sveltekit/src/lib/index.ts).\n * :::\n *\n * @module @auth/sveltekit\n */\nimport { dev } from \"$app/environment\";\nimport { base } from \"$app/paths\";\nimport { env } from \"$env/dynamic/private\";\nimport { Auth } from \"@auth/core\";\nexport async function getSession(req, config) {\n    config.secret ??= env.AUTH_SECRET;\n    config.trustHost ??= true;\n    const prefix = config.prefix ?? `${base}/auth`;\n    const url = new URL(prefix + \"/session\", req.url);\n    const request = new Request(url, { headers: req.headers });\n    const response = await Auth(request, config);\n    const { status = 200 } = response;\n    const data = await response.json();\n    if (!data || !Object.keys(data).length)\n        return null;\n    if (status === 200)\n        return data;\n    throw new Error(data.message);\n}\nconst actions = [\n    \"providers\",\n    \"session\",\n    \"csrf\",\n    \"signin\",\n    \"signout\",\n    \"callback\",\n    \"verify-request\",\n    \"error\",\n];\nfunction AuthHandle(svelteKitAuthOptions) {\n    return async function ({ event, resolve }) {\n        const authOptions = typeof svelteKitAuthOptions === \"object\"\n            ? svelteKitAuthOptions\n            : await svelteKitAuthOptions(event);\n        const { prefix = `${base}/auth` } = authOptions;\n        const { url, request } = event;\n        event.locals.getSession ??= () => getSession(request, authOptions);\n        const action = url.pathname\n            .slice(prefix.length + 1)\n            .split(\"/\")[0];\n        if (!actions.includes(action) || !url.pathname.startsWith(prefix + \"/\")) {\n            return resolve(event);\n        }\n        return Auth(request, authOptions);\n    };\n}\n/**\n * The main entry point to `@auth/sveltekit`\n * @see https://sveltekit.authjs.dev\n */\nexport function SvelteKitAuth(options) {\n    if (typeof options === \"object\") {\n        options.secret ??= env.AUTH_SECRET;\n        options.trustHost ??= !!(env.AUTH_TRUST_HOST ?? env.VERCEL ?? dev);\n        options.prefix ??= `${base}/auth`;\n    }\n    return AuthHandle(options);\n}\n","/**\n * A helper function for sequencing multiple `handle` calls in a middleware-like manner.\n * The behavior for the `handle` options is as follows:\n * - `transformPageChunk` is applied in reverse order and merged\n * - `preload` is applied in forward order, the first option \"wins\" and no `preload` options after it are called\n * - `filterSerializedResponseHeaders` behaves the same as `preload`\n *\n * ```js\n * /// file: src/hooks.server.js\n * import { sequence } from '@sveltejs/kit/hooks';\n *\n * /// type: import('@sveltejs/kit').Handle\n * async function first({ event, resolve }) {\n * \tconsole.log('first pre-processing');\n * \tconst result = await resolve(event, {\n * \t\ttransformPageChunk: ({ html }) => {\n * \t\t\t// transforms are applied in reverse order\n * \t\t\tconsole.log('first transform');\n * \t\t\treturn html;\n * \t\t},\n * \t\tpreload: () => {\n * \t\t\t// this one wins as it's the first defined in the chain\n * \t\t\tconsole.log('first preload');\n * \t\t}\n * \t});\n * \tconsole.log('first post-processing');\n * \treturn result;\n * }\n *\n * /// type: import('@sveltejs/kit').Handle\n * async function second({ event, resolve }) {\n * \tconsole.log('second pre-processing');\n * \tconst result = await resolve(event, {\n * \t\ttransformPageChunk: ({ html }) => {\n * \t\t\tconsole.log('second transform');\n * \t\t\treturn html;\n * \t\t},\n * \t\tpreload: () => {\n * \t\t\tconsole.log('second preload');\n * \t\t},\n * \t\tfilterSerializedResponseHeaders: () => {\n * \t\t\t// this one wins as it's the first defined in the chain\n *    \t\tconsole.log('second filterSerializedResponseHeaders');\n * \t\t}\n * \t});\n * \tconsole.log('second post-processing');\n * \treturn result;\n * }\n *\n * export const handle = sequence(first, second);\n * ```\n *\n * The example above would print:\n *\n * ```\n * first pre-processing\n * first preload\n * second pre-processing\n * second filterSerializedResponseHeaders\n * second transform\n * first transform\n * second post-processing\n * first post-processing\n * ```\n *\n * @param {...import('@sveltejs/kit').Handle} handlers The chain of `handle` functions\n * @returns {import('@sveltejs/kit').Handle}\n */\nexport function sequence(...handlers) {\n\tconst length = handlers.length;\n\tif (!length) return ({ event, resolve }) => resolve(event);\n\n\treturn ({ event, resolve }) => {\n\t\treturn apply_handle(0, event, {});\n\n\t\t/**\n\t\t * @param {number} i\n\t\t * @param {import('@sveltejs/kit').RequestEvent} event\n\t\t * @param {import('@sveltejs/kit').ResolveOptions | undefined} parent_options\n\t\t * @returns {import('types').MaybePromise<Response>}\n\t\t */\n\t\tfunction apply_handle(i, event, parent_options) {\n\t\t\tconst handle = handlers[i];\n\n\t\t\treturn handle({\n\t\t\t\tevent,\n\t\t\t\tresolve: (event, options) => {\n\t\t\t\t\t/** @type {import('@sveltejs/kit').ResolveOptions['transformPageChunk']} */\n\t\t\t\t\tconst transformPageChunk = async ({ html, done }) => {\n\t\t\t\t\t\tif (options?.transformPageChunk) {\n\t\t\t\t\t\t\thtml = (await options.transformPageChunk({ html, done })) ?? '';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (parent_options?.transformPageChunk) {\n\t\t\t\t\t\t\thtml = (await parent_options.transformPageChunk({ html, done })) ?? '';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn html;\n\t\t\t\t\t};\n\n\t\t\t\t\t/** @type {import('@sveltejs/kit').ResolveOptions['filterSerializedResponseHeaders']} */\n\t\t\t\t\tconst filterSerializedResponseHeaders =\n\t\t\t\t\t\tparent_options?.filterSerializedResponseHeaders ??\n\t\t\t\t\t\toptions?.filterSerializedResponseHeaders;\n\n\t\t\t\t\t/** @type {import('@sveltejs/kit').ResolveOptions['preload']} */\n\t\t\t\t\tconst preload = parent_options?.preload ?? options?.preload;\n\n\t\t\t\t\treturn i < length - 1\n\t\t\t\t\t\t? apply_handle(i + 1, event, {\n\t\t\t\t\t\t\t\ttransformPageChunk,\n\t\t\t\t\t\t\t\tfilterSerializedResponseHeaders,\n\t\t\t\t\t\t\t\tpreload\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t: resolve(event, { transformPageChunk, filterSerializedResponseHeaders, preload });\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}\n"],"names":["env","event","handle"],"mappings":"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"}