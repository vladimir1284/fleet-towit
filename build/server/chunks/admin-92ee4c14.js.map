{"version":3,"file":"admin-92ee4c14.js","sources":["../../../../src/lib/actions/admin.ts"],"sourcesContent":["import { bypassPrisma } from \"$lib/prisma\";\nimport email from \"@auth/sveltekit/providers/email\";\nimport { string } from \"zod\";\nimport { Role } from \"@prisma/client\";\n\ntype createCompanyType = {name: string, email?: string | null};\ntype createUserType = {email: string, companyId: string, userRole?: Role};\ntype editCompanyType = createCompanyType & {companyId: string};\ntype editUserType = createUserType & {companyUserId: string}\n\nexport const createCompany = async({name, email=null, }: createCompanyType) => {\n    let obj = await bypassPrisma.company.create({data:{\n        name: name,\n        email: email\n    }});\n    return obj\n}\n\nexport const createCompanyUser = async({email, companyId, userRole=Role.STAFF}: createUserType) => {\n    let user = await bypassPrisma.user.findUnique({where:{email: email}})\n    if (!user) {\n        user = await bypassPrisma.user.create({data: {email: email}})\n    }\n    let companyUser = await bypassPrisma.companyUser.create({data:{\n        userId: user.id,\n        companyId: companyId,\n        role: userRole\n    }})\n\n    return companyUser\n}\n\nexport const updateCompany = async({companyId, name, email}: editCompanyType) => {\n    let company = await bypassPrisma.company.update({where:{id: companyId}, data:{name: name, email: email}})\n    return company\n}\n\nexport const updateCompanyUser = async({companyUserId, email, companyId, userRole}: editUserType) => {\n    let user = await bypassPrisma.user.findUnique({where:{email: email}})\n    if (!user) {\n        user = await bypassPrisma.user.create({data: {email: email}})\n    } \n    let companyUser = await bypassPrisma.companyUser.update({where:{id: companyUserId}, data:{companyId, role: userRole, userId: user.id}})\n    return companyUser\n}\n\nexport const deleteCompany = async({companyId}:{companyId: string} ) => {\n    await bypassPrisma.company.delete({where:{id: companyId}})\n    return true\n}\n\nexport const deleteUser = async({companyUserId}: {companyUserId: string}) => {\n    await bypassPrisma.companyUser.delete({where:{id: companyUserId}})\n    return true\n}\n\nexport const getCompanyUser = async({companyUserId}: {companyUserId: string}) => {\n    let companyUser = await bypassPrisma.companyUser.findUnique({where: {id: companyUserId}})\n    let user = await bypassPrisma.user.findUnique({where: {id: companyUser?.userId}})\n    return {...companyUser, user}\n}\n\nexport const listCompanies = async() => {\n    let companies = await bypassPrisma.company.findMany();\n    let augmentedCompanies = await Promise.all(companies.map(async(company) => { \n        let owner\n        let _owner = await bypassPrisma.companyUser.findFirst({where:{AND:{companyId: company.id, role: Role.OWNER}}})\n        if (_owner) {\n            let user = await bypassPrisma.user.findUnique({where:{id: _owner.userId}})\n            owner = {..._owner, user}\n        } else {\n            owner = _owner\n        }\n        return {...company, owner}\n     }))\n    return companies\n}\n\nexport const listCompanyUsers = async({companyId}:{companyId: string}) => {\n    let _users = await bypassPrisma.companyUser.findMany({where:{companyId: companyId}});\n    let users = await Promise.all(_users.map(async(user) => {\n        let _user = await bypassPrisma.user.findUnique({where:{id: user.userId}})\n        return {...user, user: _user}\n    }))\n    return users\n}\n\nexport const getAdminCompany = async() => {\n    let company = await bypassPrisma.company.findFirst({where: {isAdmin: true}});\n    return company\n}"],"names":[],"mappings":"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"}