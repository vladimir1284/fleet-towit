{"version":3,"file":"prisma-50863289.js","sources":["../../../../src/lib/prisma.ts","../../../../src/lib/test_models.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\nimport { bypassRLS, forCompany, forUser } from \"./test_models\";\n\nexport const prisma = new PrismaClient();\n\nexport const bypassPrisma = prisma.$extends(bypassRLS());\nexport  function companyPrisma(company: string) {\n    const extended = prisma.$extends(forCompany(company));\n    return extended\n}\nexport  function userPrisma(user: string) {\n    const extended = prisma.$extends(forUser(user));\n    return extended\n}","import { Prisma, PrismaClient } from '@prisma/client';\n\nexport function bypassRLS() {\n\treturn Prisma.defineExtension((prisma) =>\n\t\tprisma.$extends({\n\t\t\tquery: {\n\t\t\t\t$allModels: {\n\t\t\t\t\tasync $allOperations({ args, query }) {\n\t\t\t\t\t\tconst [, result] = await prisma.$transaction([\n\t\t\t\t\t\t\tprisma.$executeRaw`SELECT set_config('app.bypass_rls', 'on', TRUE)`,\n\t\t\t\t\t\t\tquery(args)\n\t\t\t\t\t\t]);\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t);\n}\n\nexport function forCompany(companyId: string) {\n\treturn Prisma.defineExtension((prisma) =>\n\t\tprisma.$extends({\n\t\t\tquery: {\n\t\t\t\t$allModels: {\n\t\t\t\t\tasync $allOperations({ args, query }) {\n\t\t\t\t\t\tconst [, result] = await prisma.$transaction([\n\t\t\t\t\t\t\tprisma.$executeRaw`SELECT set_config('app.current_company_id',  ${companyId}, 'TRUE')`,\n\t\t\t\t\t\t\tquery(args)\n\t\t\t\t\t\t]);\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t);\n}\n\n\nexport function forUser(userId: string) {\n\treturn Prisma.defineExtension((prisma) =>\n\t  prisma.$extends({\n\t\tquery: {\n\t\t  $allModels: {\n\t\t\tasync $allOperations({ args, query }) {\n\t\t\t  const [, result] = await prisma.$transaction([\n\t\t\t\tprisma.$executeRaw`SELECT set_config('app.current_user_id', ${userId}, TRUE)`,\n\t\t\t\tquery(args),\n\t\t\t  ]);\n\t\t\t  return result;\n\t\t\t},\n\t\t  },\n\t\t},\n\t  })\n\t);\n  }\n  "],"names":["prisma"],"mappings":";;;ACEO,SAAA,SAAP,GAAO;AACN,EAAD,OAAC,MAAD,CAAC,eAAD;AAAC,IAAc,CAAAA,OAAf,KAAeA,OAAf,CAAe,QAAf,CAAe;AAAA,MACG,KADlB,EACkB;AAAA,QACR,UADV,EACU;AAAA,UACM,MAAA,cADhB,CACgB,EAAA,IADhB,EACgB,KADhB,EAAA,EACgB;AAEV,YAAN,MAAM,GAAA,MAAA,CAAN,GAAM,MAAAA,OAAN,CAAM,YAAN,CAAM;AAAA,cAA6CA,OAAnD,CAAmD,WAAnD,CAAA,+CAAA,CAAA;AAAmD,cACrC,KADd,CACc,IAAA,CADd;AACc,aACG,CADjB,CAAA;AAGM,YAAN,OAAM,MAAN,CAAA;AAAM,WAAN;AAAa,SAAb;AACK,OAAL;AACI,KACD,CADH;AACG,GAAH,CAAA;AAGA,CAAA;AAEO,SAAA,UAAP,CAAO,SAAP,EAAO;AACN,EAAD,OAAC,MAAD,CAAC,eAAD;AAAC,IAAc,CAAAA,OAAf,KAAeA,OAAf,CAAe,QAAf,CAAe;AAAA,MACG,KADlB,EACkB;AAAA,QACR,UADV,EACU;AAAA,UACM,MAAA,cADhB,CACgB,EAAA,IADhB,EACgB,KADhB,EAAA,EACgB;AAEV,YAAN,MAAM,GAAA,MAAA,CAAN,GAAM,MAAAA,OAAN,CAAM,YAAN,CAAM;AAAA,cAA6CA,OAAnD,CAAmD,WAAnD,CAAA,6CAAA,EAAmD,SAAA,CAAnD,SAAA,CAAA;AAAmD,cAC+B,KADlF,CACkF,IAAA,CADlF;AACkF,aACjE,CADjB,CAAA;AAGM,YAAN,OAAM,MAAN,CAAA;AAAM,WAAN;AAAa,SAAb;AACK,OAAL;AACI,KACD,CADH;AACG,GAAH,CAAA;AAGA,CAAA;ADjCO,MAAA,MAAP,GAAO,IAAA,YAAP,EAAA,CAAA;AAEA,MAAO,YAAP,GAAO,MAAP,CAAO,QAAP,CAAO,SAAP,EAAO,EAAP;AACQ,SAAA,aAAR,CAAQ,OAAR,EAAQ;AACJ,EAAJ,MAAI,QAAJ,GAAI,MAAJ,CAAI,QAAJ,CAAI,UAAJ,CAAI,OAAA,CAAA,CAAJ,CAAA;AACI,EAAJ,OAAI,QAAJ,CAAA;AACA;;;;"}