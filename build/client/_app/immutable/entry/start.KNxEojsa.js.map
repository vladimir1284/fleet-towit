{"version":3,"file":"start.KNxEojsa.js","sources":["../../../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/runtime/client/client.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/runtime/client/start.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/utils/url.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/runtime/hash.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/runtime/client/fetcher.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/utils/routing.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/runtime/client/parse.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/runtime/client/session-storage.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/utils/exports.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/utils/array.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/runtime/control.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/runtime/shared.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.0.6_@sveltejs+vite-plugin-svelte@3.0.1_svelte@4.2.8_vite@5.0.10/node_modules/@sveltejs/kit/src/utils/error.js"],"sourcesContent":["import { DEV } from 'esm-env';\nimport { onMount, tick } from 'svelte';\nimport {\n\tadd_data_suffix,\n\tdecode_params,\n\tdecode_pathname,\n\tstrip_hash,\n\tmake_trackable,\n\tnormalize_path\n} from '../../utils/url.js';\nimport {\n\tinitial_fetch,\n\tlock_fetch,\n\tnative_fetch,\n\tsubsequent_fetch,\n\tunlock_fetch\n} from './fetcher.js';\nimport { parse } from './parse.js';\nimport * as storage from './session-storage.js';\nimport {\n\tfind_anchor,\n\tresolve_url,\n\tget_link_info,\n\tget_router_options,\n\tis_external_url,\n\torigin,\n\tscroll_state\n} from './utils.js';\n\nimport { base } from '__sveltekit/paths';\nimport * as devalue from 'devalue';\nimport {\n\tHISTORY_INDEX,\n\tNAVIGATION_INDEX,\n\tPRELOAD_PRIORITIES,\n\tSCROLL_KEY,\n\tSTATES_KEY,\n\tSNAPSHOT_KEY,\n\tPAGE_URL_KEY\n} from './constants.js';\nimport { validate_page_exports } from '../../utils/exports.js';\nimport { compact } from '../../utils/array.js';\nimport { HttpError, Redirect, SvelteKitError } from '../control.js';\nimport { INVALIDATED_PARAM, TRAILING_SLASH_PARAM, validate_depends } from '../shared.js';\nimport { stores } from './singletons.js';\nimport { get_message, get_status } from '../../utils/error.js';\n\nlet errored = false;\n\n/** @typedef {{ x: number; y: number }} ScrollPosition */\n\n// We track the scroll position associated with each history entry in sessionStorage,\n// rather than on history.state itself, because when navigation is driven by\n// popstate it's too late to update the scroll position associated with the\n// state we're navigating from\n/**\n * history index -> { x, y }\n * @type {Record<number, ScrollPosition>}\n */\nconst scroll_positions = storage.get(SCROLL_KEY) ?? {};\n\n/**\n * history index -> any\n * @type {Record<string, Record<string, any>>}\n */\nconst states = storage.get(STATES_KEY, devalue.parse) ?? {};\n\n/**\n * navigation index -> any\n * @type {Record<string, any[]>}\n */\nconst snapshots = storage.get(SNAPSHOT_KEY) ?? {};\n\nconst original_push_state = history.pushState;\nconst original_replace_state = history.replaceState;\n\nif (DEV) {\n\tlet warned = false;\n\n\tconst warn = () => {\n\t\tif (warned) return;\n\t\twarned = true;\n\n\t\tconsole.warn(\n\t\t\t\"Avoid using `history.pushState(...)` and `history.replaceState(...)` as these will conflict with SvelteKit's router. Use the `pushState` and `replaceState` imports from `$app/navigation` instead.\"\n\t\t);\n\t};\n\n\thistory.pushState = (...args) => {\n\t\twarn();\n\t\treturn original_push_state.apply(history, args);\n\t};\n\n\thistory.replaceState = (...args) => {\n\t\twarn();\n\t\treturn original_replace_state.apply(history, args);\n\t};\n}\n\n/** @param {number} index */\nfunction update_scroll_positions(index) {\n\tscroll_positions[index] = scroll_state();\n}\n\n/**\n * @param {number} current_history_index\n * @param {number} current_navigation_index\n */\nfunction clear_onward_history(current_history_index, current_navigation_index) {\n\t// if we navigated back, then pushed a new state, we can\n\t// release memory by pruning the scroll/snapshot lookup\n\tlet i = current_history_index + 1;\n\twhile (scroll_positions[i]) {\n\t\tdelete scroll_positions[i];\n\t\ti += 1;\n\t}\n\n\ti = current_navigation_index + 1;\n\twhile (snapshots[i]) {\n\t\tdelete snapshots[i];\n\t\ti += 1;\n\t}\n}\n\n/**\n * Loads `href` the old-fashioned way, with a full page reload.\n * Returns a `Promise` that never resolves (to prevent any\n * subsequent work, e.g. history manipulation, from happening)\n * @param {URL} url\n */\nfunction native_navigation(url) {\n\tlocation.href = url.href;\n\treturn new Promise(() => {});\n}\n\nfunction noop() {}\n\n/**\n * @param {import('./types.js').SvelteKitApp} app\n * @param {HTMLElement} target\n * @returns {import('./types.js').Client}\n */\nexport function create_client(app, target) {\n\tconst routes = parse(app);\n\n\tconst default_layout_loader = app.nodes[0];\n\tconst default_error_loader = app.nodes[1];\n\n\t// we import the root layout/error nodes eagerly, so that\n\t// connectivity errors after initialisation don't nuke the app\n\tdefault_layout_loader();\n\tdefault_error_loader();\n\n\tconst container = __SVELTEKIT_EMBEDDED__ ? target : document.documentElement;\n\n\t/** @type {Array<((url: URL) => boolean)>} */\n\tconst invalidated = [];\n\n\t/**\n\t * An array of the `+layout.svelte` and `+page.svelte` component instances\n\t * that currently live on the page â€” used for capturing and restoring snapshots.\n\t * It's updated/manipulated through `bind:this` in `Root.svelte`.\n\t * @type {import('svelte').SvelteComponent[]}\n\t */\n\tconst components = [];\n\n\t/** @type {{id: string, promise: Promise<import('./types.js').NavigationResult>} | null} */\n\tlet load_cache = null;\n\n\tconst callbacks = {\n\t\t/** @type {Array<(navigation: import('@sveltejs/kit').BeforeNavigate) => void>} */\n\t\tbefore_navigate: [],\n\n\t\t/** @type {Array<(navigation: import('@sveltejs/kit').OnNavigate) => import('types').MaybePromise<(() => void) | void>>} */\n\t\ton_navigate: [],\n\n\t\t/** @type {Array<(navigation: import('@sveltejs/kit').AfterNavigate) => void>} */\n\t\tafter_navigate: []\n\t};\n\n\t/** @type {import('./types.js').NavigationState} */\n\tlet current = {\n\t\tbranch: [],\n\t\terror: null,\n\t\t// @ts-ignore - we need the initial value to be null\n\t\turl: null\n\t};\n\n\t/** this being true means we SSR'd */\n\tlet hydrated = false;\n\tlet started = false;\n\tlet autoscroll = true;\n\tlet updating = false;\n\tlet navigating = false;\n\tlet hash_navigating = false;\n\t/** True as soon as there happened one client-side navigation (excluding the SvelteKit-initialized initial one when in SPA mode) */\n\tlet has_navigated = false;\n\n\tlet force_invalidation = false;\n\n\t/** @type {import('svelte').SvelteComponent} */\n\tlet root;\n\n\t// keeping track of the history index in order to prevent popstate navigation events if needed\n\t/** @type {number} */\n\tlet current_history_index = history.state?.[HISTORY_INDEX];\n\n\t/** @type {number} */\n\tlet current_navigation_index = history.state?.[NAVIGATION_INDEX];\n\n\tif (!current_history_index) {\n\t\t// we use Date.now() as an offset so that cross-document navigations\n\t\t// within the app don't result in data loss\n\t\tcurrent_history_index = current_navigation_index = Date.now();\n\n\t\t// create initial history entry, so we can return here\n\t\toriginal_replace_state.call(\n\t\t\thistory,\n\t\t\t{\n\t\t\t\t...history.state,\n\t\t\t\t[HISTORY_INDEX]: current_history_index,\n\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index\n\t\t\t},\n\t\t\t'',\n\t\t\tlocation.href\n\t\t);\n\t}\n\n\t// if we reload the page, or Cmd-Shift-T back to it,\n\t// recover scroll position\n\tconst scroll = scroll_positions[current_history_index];\n\tif (scroll) {\n\t\thistory.scrollRestoration = 'manual';\n\t\tscrollTo(scroll.x, scroll.y);\n\t}\n\n\t/** @type {import('@sveltejs/kit').Page} */\n\tlet page;\n\n\t/** @type {{}} */\n\tlet token;\n\n\t/** @type {Promise<void> | null} */\n\tlet pending_invalidate;\n\n\tasync function invalidate() {\n\t\t// Accept all invalidations as they come, don't swallow any while another invalidation\n\t\t// is running because subsequent invalidations may make earlier ones outdated,\n\t\t// but batch multiple synchronous invalidations.\n\t\tawait (pending_invalidate ||= Promise.resolve());\n\t\tif (!pending_invalidate) return;\n\t\tpending_invalidate = null;\n\n\t\tconst intent = get_navigation_intent(current.url, true);\n\n\t\t// Clear preload, it might be affected by the invalidation.\n\t\t// Also solves an edge case where a preload is triggered, the navigation for it\n\t\t// was then triggered and is still running while the invalidation kicks in,\n\t\t// at which point the invalidation should take over and \"win\".\n\t\tload_cache = null;\n\n\t\tconst nav_token = (token = {});\n\t\tconst navigation_result = intent && (await load_route(intent));\n\t\tif (nav_token !== token) return;\n\n\t\tif (navigation_result) {\n\t\t\tif (navigation_result.type === 'redirect') {\n\t\t\t\tawait goto(new URL(navigation_result.location, current.url).href, {}, 1, nav_token);\n\t\t\t} else {\n\t\t\t\tif (navigation_result.props.page !== undefined) {\n\t\t\t\t\tpage = navigation_result.props.page;\n\t\t\t\t}\n\t\t\t\troot.$set(navigation_result.props);\n\t\t\t}\n\t\t}\n\n\t\tinvalidated.length = 0;\n\t}\n\n\t/** @param {number} index */\n\tfunction capture_snapshot(index) {\n\t\tif (components.some((c) => c?.snapshot)) {\n\t\t\tsnapshots[index] = components.map((c) => c?.snapshot?.capture());\n\t\t}\n\t}\n\n\t/** @param {number} index */\n\tfunction restore_snapshot(index) {\n\t\tsnapshots[index]?.forEach((value, i) => {\n\t\t\tcomponents[i]?.snapshot?.restore(value);\n\t\t});\n\t}\n\n\tfunction persist_state() {\n\t\tupdate_scroll_positions(current_history_index);\n\t\tstorage.set(SCROLL_KEY, scroll_positions);\n\n\t\tcapture_snapshot(current_navigation_index);\n\t\tstorage.set(SNAPSHOT_KEY, snapshots);\n\t\tstorage.set(STATES_KEY, states, devalue.stringify);\n\t}\n\n\t/**\n\t * @param {string | URL} url\n\t * @param {{ replaceState?: boolean; noScroll?: boolean; keepFocus?: boolean; invalidateAll?: boolean; state?: Record<string, any> }} options\n\t * @param {number} redirect_count\n\t * @param {{}} [nav_token]\n\t */\n\tasync function goto(url, options, redirect_count, nav_token) {\n\t\treturn navigate({\n\t\t\ttype: 'goto',\n\t\t\turl: resolve_url(url),\n\t\t\tkeepfocus: options.keepFocus,\n\t\t\tnoscroll: options.noScroll,\n\t\t\treplace_state: options.replaceState,\n\t\t\tredirect_count,\n\t\t\tstate: options.state,\n\t\t\tnav_token,\n\t\t\taccept: () => {\n\t\t\t\tif (options.invalidateAll) {\n\t\t\t\t\tforce_invalidation = true;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/** @param {import('./types.js').NavigationIntent} intent */\n\tasync function preload_data(intent) {\n\t\tload_cache = {\n\t\t\tid: intent.id,\n\t\t\tpromise: load_route(intent).then((result) => {\n\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t// Don't cache errors, because they might be transient\n\t\t\t\t\tload_cache = null;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t})\n\t\t};\n\n\t\treturn load_cache.promise;\n\t}\n\n\t/** @param {string} pathname */\n\tasync function preload_code(pathname) {\n\t\tconst route = routes.find((route) => route.exec(get_url_path(pathname)));\n\n\t\tif (route) {\n\t\t\tawait Promise.all([...route.layouts, route.leaf].map((load) => load?.[1]()));\n\t\t}\n\t}\n\n\t/** @param {import('./types.js').NavigationFinished} result */\n\tfunction initialize(result) {\n\t\tif (DEV && result.state.error && document.querySelector('vite-error-overlay')) return;\n\n\t\tcurrent = result.state;\n\n\t\tconst style = document.querySelector('style[data-sveltekit]');\n\t\tif (style) style.remove();\n\n\t\tpage = /** @type {import('@sveltejs/kit').Page} */ (result.props.page);\n\n\t\troot = new app.root({\n\t\t\ttarget,\n\t\t\tprops: { ...result.props, stores, components },\n\t\t\thydrate: true\n\t\t});\n\n\t\trestore_snapshot(current_navigation_index);\n\n\t\t/** @type {import('@sveltejs/kit').AfterNavigate} */\n\t\tconst navigation = {\n\t\t\tfrom: null,\n\t\t\tto: {\n\t\t\t\tparams: current.params,\n\t\t\t\troute: { id: current.route?.id ?? null },\n\t\t\t\turl: new URL(location.href)\n\t\t\t},\n\t\t\twillUnload: false,\n\t\t\ttype: 'enter',\n\t\t\tcomplete: Promise.resolve()\n\t\t};\n\t\tcallbacks.after_navigate.forEach((fn) => fn(navigation));\n\n\t\tstarted = true;\n\t}\n\n\t/**\n\t *\n\t * @param {{\n\t *   url: URL;\n\t *   params: Record<string, string>;\n\t *   branch: Array<import('./types.js').BranchNode | undefined>;\n\t *   status: number;\n\t *   error: App.Error | null;\n\t *   route: import('types').CSRRoute | null;\n\t *   form?: Record<string, any> | null;\n\t * }} opts\n\t */\n\tasync function get_navigation_result_from_branch({\n\t\turl,\n\t\tparams,\n\t\tbranch,\n\t\tstatus,\n\t\terror,\n\t\troute,\n\t\tform\n\t}) {\n\t\t/** @type {import('types').TrailingSlash} */\n\t\tlet slash = 'never';\n\t\tfor (const node of branch) {\n\t\t\tif (node?.slash !== undefined) slash = node.slash;\n\t\t}\n\t\turl.pathname = normalize_path(url.pathname, slash);\n\t\t// eslint-disable-next-line\n\t\turl.search = url.search; // turn `/?` into `/`\n\n\t\t/** @type {import('./types.js').NavigationFinished} */\n\t\tconst result = {\n\t\t\ttype: 'loaded',\n\t\t\tstate: {\n\t\t\t\turl,\n\t\t\t\tparams,\n\t\t\t\tbranch,\n\t\t\t\terror,\n\t\t\t\troute\n\t\t\t},\n\t\t\tprops: {\n\t\t\t\t// @ts-ignore Somehow it's getting SvelteComponent and SvelteComponentDev mixed up\n\t\t\t\tconstructors: compact(branch).map((branch_node) => branch_node.node.component),\n\t\t\t\tpage\n\t\t\t}\n\t\t};\n\n\t\tif (form !== undefined) {\n\t\t\tresult.props.form = form;\n\t\t}\n\n\t\tlet data = {};\n\t\tlet data_changed = !page;\n\n\t\tlet p = 0;\n\n\t\tfor (let i = 0; i < Math.max(branch.length, current.branch.length); i += 1) {\n\t\t\tconst node = branch[i];\n\t\t\tconst prev = current.branch[i];\n\n\t\t\tif (node?.data !== prev?.data) data_changed = true;\n\t\t\tif (!node) continue;\n\n\t\t\tdata = { ...data, ...node.data };\n\n\t\t\t// Only set props if the node actually updated. This prevents needless rerenders.\n\t\t\tif (data_changed) {\n\t\t\t\tresult.props[`data_${p}`] = data;\n\t\t\t}\n\n\t\t\tp += 1;\n\t\t}\n\n\t\tconst page_changed =\n\t\t\t!current.url ||\n\t\t\turl.href !== current.url.href ||\n\t\t\tcurrent.error !== error ||\n\t\t\t(form !== undefined && form !== page.form) ||\n\t\t\tdata_changed;\n\n\t\tif (page_changed) {\n\t\t\tresult.props.page = {\n\t\t\t\terror,\n\t\t\t\tparams,\n\t\t\t\troute: {\n\t\t\t\t\tid: route?.id ?? null\n\t\t\t\t},\n\t\t\t\tstate: {},\n\t\t\t\tstatus,\n\t\t\t\turl: new URL(url),\n\t\t\t\tform: form ?? null,\n\t\t\t\t// The whole page store is updated, but this way the object reference stays the same\n\t\t\t\tdata: data_changed ? data : page.data\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Call the load function of the given node, if it exists.\n\t * If `server_data` is passed, this is treated as the initial run and the page endpoint is not requested.\n\t *\n\t * @param {{\n\t *   loader: import('types').CSRPageNodeLoader;\n\t * \t parent: () => Promise<Record<string, any>>;\n\t *   url: URL;\n\t *   params: Record<string, string>;\n\t *   route: { id: string | null };\n\t * \t server_data_node: import('./types.js').DataNode | null;\n\t * }} options\n\t * @returns {Promise<import('./types.js').BranchNode>}\n\t */\n\tasync function load_node({ loader, parent, url, params, route, server_data_node }) {\n\t\t/** @type {Record<string, any> | null} */\n\t\tlet data = null;\n\n\t\tlet is_tracking = true;\n\n\t\t/** @type {import('types').Uses} */\n\t\tconst uses = {\n\t\t\tdependencies: new Set(),\n\t\t\tparams: new Set(),\n\t\t\tparent: false,\n\t\t\troute: false,\n\t\t\turl: false,\n\t\t\tsearch_params: new Set()\n\t\t};\n\n\t\tconst node = await loader();\n\n\t\tif (DEV) {\n\t\t\tvalidate_page_exports(node.universal);\n\t\t}\n\n\t\tif (node.universal?.load) {\n\t\t\t/** @param {string[]} deps */\n\t\t\tfunction depends(...deps) {\n\t\t\t\tfor (const dep of deps) {\n\t\t\t\t\tif (DEV) validate_depends(/** @type {string} */ (route.id), dep);\n\n\t\t\t\t\tconst { href } = new URL(dep, url);\n\t\t\t\t\tuses.dependencies.add(href);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/** @type {import('@sveltejs/kit').LoadEvent} */\n\t\t\tconst load_input = {\n\t\t\t\troute: new Proxy(route, {\n\t\t\t\t\tget: (target, key) => {\n\t\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\t\tuses.route = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn target[/** @type {'id'} */ (key)];\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tparams: new Proxy(params, {\n\t\t\t\t\tget: (target, key) => {\n\t\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\t\tuses.params.add(/** @type {string} */ (key));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn target[/** @type {string} */ (key)];\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tdata: server_data_node?.data ?? null,\n\t\t\t\turl: make_trackable(\n\t\t\t\t\turl,\n\t\t\t\t\t() => {\n\t\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\t\tuses.url = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t(param) => {\n\t\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\t\tuses.search_params.add(param);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tasync fetch(resource, init) {\n\t\t\t\t\t/** @type {URL | string} */\n\t\t\t\t\tlet requested;\n\n\t\t\t\t\tif (resource instanceof Request) {\n\t\t\t\t\t\trequested = resource.url;\n\n\t\t\t\t\t\t// we're not allowed to modify the received `Request` object, so in order\n\t\t\t\t\t\t// to fixup relative urls we create a new equivalent `init` object instead\n\t\t\t\t\t\tinit = {\n\t\t\t\t\t\t\t// the request body must be consumed in memory until browsers\n\t\t\t\t\t\t\t// implement streaming request bodies and/or the body getter\n\t\t\t\t\t\t\tbody:\n\t\t\t\t\t\t\t\tresource.method === 'GET' || resource.method === 'HEAD'\n\t\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t\t: await resource.blob(),\n\t\t\t\t\t\t\tcache: resource.cache,\n\t\t\t\t\t\t\tcredentials: resource.credentials,\n\t\t\t\t\t\t\theaders: resource.headers,\n\t\t\t\t\t\t\tintegrity: resource.integrity,\n\t\t\t\t\t\t\tkeepalive: resource.keepalive,\n\t\t\t\t\t\t\tmethod: resource.method,\n\t\t\t\t\t\t\tmode: resource.mode,\n\t\t\t\t\t\t\tredirect: resource.redirect,\n\t\t\t\t\t\t\treferrer: resource.referrer,\n\t\t\t\t\t\t\treferrerPolicy: resource.referrerPolicy,\n\t\t\t\t\t\t\tsignal: resource.signal,\n\t\t\t\t\t\t\t...init\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequested = resource;\n\t\t\t\t\t}\n\n\t\t\t\t\t// we must fixup relative urls so they are resolved from the target page\n\t\t\t\t\tconst resolved = new URL(requested, url);\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tdepends(resolved.href);\n\t\t\t\t\t}\n\n\t\t\t\t\t// match ssr serialized data url, which is important to find cached responses\n\t\t\t\t\tif (resolved.origin === url.origin) {\n\t\t\t\t\t\trequested = resolved.href.slice(url.origin.length);\n\t\t\t\t\t}\n\n\t\t\t\t\t// prerendered pages may be served from any origin, so `initial_fetch` urls shouldn't be resolved\n\t\t\t\t\treturn started\n\t\t\t\t\t\t? subsequent_fetch(requested, resolved.href, init)\n\t\t\t\t\t\t: initial_fetch(requested, init);\n\t\t\t\t},\n\t\t\t\tsetHeaders: () => {}, // noop\n\t\t\t\tdepends,\n\t\t\t\tparent() {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.parent = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn parent();\n\t\t\t\t},\n\t\t\t\tuntrack(fn) {\n\t\t\t\t\tis_tracking = false;\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn fn();\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tis_tracking = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (DEV) {\n\t\t\t\ttry {\n\t\t\t\t\tlock_fetch();\n\t\t\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t\t\t\tif (data != null && Object.getPrototypeOf(data) !== Object.prototype) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`a load function related to route '${route.id}' returned ${\n\t\t\t\t\t\t\t\ttypeof data !== 'object'\n\t\t\t\t\t\t\t\t\t? `a ${typeof data}`\n\t\t\t\t\t\t\t\t\t: data instanceof Response\n\t\t\t\t\t\t\t\t\t\t? 'a Response object'\n\t\t\t\t\t\t\t\t\t\t: Array.isArray(data)\n\t\t\t\t\t\t\t\t\t\t\t? 'an array'\n\t\t\t\t\t\t\t\t\t\t\t: 'a non-plain object'\n\t\t\t\t\t\t\t}, but must return a plain object at the top level (i.e. \\`return {...}\\`)`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tunlock_fetch();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tnode,\n\t\t\tloader,\n\t\t\tserver: server_data_node,\n\t\t\tuniversal: node.universal?.load ? { type: 'data', data, uses } : null,\n\t\t\tdata: data ?? server_data_node?.data ?? null,\n\t\t\t// if `paths.base === '/a/b/c`, then the root route is always `/a/b/c/`, regardless of\n\t\t\t// the `trailingSlash` route option, so that relative paths to JS and CSS work\n\t\t\tslash:\n\t\t\t\tbase && (url.pathname === base || url.pathname === base + '/')\n\t\t\t\t\t? 'always'\n\t\t\t\t\t: node.universal?.trailingSlash ?? server_data_node?.slash\n\t\t};\n\t}\n\n\t/**\n\t * @param {boolean} parent_changed\n\t * @param {boolean} route_changed\n\t * @param {boolean} url_changed\n\t * @param {Set<string>} search_params_changed\n\t * @param {import('types').Uses | undefined} uses\n\t * @param {Record<string, string>} params\n\t */\n\tfunction has_changed(\n\t\tparent_changed,\n\t\troute_changed,\n\t\turl_changed,\n\t\tsearch_params_changed,\n\t\tuses,\n\t\tparams\n\t) {\n\t\tif (force_invalidation) return true;\n\n\t\tif (!uses) return false;\n\n\t\tif (uses.parent && parent_changed) return true;\n\t\tif (uses.route && route_changed) return true;\n\t\tif (uses.url && url_changed) return true;\n\n\t\tfor (const tracked_params of uses.search_params) {\n\t\t\tif (search_params_changed.has(tracked_params)) return true;\n\t\t}\n\n\t\tfor (const param of uses.params) {\n\t\t\tif (params[param] !== current.params[param]) return true;\n\t\t}\n\n\t\tfor (const href of uses.dependencies) {\n\t\t\tif (invalidated.some((fn) => fn(new URL(href)))) return true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {import('types').ServerDataNode | import('types').ServerDataSkippedNode | null} node\n\t * @param {import('./types.js').DataNode | null} [previous]\n\t * @returns {import('./types.js').DataNode | null}\n\t */\n\tfunction create_data_node(node, previous) {\n\t\tif (node?.type === 'data') return node;\n\t\tif (node?.type === 'skip') return previous ?? null;\n\t\treturn null;\n\t}\n\n\t/**\n\t *\n\t * @param {URL | null} old_url\n\t * @param {URL} new_url\n\t */\n\tfunction diff_search_params(old_url, new_url) {\n\t\tif (!old_url) return new Set(new_url.searchParams.keys());\n\n\t\tconst changed = new Set([...old_url.searchParams.keys(), ...new_url.searchParams.keys()]);\n\n\t\tfor (const key of changed) {\n\t\t\tconst old_values = old_url.searchParams.getAll(key);\n\t\t\tconst new_values = new_url.searchParams.getAll(key);\n\n\t\t\tif (\n\t\t\t\told_values.every((value) => new_values.includes(value)) &&\n\t\t\t\tnew_values.every((value) => old_values.includes(value))\n\t\t\t) {\n\t\t\t\tchanged.delete(key);\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\t/**\n\t * @param {import('./types.js').NavigationIntent} intent\n\t * @returns {Promise<import('./types.js').NavigationResult>}\n\t */\n\tasync function load_route({ id, invalidating, url, params, route }) {\n\t\tif (load_cache?.id === id) {\n\t\t\treturn load_cache.promise;\n\t\t}\n\n\t\tconst { errors, layouts, leaf } = route;\n\n\t\tconst loaders = [...layouts, leaf];\n\n\t\t// preload modules to avoid waterfall, but handle rejections\n\t\t// so they don't get reported to Sentry et al (we don't need\n\t\t// to act on the failures at this point)\n\t\terrors.forEach((loader) => loader?.().catch(() => {}));\n\t\tloaders.forEach((loader) => loader?.[1]().catch(() => {}));\n\n\t\t/** @type {import('types').ServerNodesResponse | import('types').ServerRedirectNode | null} */\n\t\tlet server_data = null;\n\t\tconst url_changed = current.url ? id !== current.url.pathname + current.url.search : false;\n\t\tconst route_changed = current.route ? route.id !== current.route.id : false;\n\t\tconst search_params_changed = diff_search_params(current.url, url);\n\n\t\tlet parent_invalid = false;\n\t\tconst invalid_server_nodes = loaders.map((loader, i) => {\n\t\t\tconst previous = current.branch[i];\n\n\t\t\tconst invalid =\n\t\t\t\t!!loader?.[0] &&\n\t\t\t\t(previous?.loader !== loader[1] ||\n\t\t\t\t\thas_changed(\n\t\t\t\t\t\tparent_invalid,\n\t\t\t\t\t\troute_changed,\n\t\t\t\t\t\turl_changed,\n\t\t\t\t\t\tsearch_params_changed,\n\t\t\t\t\t\tprevious.server?.uses,\n\t\t\t\t\t\tparams\n\t\t\t\t\t));\n\n\t\t\tif (invalid) {\n\t\t\t\t// For the next one\n\t\t\t\tparent_invalid = true;\n\t\t\t}\n\n\t\t\treturn invalid;\n\t\t});\n\n\t\tif (invalid_server_nodes.some(Boolean)) {\n\t\t\ttry {\n\t\t\t\tserver_data = await load_data(url, invalid_server_nodes);\n\t\t\t} catch (error) {\n\t\t\t\treturn load_root_error_page({\n\t\t\t\t\tstatus: get_status(error),\n\t\t\t\t\terror: await handle_error(error, { url, params, route: { id: route.id } }),\n\t\t\t\t\turl,\n\t\t\t\t\troute\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (server_data.type === 'redirect') {\n\t\t\t\treturn server_data;\n\t\t\t}\n\t\t}\n\n\t\tconst server_data_nodes = server_data?.nodes;\n\n\t\tlet parent_changed = false;\n\n\t\tconst branch_promises = loaders.map(async (loader, i) => {\n\t\t\tif (!loader) return;\n\n\t\t\t/** @type {import('./types.js').BranchNode | undefined} */\n\t\t\tconst previous = current.branch[i];\n\n\t\t\tconst server_data_node = server_data_nodes?.[i];\n\n\t\t\t// re-use data from previous load if it's still valid\n\t\t\tconst valid =\n\t\t\t\t(!server_data_node || server_data_node.type === 'skip') &&\n\t\t\t\tloader[1] === previous?.loader &&\n\t\t\t\t!has_changed(\n\t\t\t\t\tparent_changed,\n\t\t\t\t\troute_changed,\n\t\t\t\t\turl_changed,\n\t\t\t\t\tsearch_params_changed,\n\t\t\t\t\tprevious.universal?.uses,\n\t\t\t\t\tparams\n\t\t\t\t);\n\t\t\tif (valid) return previous;\n\n\t\t\tparent_changed = true;\n\n\t\t\tif (server_data_node?.type === 'error') {\n\t\t\t\t// rethrow and catch below\n\t\t\t\tthrow server_data_node;\n\t\t\t}\n\n\t\t\treturn load_node({\n\t\t\t\tloader: loader[1],\n\t\t\t\turl,\n\t\t\t\tparams,\n\t\t\t\troute,\n\t\t\t\tparent: async () => {\n\t\t\t\t\tconst data = {};\n\t\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\t\tObject.assign(data, (await branch_promises[j])?.data);\n\t\t\t\t\t}\n\t\t\t\t\treturn data;\n\t\t\t\t},\n\t\t\t\tserver_data_node: create_data_node(\n\t\t\t\t\t// server_data_node is undefined if it wasn't reloaded from the server;\n\t\t\t\t\t// and if current loader uses server data, we want to reuse previous data.\n\t\t\t\t\tserver_data_node === undefined && loader[0] ? { type: 'skip' } : server_data_node ?? null,\n\t\t\t\t\tloader[0] ? previous?.server : undefined\n\t\t\t\t)\n\t\t\t});\n\t\t});\n\n\t\t// if we don't do this, rejections will be unhandled\n\t\tfor (const p of branch_promises) p.catch(() => {});\n\n\t\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\t\tconst branch = [];\n\n\t\tfor (let i = 0; i < loaders.length; i += 1) {\n\t\t\tif (loaders[i]) {\n\t\t\t\ttry {\n\t\t\t\t\tbranch.push(await branch_promises[i]);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (err instanceof Redirect) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: 'redirect',\n\t\t\t\t\t\t\tlocation: err.location\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tlet status = get_status(err);\n\t\t\t\t\t/** @type {App.Error} */\n\t\t\t\t\tlet error;\n\n\t\t\t\t\tif (server_data_nodes?.includes(/** @type {import('types').ServerErrorNode} */ (err))) {\n\t\t\t\t\t\t// this is the server error rethrown above, reconstruct but don't invoke\n\t\t\t\t\t\t// the client error handler; it should've already been handled on the server\n\t\t\t\t\t\tstatus = /** @type {import('types').ServerErrorNode} */ (err).status ?? status;\n\t\t\t\t\t\terror = /** @type {import('types').ServerErrorNode} */ (err).error;\n\t\t\t\t\t} else if (err instanceof HttpError) {\n\t\t\t\t\t\terror = err.body;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Referenced node could have been removed due to redeploy, check\n\t\t\t\t\t\tconst updated = await stores.updated.check();\n\t\t\t\t\t\tif (updated) {\n\t\t\t\t\t\t\treturn await native_navigation(url);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\terror = await handle_error(err, { params, url, route: { id: route.id } });\n\t\t\t\t\t}\n\n\t\t\t\t\tconst error_load = await load_nearest_error_page(i, branch, errors);\n\t\t\t\t\tif (error_load) {\n\t\t\t\t\t\treturn await get_navigation_result_from_branch({\n\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\tparams,\n\t\t\t\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\t\t\t\tstatus,\n\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\troute\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if we get here, it's because the root `load` function failed,\n\t\t\t\t\t\t// and we need to fall back to the server\n\t\t\t\t\t\treturn await server_fallback(url, { id: route.id }, error, status);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// push an empty slot so we can rewind past gaps to the\n\t\t\t\t// layout that corresponds with an +error.svelte page\n\t\t\t\tbranch.push(undefined);\n\t\t\t}\n\t\t}\n\n\t\treturn await get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\tstatus: 200,\n\t\t\terror: null,\n\t\t\troute,\n\t\t\t// Reset `form` on navigation, but not invalidation\n\t\t\tform: invalidating ? undefined : null\n\t\t});\n\t}\n\n\t/**\n\t * @param {number} i Start index to backtrack from\n\t * @param {Array<import('./types.js').BranchNode | undefined>} branch Branch to backtrack\n\t * @param {Array<import('types').CSRPageNodeLoader | undefined>} errors All error pages for this branch\n\t * @returns {Promise<{idx: number; node: import('./types.js').BranchNode} | undefined>}\n\t */\n\tasync function load_nearest_error_page(i, branch, errors) {\n\t\twhile (i--) {\n\t\t\tif (errors[i]) {\n\t\t\t\tlet j = i;\n\t\t\t\twhile (!branch[j]) j -= 1;\n\t\t\t\ttry {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tidx: j + 1,\n\t\t\t\t\t\tnode: {\n\t\t\t\t\t\t\tnode: await /** @type {import('types').CSRPageNodeLoader } */ (errors[i])(),\n\t\t\t\t\t\t\tloader: /** @type {import('types').CSRPageNodeLoader } */ (errors[i]),\n\t\t\t\t\t\t\tdata: {},\n\t\t\t\t\t\t\tserver: null,\n\t\t\t\t\t\t\tuniversal: null\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {{\n\t *   status: number;\n\t *   error: App.Error;\n\t *   url: URL;\n\t *   route: { id: string | null }\n\t * }} opts\n\t * @returns {Promise<import('./types.js').NavigationFinished>}\n\t */\n\tasync function load_root_error_page({ status, error, url, route }) {\n\t\t/** @type {Record<string, string>} */\n\t\tconst params = {}; // error page does not have params\n\n\t\t/** @type {import('types').ServerDataNode | null} */\n\t\tlet server_data_node = null;\n\n\t\tconst default_layout_has_server_load = app.server_loads[0] === 0;\n\n\t\tif (default_layout_has_server_load) {\n\t\t\t// TODO post-https://github.com/sveltejs/kit/discussions/6124 we can use\n\t\t\t// existing root layout data\n\t\t\ttry {\n\t\t\t\tconst server_data = await load_data(url, [true]);\n\n\t\t\t\tif (\n\t\t\t\t\tserver_data.type !== 'data' ||\n\t\t\t\t\t(server_data.nodes[0] && server_data.nodes[0].type !== 'data')\n\t\t\t\t) {\n\t\t\t\t\tthrow 0;\n\t\t\t\t}\n\n\t\t\t\tserver_data_node = server_data.nodes[0] ?? null;\n\t\t\t} catch {\n\t\t\t\t// at this point we have no choice but to fall back to the server, if it wouldn't\n\t\t\t\t// bring us right back here, turning this into an endless loop\n\t\t\t\tif (url.origin !== origin || url.pathname !== location.pathname || hydrated) {\n\t\t\t\t\tawait native_navigation(url);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst root_layout = await load_node({\n\t\t\tloader: default_layout_loader,\n\t\t\turl,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tparent: () => Promise.resolve({}),\n\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t});\n\n\t\t/** @type {import('./types.js').BranchNode} */\n\t\tconst root_error = {\n\t\t\tnode: await default_error_loader(),\n\t\t\tloader: default_error_loader,\n\t\t\tuniversal: null,\n\t\t\tserver: null,\n\t\t\tdata: null\n\t\t};\n\n\t\treturn await get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch: [root_layout, root_error],\n\t\t\tstatus,\n\t\t\terror,\n\t\t\troute: null\n\t\t});\n\t}\n\n\t/**\n\t * @param {URL} url\n\t * @param {boolean} invalidating\n\t */\n\tfunction get_navigation_intent(url, invalidating) {\n\t\tif (is_external_url(url, base)) return;\n\n\t\tconst path = get_url_path(url.pathname);\n\n\t\tfor (const route of routes) {\n\t\t\tconst params = route.exec(path);\n\n\t\t\tif (params) {\n\t\t\t\tconst id = url.pathname + url.search;\n\t\t\t\t/** @type {import('./types.js').NavigationIntent} */\n\t\t\t\tconst intent = { id, invalidating, route, params: decode_params(params), url };\n\t\t\t\treturn intent;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @param {string} pathname */\n\tfunction get_url_path(pathname) {\n\t\treturn decode_pathname(pathname.slice(base.length) || '/');\n\t}\n\n\t/**\n\t * @param {{\n\t *   url: URL;\n\t *   type: import('@sveltejs/kit').Navigation[\"type\"];\n\t *   intent?: import('./types.js').NavigationIntent;\n\t *   delta?: number;\n\t * }} opts\n\t */\n\tfunction before_navigate({ url, type, intent, delta }) {\n\t\tlet should_block = false;\n\n\t\tconst nav = create_navigation(current, intent, url, type);\n\n\t\tif (delta !== undefined) {\n\t\t\tnav.navigation.delta = delta;\n\t\t}\n\n\t\tconst cancellable = {\n\t\t\t...nav.navigation,\n\t\t\tcancel: () => {\n\t\t\t\tshould_block = true;\n\t\t\t\tnav.reject(new Error('navigation was cancelled'));\n\t\t\t}\n\t\t};\n\n\t\tif (!navigating) {\n\t\t\t// Don't run the event during redirects\n\t\t\tcallbacks.before_navigate.forEach((fn) => fn(cancellable));\n\t\t}\n\n\t\treturn should_block ? null : nav;\n\t}\n\n\t/**\n\t * @param {{\n\t *   type: import('@sveltejs/kit').Navigation[\"type\"];\n\t *   url: URL;\n\t *   popped?: {\n\t *     state: Record<string, any>;\n\t *     scroll: { x: number, y: number };\n\t *     delta: number;\n\t *   };\n\t *   keepfocus?: boolean;\n\t *   noscroll?: boolean;\n\t *   replace_state?: boolean;\n\t *   state?: Record<string, any>;\n\t *   redirect_count?: number;\n\t *   nav_token?: {};\n\t *   accept?: () => void;\n\t *   block?: () => void;\n\t * }} opts\n\t */\n\tasync function navigate({\n\t\ttype,\n\t\turl,\n\t\tpopped,\n\t\tkeepfocus,\n\t\tnoscroll,\n\t\treplace_state,\n\t\tstate = {},\n\t\tredirect_count = 0,\n\t\tnav_token = {},\n\t\taccept = noop,\n\t\tblock = noop\n\t}) {\n\t\tconst intent = get_navigation_intent(url, false);\n\t\tconst nav = before_navigate({ url, type, delta: popped?.delta, intent });\n\n\t\tif (!nav) {\n\t\t\tblock();\n\t\t\treturn;\n\t\t}\n\n\t\t// store this before calling `accept()`, which may change the index\n\t\tconst previous_history_index = current_history_index;\n\t\tconst previous_navigation_index = current_navigation_index;\n\n\t\taccept();\n\n\t\tnavigating = true;\n\n\t\tif (started) {\n\t\t\tstores.navigating.set(nav.navigation);\n\t\t}\n\n\t\ttoken = nav_token;\n\t\tlet navigation_result = intent && (await load_route(intent));\n\n\t\tif (!navigation_result) {\n\t\t\tif (is_external_url(url, base)) {\n\t\t\t\treturn await native_navigation(url);\n\t\t\t}\n\t\t\tnavigation_result = await server_fallback(\n\t\t\t\turl,\n\t\t\t\t{ id: null },\n\t\t\t\tawait handle_error(new SvelteKitError(404, 'Not Found', `Not found: ${url.pathname}`), {\n\t\t\t\t\turl,\n\t\t\t\t\tparams: {},\n\t\t\t\t\troute: { id: null }\n\t\t\t\t}),\n\t\t\t\t404\n\t\t\t);\n\t\t}\n\n\t\t// if this is an internal navigation intent, use the normalized\n\t\t// URL for the rest of the function\n\t\turl = intent?.url || url;\n\n\t\t// abort if user navigated during update\n\t\tif (token !== nav_token) {\n\t\t\tnav.reject(new Error('navigation was aborted'));\n\t\t\treturn false;\n\t\t}\n\n\t\tif (navigation_result.type === 'redirect') {\n\t\t\t// whatwg fetch spec https://fetch.spec.whatwg.org/#http-redirect-fetch says to error after 20 redirects\n\t\t\tif (redirect_count >= 20) {\n\t\t\t\tnavigation_result = await load_root_error_page({\n\t\t\t\t\tstatus: 500,\n\t\t\t\t\terror: await handle_error(new Error('Redirect loop'), {\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams: {},\n\t\t\t\t\t\troute: { id: null }\n\t\t\t\t\t}),\n\t\t\t\t\turl,\n\t\t\t\t\troute: { id: null }\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tgoto(new URL(navigation_result.location, url).href, {}, redirect_count + 1, nav_token);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (/** @type {number} */ (navigation_result.props.page.status) >= 400) {\n\t\t\tconst updated = await stores.updated.check();\n\t\t\tif (updated) {\n\t\t\t\tawait native_navigation(url);\n\t\t\t}\n\t\t}\n\n\t\t// reset invalidation only after a finished navigation. If there are redirects or\n\t\t// additional invalidations, they should get the same invalidation treatment\n\t\tinvalidated.length = 0;\n\t\tforce_invalidation = false;\n\n\t\tupdating = true;\n\n\t\tupdate_scroll_positions(previous_history_index);\n\t\tcapture_snapshot(previous_navigation_index);\n\n\t\t// ensure the url pathname matches the page's trailing slash option\n\t\tif (navigation_result.props.page.url.pathname !== url.pathname) {\n\t\t\turl.pathname = navigation_result.props.page.url.pathname;\n\t\t}\n\n\t\tstate = popped ? popped.state : state;\n\n\t\tif (!popped) {\n\t\t\t// this is a new navigation, rather than a popstate\n\t\t\tconst change = replace_state ? 0 : 1;\n\n\t\t\tconst entry = {\n\t\t\t\t[HISTORY_INDEX]: (current_history_index += change),\n\t\t\t\t[NAVIGATION_INDEX]: (current_navigation_index += change)\n\t\t\t};\n\n\t\t\tconst fn = replace_state ? original_replace_state : original_push_state;\n\t\t\tfn.call(history, entry, '', url);\n\n\t\t\tif (!replace_state) {\n\t\t\t\tclear_onward_history(current_history_index, current_navigation_index);\n\t\t\t}\n\t\t}\n\n\t\tstates[current_history_index] = state;\n\n\t\t// reset preload synchronously after the history state has been set to avoid race conditions\n\t\tload_cache = null;\n\n\t\tnavigation_result.props.page.state = state;\n\n\t\tif (started) {\n\t\t\tcurrent = navigation_result.state;\n\n\t\t\t// reset url before updating page store\n\t\t\tif (navigation_result.props.page) {\n\t\t\t\tnavigation_result.props.page.url = url;\n\t\t\t}\n\n\t\t\tconst after_navigate = (\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tcallbacks.on_navigate.map((fn) =>\n\t\t\t\t\t\tfn(/** @type {import('@sveltejs/kit').OnNavigate} */ (nav.navigation))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t).filter((value) => typeof value === 'function');\n\n\t\t\tif (after_navigate.length > 0) {\n\t\t\t\tfunction cleanup() {\n\t\t\t\t\tcallbacks.after_navigate = callbacks.after_navigate.filter(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t(fn) => !after_navigate.includes(fn)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tafter_navigate.push(cleanup);\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tcallbacks.after_navigate.push(...after_navigate);\n\t\t\t}\n\n\t\t\troot.$set(navigation_result.props);\n\t\t\thas_navigated = true;\n\t\t} else {\n\t\t\tinitialize(navigation_result);\n\t\t}\n\n\t\tconst { activeElement } = document;\n\n\t\t// need to render the DOM before we can scroll to the rendered elements and do focus management\n\t\tawait tick();\n\n\t\t// we reset scroll before dealing with focus, to avoid a flash of unscrolled content\n\t\tconst scroll = popped ? popped.scroll : noscroll ? scroll_state() : null;\n\n\t\tif (autoscroll) {\n\t\t\tconst deep_linked =\n\t\t\t\turl.hash && document.getElementById(decodeURIComponent(url.hash.slice(1)));\n\t\t\tif (scroll) {\n\t\t\t\tscrollTo(scroll.x, scroll.y);\n\t\t\t} else if (deep_linked) {\n\t\t\t\t// Here we use `scrollIntoView` on the element instead of `scrollTo`\n\t\t\t\t// because it natively supports the `scroll-margin` and `scroll-behavior`\n\t\t\t\t// CSS properties.\n\t\t\t\tdeep_linked.scrollIntoView();\n\t\t\t} else {\n\t\t\t\tscrollTo(0, 0);\n\t\t\t}\n\t\t}\n\n\t\tconst changed_focus =\n\t\t\t// reset focus only if any manual focus management didn't override it\n\t\t\tdocument.activeElement !== activeElement &&\n\t\t\t// also refocus when activeElement is body already because the\n\t\t\t// focus event might not have been fired on it yet\n\t\t\tdocument.activeElement !== document.body;\n\n\t\tif (!keepfocus && !changed_focus) {\n\t\t\treset_focus();\n\t\t}\n\n\t\tautoscroll = true;\n\n\t\tif (navigation_result.props.page) {\n\t\t\tpage = navigation_result.props.page;\n\t\t}\n\n\t\tnavigating = false;\n\n\t\tif (type === 'popstate') {\n\t\t\trestore_snapshot(current_navigation_index);\n\t\t}\n\n\t\tnav.fulfil(undefined);\n\n\t\tcallbacks.after_navigate.forEach((fn) =>\n\t\t\tfn(/** @type {import('@sveltejs/kit').AfterNavigate} */ (nav.navigation))\n\t\t);\n\t\tstores.navigating.set(null);\n\n\t\tupdating = false;\n\t}\n\n\t/**\n\t * Does a full page reload if it wouldn't result in an endless loop in the SPA case\n\t * @param {URL} url\n\t * @param {{ id: string | null }} route\n\t * @param {App.Error} error\n\t * @param {number} status\n\t * @returns {Promise<import('./types.js').NavigationFinished>}\n\t */\n\tasync function server_fallback(url, route, error, status) {\n\t\tif (url.origin === origin && url.pathname === location.pathname && !hydrated) {\n\t\t\t// We would reload the same page we're currently on, which isn't hydrated,\n\t\t\t// which means no SSR, which means we would end up in an endless loop\n\t\t\treturn await load_root_error_page({\n\t\t\t\tstatus,\n\t\t\t\terror,\n\t\t\t\turl,\n\t\t\t\troute\n\t\t\t});\n\t\t}\n\n\t\tif (DEV && status !== 404) {\n\t\t\tconsole.error(\n\t\t\t\t'An error occurred while loading the page. This will cause a full page reload. (This message will only appear during development.)'\n\t\t\t);\n\n\t\t\tdebugger; // eslint-disable-line\n\t\t}\n\n\t\treturn await native_navigation(url);\n\t}\n\n\tif (import.meta.hot) {\n\t\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\t\tif (current.error) location.reload();\n\t\t});\n\t}\n\n\tfunction setup_preload() {\n\t\t/** @type {NodeJS.Timeout} */\n\t\tlet mousemove_timeout;\n\n\t\tcontainer.addEventListener('mousemove', (event) => {\n\t\t\tconst target = /** @type {Element} */ (event.target);\n\n\t\t\tclearTimeout(mousemove_timeout);\n\t\t\tmousemove_timeout = setTimeout(() => {\n\t\t\t\tpreload(target, 2);\n\t\t\t}, 20);\n\t\t});\n\n\t\t/** @param {Event} event */\n\t\tfunction tap(event) {\n\t\t\tpreload(/** @type {Element} */ (event.composedPath()[0]), 1);\n\t\t}\n\n\t\tcontainer.addEventListener('mousedown', tap);\n\t\tcontainer.addEventListener('touchstart', tap, { passive: true });\n\n\t\tconst observer = new IntersectionObserver(\n\t\t\t(entries) => {\n\t\t\t\tfor (const entry of entries) {\n\t\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\t\tpreload_code(/** @type {HTMLAnchorElement} */ (entry.target).href);\n\t\t\t\t\t\tobserver.unobserve(entry.target);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ threshold: 0 }\n\t\t);\n\n\t\t/**\n\t\t * @param {Element} element\n\t\t * @param {number} priority\n\t\t */\n\t\tfunction preload(element, priority) {\n\t\t\tconst a = find_anchor(element, container);\n\t\t\tif (!a) return;\n\n\t\t\tconst { url, external, download } = get_link_info(a, base);\n\t\t\tif (external || download) return;\n\n\t\t\tconst options = get_router_options(a);\n\n\t\t\tif (!options.reload) {\n\t\t\t\tif (priority <= options.preload_data) {\n\t\t\t\t\tconst intent = get_navigation_intent(/** @type {URL} */ (url), false);\n\t\t\t\t\tif (intent) {\n\t\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\t\tpreload_data(intent).then((result) => {\n\t\t\t\t\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\t\t\t`Preloading data for ${intent.url.pathname} failed with the following error: ${result.state.error.message}\\n` +\n\t\t\t\t\t\t\t\t\t\t\t'If this error is transient, you can ignore it. Otherwise, consider disabling preloading for this route. ' +\n\t\t\t\t\t\t\t\t\t\t\t'This route was preloaded due to a data-sveltekit-preload-data attribute. ' +\n\t\t\t\t\t\t\t\t\t\t\t'See https://kit.svelte.dev/docs/link-options for more info'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpreload_data(intent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (priority <= options.preload_code) {\n\t\t\t\t\tpreload_code(/** @type {URL} */ (url).pathname);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction after_navigate() {\n\t\t\tobserver.disconnect();\n\n\t\t\tfor (const a of container.querySelectorAll('a')) {\n\t\t\t\tconst { url, external, download } = get_link_info(a, base);\n\t\t\t\tif (external || download) continue;\n\n\t\t\t\tconst options = get_router_options(a);\n\t\t\t\tif (options.reload) continue;\n\n\t\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.viewport) {\n\t\t\t\t\tobserver.observe(a);\n\t\t\t\t}\n\n\t\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.eager) {\n\t\t\t\t\tpreload_code(/** @type {URL} */ (url).pathname);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcallbacks.after_navigate.push(after_navigate);\n\t\tafter_navigate();\n\t}\n\n\t/**\n\t * @param {unknown} error\n\t * @param {import('@sveltejs/kit').NavigationEvent} event\n\t * @returns {import('types').MaybePromise<App.Error>}\n\t */\n\tfunction handle_error(error, event) {\n\t\tif (error instanceof HttpError) {\n\t\t\treturn error.body;\n\t\t}\n\n\t\tif (DEV) {\n\t\t\terrored = true;\n\t\t\tconsole.warn('The next HMR update will cause the page to reload');\n\t\t}\n\n\t\tconst status = get_status(error);\n\t\tconst message = get_message(error);\n\n\t\treturn (\n\t\t\tapp.hooks.handleError({ error, event, status, message }) ?? /** @type {any} */ ({ message })\n\t\t);\n\t}\n\n\treturn {\n\t\tafter_navigate: (fn) => {\n\t\t\tonMount(() => {\n\t\t\t\tcallbacks.after_navigate.push(fn);\n\n\t\t\t\treturn () => {\n\t\t\t\t\tconst i = callbacks.after_navigate.indexOf(fn);\n\t\t\t\t\tcallbacks.after_navigate.splice(i, 1);\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\n\t\tbefore_navigate: (fn) => {\n\t\t\tonMount(() => {\n\t\t\t\tcallbacks.before_navigate.push(fn);\n\n\t\t\t\treturn () => {\n\t\t\t\t\tconst i = callbacks.before_navigate.indexOf(fn);\n\t\t\t\t\tcallbacks.before_navigate.splice(i, 1);\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\n\t\ton_navigate: (fn) => {\n\t\t\tonMount(() => {\n\t\t\t\tcallbacks.on_navigate.push(fn);\n\n\t\t\t\treturn () => {\n\t\t\t\t\tconst i = callbacks.on_navigate.indexOf(fn);\n\t\t\t\t\tcallbacks.on_navigate.splice(i, 1);\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\n\t\tdisable_scroll_handling: () => {\n\t\t\tif (DEV && started && !updating) {\n\t\t\t\tthrow new Error('Can only disable scroll handling during navigation');\n\t\t\t}\n\n\t\t\tif (updating || !started) {\n\t\t\t\tautoscroll = false;\n\t\t\t}\n\t\t},\n\n\t\tgoto: (url, opts = {}) => {\n\t\t\turl = resolve_url(url);\n\n\t\t\tif (url.origin !== origin) {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\tDEV\n\t\t\t\t\t\t\t? `Cannot use \\`goto\\` with an external URL. Use \\`window.location = \"${url}\"\\` instead`\n\t\t\t\t\t\t\t: 'goto: invalid URL'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn goto(url, opts, 0);\n\t\t},\n\n\t\tinvalidate: (resource) => {\n\t\t\tif (typeof resource === 'function') {\n\t\t\t\tinvalidated.push(resource);\n\t\t\t} else {\n\t\t\t\tconst { href } = new URL(resource, location.href);\n\t\t\t\tinvalidated.push((url) => url.href === href);\n\t\t\t}\n\n\t\t\treturn invalidate();\n\t\t},\n\n\t\tinvalidate_all: () => {\n\t\t\tforce_invalidation = true;\n\t\t\treturn invalidate();\n\t\t},\n\n\t\tpreload_data: async (href) => {\n\t\t\tconst url = resolve_url(href);\n\t\t\tconst intent = get_navigation_intent(url, false);\n\n\t\t\tif (!intent) {\n\t\t\t\tthrow new Error(`Attempted to preload a URL that does not belong to this app: ${url}`);\n\t\t\t}\n\n\t\t\tconst result = await preload_data(intent);\n\t\t\tif (result.type === 'redirect') {\n\t\t\t\treturn {\n\t\t\t\t\ttype: result.type,\n\t\t\t\t\tlocation: result.location\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst { status, data } = result.props.page ?? page;\n\t\t\treturn { type: result.type, status, data };\n\t\t},\n\n\t\tpreload_code: (pathname) => {\n\t\t\tif (DEV) {\n\t\t\t\tif (!pathname.startsWith(base)) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`pathnames passed to preloadCode must start with \\`paths.base\\` (i.e. \"${base}${pathname}\" rather than \"${pathname}\")`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!routes.find((route) => route.exec(get_url_path(pathname)))) {\n\t\t\t\t\tthrow new Error(`'${pathname}' did not match any routes`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn preload_code(pathname);\n\t\t},\n\n\t\tpush_state: (url, state) => {\n\t\t\tif (DEV) {\n\t\t\t\ttry {\n\t\t\t\t\tdevalue.stringify(state);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\tthrow new Error(`Could not serialize state${error.path}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst opts = {\n\t\t\t\t[HISTORY_INDEX]: (current_history_index += 1),\n\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index,\n\t\t\t\t[PAGE_URL_KEY]: page.url.href\n\t\t\t};\n\n\t\t\toriginal_push_state.call(history, opts, '', resolve_url(url));\n\n\t\t\tpage = { ...page, state };\n\t\t\troot.$set({ page });\n\n\t\t\tstates[current_history_index] = state;\n\t\t\tclear_onward_history(current_history_index, current_navigation_index);\n\t\t},\n\n\t\treplace_state: (url, state) => {\n\t\t\tif (DEV) {\n\t\t\t\ttry {\n\t\t\t\t\tdevalue.stringify(state);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\tthrow new Error(`Could not serialize state${error.path}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst opts = {\n\t\t\t\t[HISTORY_INDEX]: current_history_index,\n\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index,\n\t\t\t\t[PAGE_URL_KEY]: page.url.href\n\t\t\t};\n\n\t\t\toriginal_replace_state.call(history, opts, '', resolve_url(url));\n\n\t\t\tpage = { ...page, state };\n\t\t\troot.$set({ page });\n\n\t\t\tstates[current_history_index] = state;\n\t\t},\n\n\t\tapply_action: async (result) => {\n\t\t\tif (result.type === 'error') {\n\t\t\t\tconst url = new URL(location.href);\n\n\t\t\t\tconst { branch, route } = current;\n\t\t\t\tif (!route) return;\n\n\t\t\t\tconst error_load = await load_nearest_error_page(\n\t\t\t\t\tcurrent.branch.length,\n\t\t\t\t\tbranch,\n\t\t\t\t\troute.errors\n\t\t\t\t);\n\t\t\t\tif (error_load) {\n\t\t\t\t\tconst navigation_result = await get_navigation_result_from_branch({\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams: current.params,\n\t\t\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\t\t\tstatus: result.status ?? 500,\n\t\t\t\t\t\terror: result.error,\n\t\t\t\t\t\troute\n\t\t\t\t\t});\n\n\t\t\t\t\tcurrent = navigation_result.state;\n\n\t\t\t\t\troot.$set(navigation_result.props);\n\n\t\t\t\t\ttick().then(reset_focus);\n\t\t\t\t}\n\t\t\t} else if (result.type === 'redirect') {\n\t\t\t\tgoto(result.location, { invalidateAll: true }, 0);\n\t\t\t} else {\n\t\t\t\t/** @type {Record<string, any>} */\n\t\t\t\troot.$set({\n\t\t\t\t\t// this brings Svelte's view of the world in line with SvelteKit's\n\t\t\t\t\t// after use:enhance reset the form....\n\t\t\t\t\tform: null,\n\t\t\t\t\tpage: { ...page, form: result.data, status: result.status }\n\t\t\t\t});\n\n\t\t\t\t// ...so that setting the `form` prop takes effect and isn't ignored\n\t\t\t\tawait tick();\n\t\t\t\troot.$set({ form: result.data });\n\n\t\t\t\tif (result.type === 'success') {\n\t\t\t\t\treset_focus();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_start_router: () => {\n\t\t\thistory.scrollRestoration = 'manual';\n\n\t\t\t// Adopted from Nuxt.js\n\t\t\t// Reset scrollRestoration to auto when leaving page, allowing page reload\n\t\t\t// and back-navigation from other pages to use the browser to restore the\n\t\t\t// scrolling position.\n\t\t\taddEventListener('beforeunload', (e) => {\n\t\t\t\tlet should_block = false;\n\n\t\t\t\tpersist_state();\n\n\t\t\t\tif (!navigating) {\n\t\t\t\t\tconst nav = create_navigation(current, undefined, null, 'leave');\n\n\t\t\t\t\t// If we're navigating, beforeNavigate was already called. If we end up in here during navigation,\n\t\t\t\t\t// it's due to an external or full-page-reload link, for which we don't want to call the hook again.\n\t\t\t\t\t/** @type {import('@sveltejs/kit').BeforeNavigate} */\n\t\t\t\t\tconst navigation = {\n\t\t\t\t\t\t...nav.navigation,\n\t\t\t\t\t\tcancel: () => {\n\t\t\t\t\t\t\tshould_block = true;\n\t\t\t\t\t\t\tnav.reject(new Error('navigation was cancelled'));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tcallbacks.before_navigate.forEach((fn) => fn(navigation));\n\t\t\t\t}\n\n\t\t\t\tif (should_block) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.returnValue = '';\n\t\t\t\t} else {\n\t\t\t\t\thistory.scrollRestoration = 'auto';\n\t\t\t\t}\n\t\t\t});\n\n\t\t\taddEventListener('visibilitychange', () => {\n\t\t\t\tif (document.visibilityState === 'hidden') {\n\t\t\t\t\tpersist_state();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// @ts-expect-error this isn't supported everywhere yet\n\t\t\tif (!navigator.connection?.saveData) {\n\t\t\t\tsetup_preload();\n\t\t\t}\n\n\t\t\t/** @param {MouseEvent} event */\n\t\t\tcontainer.addEventListener('click', (event) => {\n\t\t\t\t// Adapted from https://github.com/visionmedia/page.js\n\t\t\t\t// MIT license https://github.com/visionmedia/page.js#license\n\t\t\t\tif (event.button || event.which !== 1) return;\n\t\t\t\tif (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;\n\t\t\t\tif (event.defaultPrevented) return;\n\n\t\t\t\tconst a = find_anchor(/** @type {Element} */ (event.composedPath()[0]), container);\n\t\t\t\tif (!a) return;\n\n\t\t\t\tconst { url, external, target, download } = get_link_info(a, base);\n\t\t\t\tif (!url) return;\n\n\t\t\t\t// bail out before `beforeNavigate` if link opens in a different tab\n\t\t\t\tif (target === '_parent' || target === '_top') {\n\t\t\t\t\tif (window.parent !== window) return;\n\t\t\t\t} else if (target && target !== '_self') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst options = get_router_options(a);\n\t\t\t\tconst is_svg_a_element = a instanceof SVGAElement;\n\n\t\t\t\t// Ignore URL protocols that differ to the current one and are not http(s) (e.g. `mailto:`, `tel:`, `myapp:`, etc.)\n\t\t\t\t// This may be wrong when the protocol is x: and the link goes to y:.. which should be treated as an external\n\t\t\t\t// navigation, but it's not clear how to handle that case and it's not likely to come up in practice.\n\t\t\t\t// MEMO: Without this condition, firefox will open mailer twice.\n\t\t\t\t// See:\n\t\t\t\t// - https://github.com/sveltejs/kit/issues/4045\n\t\t\t\t// - https://github.com/sveltejs/kit/issues/5725\n\t\t\t\t// - https://github.com/sveltejs/kit/issues/6496\n\t\t\t\tif (\n\t\t\t\t\t!is_svg_a_element &&\n\t\t\t\t\turl.protocol !== location.protocol &&\n\t\t\t\t\t!(url.protocol === 'https:' || url.protocol === 'http:')\n\t\t\t\t)\n\t\t\t\t\treturn;\n\n\t\t\t\tif (download) return;\n\n\t\t\t\t// Ignore the following but fire beforeNavigate\n\t\t\t\tif (external || options.reload) {\n\t\t\t\t\tif (before_navigate({ url, type: 'link' })) {\n\t\t\t\t\t\t// set `navigating` to `true` to prevent `beforeNavigate` callbacks\n\t\t\t\t\t\t// being called when the page unloads\n\t\t\t\t\t\tnavigating = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check if new url only differs by hash and use the browser default behavior in that case\n\t\t\t\t// This will ensure the `hashchange` event is fired\n\t\t\t\t// Removing the hash does a full page navigation in the browser, so make sure a hash is present\n\t\t\t\tconst [nonhash, hash] = url.href.split('#');\n\t\t\t\tif (hash !== undefined && nonhash === strip_hash(location)) {\n\t\t\t\t\t// If we are trying to navigate to the same hash, we should only\n\t\t\t\t\t// attempt to scroll to that element and avoid any history changes.\n\t\t\t\t\t// Otherwise, this can cause Firefox to incorrectly assign a null\n\t\t\t\t\t// history state value without any signal that we can detect.\n\t\t\t\t\tif (current.url.hash === url.hash) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\ta.ownerDocument.getElementById(hash)?.scrollIntoView();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// set this flag to distinguish between navigations triggered by\n\t\t\t\t\t// clicking a hash link and those triggered by popstate\n\t\t\t\t\thash_navigating = true;\n\n\t\t\t\t\tupdate_scroll_positions(current_history_index);\n\n\t\t\t\t\tupdate_url(url);\n\n\t\t\t\t\tif (!options.replace_state) return;\n\n\t\t\t\t\t// hashchange event shouldn't occur if the router is replacing state.\n\t\t\t\t\thash_navigating = false;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tnavigate({\n\t\t\t\t\ttype: 'link',\n\t\t\t\t\turl,\n\t\t\t\t\tkeepfocus: options.keepfocus,\n\t\t\t\t\tnoscroll: options.noscroll,\n\t\t\t\t\treplace_state: options.replace_state ?? url.href === location.href\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tcontainer.addEventListener('submit', (event) => {\n\t\t\t\tif (event.defaultPrevented) return;\n\n\t\t\t\tconst form = /** @type {HTMLFormElement} */ (\n\t\t\t\t\tHTMLFormElement.prototype.cloneNode.call(event.target)\n\t\t\t\t);\n\n\t\t\t\tconst submitter = /** @type {HTMLButtonElement | HTMLInputElement | null} */ (\n\t\t\t\t\tevent.submitter\n\t\t\t\t);\n\n\t\t\t\tconst method = submitter?.formMethod || form.method;\n\n\t\t\t\tif (method !== 'get') return;\n\n\t\t\t\tconst url = new URL(\n\t\t\t\t\t(submitter?.hasAttribute('formaction') && submitter?.formAction) || form.action\n\t\t\t\t);\n\n\t\t\t\tif (is_external_url(url, base)) return;\n\n\t\t\t\tconst event_form = /** @type {HTMLFormElement} */ (event.target);\n\n\t\t\t\tconst options = get_router_options(event_form);\n\t\t\t\tif (options.reload) return;\n\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\n\t\t\t\tconst data = new FormData(event_form);\n\n\t\t\t\tconst submitter_name = submitter?.getAttribute('name');\n\t\t\t\tif (submitter_name) {\n\t\t\t\t\tdata.append(submitter_name, submitter?.getAttribute('value') ?? '');\n\t\t\t\t}\n\n\t\t\t\t// @ts-expect-error `URLSearchParams(fd)` is kosher, but typescript doesn't know that\n\t\t\t\turl.search = new URLSearchParams(data).toString();\n\n\t\t\t\tnavigate({\n\t\t\t\t\ttype: 'form',\n\t\t\t\t\turl,\n\t\t\t\t\tkeepfocus: options.keepfocus,\n\t\t\t\t\tnoscroll: options.noscroll,\n\t\t\t\t\treplace_state: options.replace_state ?? url.href === location.href\n\t\t\t\t});\n\t\t\t});\n\n\t\t\taddEventListener('popstate', async (event) => {\n\t\t\t\tif (event.state?.[HISTORY_INDEX]) {\n\t\t\t\t\tconst history_index = event.state[HISTORY_INDEX];\n\t\t\t\t\ttoken = {};\n\n\t\t\t\t\t// if a popstate-driven navigation is cancelled, we need to counteract it\n\t\t\t\t\t// with history.go, which means we end up back here, hence this check\n\t\t\t\t\tif (history_index === current_history_index) return;\n\n\t\t\t\t\tconst scroll = scroll_positions[history_index];\n\t\t\t\t\tconst state = states[history_index] ?? {};\n\t\t\t\t\tconst url = new URL(event.state[PAGE_URL_KEY] ?? location.href);\n\t\t\t\t\tconst navigation_index = event.state[NAVIGATION_INDEX];\n\t\t\t\t\tconst is_hash_change = strip_hash(location) === strip_hash(current.url);\n\t\t\t\t\tconst shallow =\n\t\t\t\t\t\tnavigation_index === current_navigation_index && (has_navigated || is_hash_change);\n\n\t\t\t\t\tif (shallow) {\n\t\t\t\t\t\t// We don't need to navigate, we just need to update scroll and/or state.\n\t\t\t\t\t\t// This happens with hash links and `pushState`/`replaceState`. The\n\t\t\t\t\t\t// exception is if we haven't navigated yet, since we could have\n\t\t\t\t\t\t// got here after a modal navigation then a reload\n\t\t\t\t\t\tupdate_url(url);\n\n\t\t\t\t\t\tscroll_positions[current_history_index] = scroll_state();\n\t\t\t\t\t\tif (scroll) scrollTo(scroll.x, scroll.y);\n\n\t\t\t\t\t\tif (state !== page.state) {\n\t\t\t\t\t\t\tpage = { ...page, state };\n\t\t\t\t\t\t\troot.$set({ page });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrent_history_index = history_index;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst delta = history_index - current_history_index;\n\n\t\t\t\t\tawait navigate({\n\t\t\t\t\t\ttype: 'popstate',\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tpopped: {\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tscroll,\n\t\t\t\t\t\t\tdelta\n\t\t\t\t\t\t},\n\t\t\t\t\t\taccept: () => {\n\t\t\t\t\t\t\tcurrent_history_index = history_index;\n\t\t\t\t\t\t\tcurrent_navigation_index = navigation_index;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tblock: () => {\n\t\t\t\t\t\t\thistory.go(-delta);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnav_token: token\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// since popstate event is also emitted when an anchor referencing the same\n\t\t\t\t\t// document is clicked, we have to check that the router isn't already handling\n\t\t\t\t\t// the navigation. otherwise we would be updating the page store twice.\n\t\t\t\t\tif (!hash_navigating) {\n\t\t\t\t\t\tconst url = new URL(location.href);\n\t\t\t\t\t\tupdate_url(url);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\taddEventListener('hashchange', () => {\n\t\t\t\t// if the hashchange happened as a result of clicking on a link,\n\t\t\t\t// we need to update history, otherwise we have to leave it alone\n\t\t\t\tif (hash_navigating) {\n\t\t\t\t\thash_navigating = false;\n\t\t\t\t\toriginal_replace_state.call(\n\t\t\t\t\t\thistory,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...history.state,\n\t\t\t\t\t\t\t[HISTORY_INDEX]: ++current_history_index,\n\t\t\t\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'',\n\t\t\t\t\t\tlocation.href\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// fix link[rel=icon], because browsers will occasionally try to load relative\n\t\t\t// URLs after a pushState/replaceState, resulting in a 404 â€” see\n\t\t\t// https://github.com/sveltejs/kit/issues/3748#issuecomment-1125980897\n\t\t\tfor (const link of document.querySelectorAll('link')) {\n\t\t\t\tif (link.rel === 'icon') link.href = link.href; // eslint-disable-line\n\t\t\t}\n\n\t\t\taddEventListener('pageshow', (event) => {\n\t\t\t\t// If the user navigates to another site and then uses the back button and\n\t\t\t\t// bfcache hits, we need to set navigating to null, the site doesn't know\n\t\t\t\t// the navigation away from it was successful.\n\t\t\t\t// Info about bfcache here: https://web.dev/bfcache\n\t\t\t\tif (event.persisted) {\n\t\t\t\t\tstores.navigating.set(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * @param {URL} url\n\t\t\t */\n\t\t\tfunction update_url(url) {\n\t\t\t\tcurrent.url = url;\n\t\t\t\tstores.page.set({ ...page, url });\n\t\t\t\tstores.page.notify();\n\t\t\t}\n\t\t},\n\n\t\t_hydrate: async ({\n\t\t\tstatus = 200,\n\t\t\terror,\n\t\t\tnode_ids,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tdata: server_data_nodes,\n\t\t\tform\n\t\t}) => {\n\t\t\thydrated = true;\n\n\t\t\tconst url = new URL(location.href);\n\n\t\t\tif (!__SVELTEKIT_EMBEDDED__) {\n\t\t\t\t// See https://github.com/sveltejs/kit/pull/4935#issuecomment-1328093358 for one motivation\n\t\t\t\t// of determining the params on the client side.\n\t\t\t\t({ params = {}, route = { id: null } } = get_navigation_intent(url, false) || {});\n\t\t\t}\n\n\t\t\t/** @type {import('./types.js').NavigationFinished | undefined} */\n\t\t\tlet result;\n\n\t\t\ttry {\n\t\t\t\tconst branch_promises = node_ids.map(async (n, i) => {\n\t\t\t\t\tconst server_data_node = server_data_nodes[i];\n\t\t\t\t\t// Type isn't completely accurate, we still need to deserialize uses\n\t\t\t\t\tif (server_data_node?.uses) {\n\t\t\t\t\t\tserver_data_node.uses = deserialize_uses(server_data_node.uses);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn load_node({\n\t\t\t\t\t\tloader: app.nodes[n],\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\troute,\n\t\t\t\t\t\tparent: async () => {\n\t\t\t\t\t\t\tconst data = {};\n\t\t\t\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\t\t\t\tObject.assign(data, (await branch_promises[j]).data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn data;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\t\t\t\tconst branch = await Promise.all(branch_promises);\n\n\t\t\t\tconst parsed_route = routes.find(({ id }) => id === route.id);\n\n\t\t\t\t// server-side will have compacted the branch, reinstate empty slots\n\t\t\t\t// so that error boundaries can be lined up correctly\n\t\t\t\tif (parsed_route) {\n\t\t\t\t\tconst layouts = parsed_route.layouts;\n\t\t\t\t\tfor (let i = 0; i < layouts.length; i++) {\n\t\t\t\t\t\tif (!layouts[i]) {\n\t\t\t\t\t\t\tbranch.splice(i, 0, undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresult = await get_navigation_result_from_branch({\n\t\t\t\t\turl,\n\t\t\t\t\tparams,\n\t\t\t\t\tbranch,\n\t\t\t\t\tstatus,\n\t\t\t\t\terror,\n\t\t\t\t\tform,\n\t\t\t\t\troute: parsed_route ?? null\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tif (error instanceof Redirect) {\n\t\t\t\t\t// this is a real edge case â€” `load` would need to return\n\t\t\t\t\t// a redirect but only in the browser\n\t\t\t\t\tawait native_navigation(new URL(error.location, location.href));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult = await load_root_error_page({\n\t\t\t\t\tstatus: get_status(error),\n\t\t\t\t\terror: await handle_error(error, { url, params, route }),\n\t\t\t\t\turl,\n\t\t\t\t\troute\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (result.props.page) {\n\t\t\t\tresult.props.page.state = {};\n\t\t\t}\n\n\t\t\tinitialize(result);\n\t\t}\n\t};\n}\n\n/**\n * @param {URL} url\n * @param {boolean[]} invalid\n * @returns {Promise<import('types').ServerNodesResponse | import('types').ServerRedirectNode>}\n */\nasync function load_data(url, invalid) {\n\tconst data_url = new URL(url);\n\tdata_url.pathname = add_data_suffix(url.pathname);\n\tif (url.pathname.endsWith('/')) {\n\t\tdata_url.searchParams.append(TRAILING_SLASH_PARAM, '1');\n\t}\n\tif (DEV && url.searchParams.has(INVALIDATED_PARAM)) {\n\t\tthrow new Error(`Cannot used reserved query parameter \"${INVALIDATED_PARAM}\"`);\n\t}\n\tdata_url.searchParams.append(INVALIDATED_PARAM, invalid.map((i) => (i ? '1' : '0')).join(''));\n\n\tconst res = await native_fetch(data_url.href);\n\n\tif (!res.ok) {\n\t\t// error message is a JSON-stringified string which devalue can't handle at the top level\n\t\t// turn it into a HttpError to not call handleError on the client again (was already handled on the server)\n\t\t// if `__data.json` doesn't exist or the server has an internal error,\n\t\t// avoid parsing the HTML error page as a JSON\n\t\t/** @type {string | undefined} */\n\t\tlet message;\n\t\tif (res.headers.get('content-type')?.includes('application/json')) {\n\t\t\tmessage = await res.json();\n\t\t} else if (res.status === 404) {\n\t\t\tmessage = 'Not Found';\n\t\t} else if (res.status === 500) {\n\t\t\tmessage = 'Internal Error';\n\t\t}\n\t\tthrow new HttpError(res.status, message);\n\t}\n\n\t// TODO: fix eslint error / figure out if it actually applies to our situation\n\t// eslint-disable-next-line\n\treturn new Promise(async (resolve) => {\n\t\t/**\n\t\t * Map of deferred promises that will be resolved by a subsequent chunk of data\n\t\t * @type {Map<string, import('types').Deferred>}\n\t\t */\n\t\tconst deferreds = new Map();\n\t\tconst reader = /** @type {ReadableStream<Uint8Array>} */ (res.body).getReader();\n\t\tconst decoder = new TextDecoder();\n\n\t\t/**\n\t\t * @param {any} data\n\t\t */\n\t\tfunction deserialize(data) {\n\t\t\treturn devalue.unflatten(data, {\n\t\t\t\tPromise: (id) => {\n\t\t\t\t\treturn new Promise((fulfil, reject) => {\n\t\t\t\t\t\tdeferreds.set(id, { fulfil, reject });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet text = '';\n\n\t\twhile (true) {\n\t\t\t// Format follows ndjson (each line is a JSON object) or regular JSON spec\n\t\t\tconst { done, value } = await reader.read();\n\t\t\tif (done && !text) break;\n\n\t\t\ttext += !value && text ? '\\n' : decoder.decode(value); // no value -> final chunk -> add a new line to trigger the last parse\n\n\t\t\twhile (true) {\n\t\t\t\tconst split = text.indexOf('\\n');\n\t\t\t\tif (split === -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst node = JSON.parse(text.slice(0, split));\n\t\t\t\ttext = text.slice(split + 1);\n\n\t\t\t\tif (node.type === 'redirect') {\n\t\t\t\t\treturn resolve(node);\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'data') {\n\t\t\t\t\t// This is the first (and possibly only, if no pending promises) chunk\n\t\t\t\t\tnode.nodes?.forEach((/** @type {any} */ node) => {\n\t\t\t\t\t\tif (node?.type === 'data') {\n\t\t\t\t\t\t\tnode.uses = deserialize_uses(node.uses);\n\t\t\t\t\t\t\tnode.data = deserialize(node.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tresolve(node);\n\t\t\t\t} else if (node.type === 'chunk') {\n\t\t\t\t\t// This is a subsequent chunk containing deferred data\n\t\t\t\t\tconst { id, data, error } = node;\n\t\t\t\t\tconst deferred = /** @type {import('types').Deferred} */ (deferreds.get(id));\n\t\t\t\t\tdeferreds.delete(id);\n\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tdeferred.reject(deserialize(error));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdeferred.fulfil(deserialize(data));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// TODO edge case handling necessary? stream() read fails?\n}\n\n/**\n * @param {any} uses\n * @return {import('types').Uses}\n */\nfunction deserialize_uses(uses) {\n\treturn {\n\t\tdependencies: new Set(uses?.dependencies ?? []),\n\t\tparams: new Set(uses?.params ?? []),\n\t\tparent: !!uses?.parent,\n\t\troute: !!uses?.route,\n\t\turl: !!uses?.url,\n\t\tsearch_params: new Set(uses?.search_params ?? [])\n\t};\n}\n\nfunction reset_focus() {\n\tconst autofocus = document.querySelector('[autofocus]');\n\tif (autofocus) {\n\t\t// @ts-ignore\n\t\tautofocus.focus();\n\t} else {\n\t\t// Reset page selection and focus\n\t\t// We try to mimic browsers' behaviour as closely as possible by targeting the\n\t\t// first scrollable region, but unfortunately it's not a perfect match â€” e.g.\n\t\t// shift-tabbing won't immediately cycle up from the end of the page on Chromium\n\t\t// See https://html.spec.whatwg.org/multipage/interaction.html#get-the-focusable-area\n\t\tconst root = document.body;\n\t\tconst tabindex = root.getAttribute('tabindex');\n\n\t\troot.tabIndex = -1;\n\t\t// @ts-expect-error\n\t\troot.focus({ preventScroll: true, focusVisible: false });\n\n\t\t// restore `tabindex` as to prevent `root` from stealing input from elements\n\t\tif (tabindex !== null) {\n\t\t\troot.setAttribute('tabindex', tabindex);\n\t\t} else {\n\t\t\troot.removeAttribute('tabindex');\n\t\t}\n\n\t\t// capture current selection, so we can compare the state after\n\t\t// snapshot restoration and afterNavigate callbacks have run\n\t\tconst selection = getSelection();\n\n\t\tif (selection && selection.type !== 'None') {\n\t\t\t/** @type {Range[]} */\n\t\t\tconst ranges = [];\n\n\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\tranges.push(selection.getRangeAt(i));\n\t\t\t}\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (selection.rangeCount !== ranges.length) return;\n\n\t\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\t\tconst a = ranges[i];\n\t\t\t\t\tconst b = selection.getRangeAt(i);\n\n\t\t\t\t\t// we need to do a deep comparison rather than just `a !== b` because\n\t\t\t\t\t// Safari behaves differently to other browsers\n\t\t\t\t\tif (\n\t\t\t\t\t\ta.commonAncestorContainer !== b.commonAncestorContainer ||\n\t\t\t\t\t\ta.startContainer !== b.startContainer ||\n\t\t\t\t\t\ta.endContainer !== b.endContainer ||\n\t\t\t\t\t\ta.startOffset !== b.startOffset ||\n\t\t\t\t\t\ta.endOffset !== b.endOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if the selection hasn't changed (as a result of an element being (auto)focused,\n\t\t\t\t// or a programmatic selection, we reset everything as part of the navigation)\n\t\t\t\t// fixes https://github.com/sveltejs/kit/issues/8439\n\t\t\t\tselection.removeAllRanges();\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./types.js').NavigationState} current\n * @param {import('./types.js').NavigationIntent | undefined} intent\n * @param {URL | null} url\n * @param {Exclude<import('@sveltejs/kit').NavigationType, 'enter'>} type\n */\nfunction create_navigation(current, intent, url, type) {\n\t/** @type {(value: any) => void} */\n\tlet fulfil;\n\n\t/** @type {(error: any) => void} */\n\tlet reject;\n\n\tconst complete = new Promise((f, r) => {\n\t\tfulfil = f;\n\t\treject = r;\n\t});\n\n\t// Handle any errors off-chain so that it doesn't show up as an unhandled rejection\n\tcomplete.catch(() => {});\n\n\t/** @type {import('@sveltejs/kit').Navigation} */\n\tconst navigation = {\n\t\tfrom: {\n\t\t\tparams: current.params,\n\t\t\troute: { id: current.route?.id ?? null },\n\t\t\turl: current.url\n\t\t},\n\t\tto: url && {\n\t\t\tparams: intent?.params ?? null,\n\t\t\troute: { id: intent?.route?.id ?? null },\n\t\t\turl\n\t\t},\n\t\twillUnload: !intent,\n\t\ttype,\n\t\tcomplete\n\t};\n\n\treturn {\n\t\tnavigation,\n\t\t// @ts-expect-error\n\t\tfulfil,\n\t\t// @ts-expect-error\n\t\treject\n\t};\n}\n\nif (DEV) {\n\t// Nasty hack to silence harmless warnings the user can do nothing about\n\tconst console_warn = console.warn;\n\tconsole.warn = function warn(...args) {\n\t\tif (\n\t\t\targs.length === 1 &&\n\t\t\t/<(Layout|Page|Error)(_[\\w$]+)?> was created (with unknown|without expected) prop '(data|form)'/.test(\n\t\t\t\targs[0]\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconsole_warn(...args);\n\t};\n\n\tif (import.meta.hot) {\n\t\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\t\tif (errored) {\n\t\t\t\tlocation.reload();\n\t\t\t}\n\t\t});\n\t}\n}\n","import { DEV } from 'esm-env';\nimport { create_client } from './client.js';\nimport { init } from './singletons.js';\n\n/**\n * @param {import('./types.js').SvelteKitApp} app\n * @param {HTMLElement} target\n * @param {Parameters<import('./types.js').Client['_hydrate']>[0]} [hydrate]\n */\nexport async function start(app, target, hydrate) {\n\tif (DEV && target === document.body) {\n\t\tconsole.warn(\n\t\t\t'Placing %sveltekit.body% directly inside <body> is not recommended, as your app may break for users who have certain browser extensions installed.\\n\\nConsider wrapping it in an element:\\n\\n<div style=\"display: contents\">\\n  %sveltekit.body%\\n</div>'\n\t\t);\n\t}\n\n\tconst client = create_client(app, target);\n\n\tinit({ client });\n\n\tif (hydrate) {\n\t\tawait client._hydrate(hydrate);\n\t} else {\n\t\tclient.goto(location.href, { replaceState: true });\n\t}\n\n\tclient._start_router();\n}\n","import { BROWSER } from 'esm-env';\n\n/**\n * Matches a URI scheme. See https://www.rfc-editor.org/rfc/rfc3986#section-3.1\n * @type {RegExp}\n */\nexport const SCHEME = /^[a-z][a-z\\d+\\-.]+:/i;\n\nconst internal = new URL('sveltekit-internal://');\n\n/**\n * @param {string} base\n * @param {string} path\n */\nexport function resolve(base, path) {\n\t// special case\n\tif (path[0] === '/' && path[1] === '/') return path;\n\n\tlet url = new URL(base, internal);\n\turl = new URL(path, url);\n\n\treturn url.protocol === internal.protocol ? url.pathname + url.search + url.hash : url.href;\n}\n\n/** @param {string} path */\nexport function is_root_relative(path) {\n\treturn path[0] === '/' && path[1] !== '/';\n}\n\n/**\n * @param {string} path\n * @param {import('types').TrailingSlash} trailing_slash\n */\nexport function normalize_path(path, trailing_slash) {\n\tif (path === '/' || trailing_slash === 'ignore') return path;\n\n\tif (trailing_slash === 'never') {\n\t\treturn path.endsWith('/') ? path.slice(0, -1) : path;\n\t} else if (trailing_slash === 'always' && !path.endsWith('/')) {\n\t\treturn path + '/';\n\t}\n\n\treturn path;\n}\n\n/**\n * Decode pathname excluding %25 to prevent further double decoding of params\n * @param {string} pathname\n */\nexport function decode_pathname(pathname) {\n\treturn pathname.split('%25').map(decodeURI).join('%25');\n}\n\n/** @param {Record<string, string>} params */\nexport function decode_params(params) {\n\tfor (const key in params) {\n\t\t// input has already been decoded by decodeURI\n\t\t// now handle the rest\n\t\tparams[key] = decodeURIComponent(params[key]);\n\t}\n\n\treturn params;\n}\n\n/**\n * The error when a URL is malformed is not very helpful, so we augment it with the URI\n * @param {string} uri\n */\nexport function decode_uri(uri) {\n\ttry {\n\t\treturn decodeURI(uri);\n\t} catch (e) {\n\t\tif (e instanceof Error) {\n\t\t\te.message = `Failed to decode URI: ${uri}\\n` + e.message;\n\t\t}\n\t\tthrow e;\n\t}\n}\n\n/**\n * Returns everything up to the first `#` in a URL\n * @param {{href: string}} url_like\n */\nexport function strip_hash({ href }) {\n\treturn href.split('#')[0];\n}\n\n/**\n * URL properties that could change during the lifetime of the page,\n * which excludes things like `origin`\n */\nconst tracked_url_properties = /** @type {const} */ ([\n\t'href',\n\t'pathname',\n\t'search',\n\t'toString',\n\t'toJSON'\n]);\n\n/**\n * @param {URL} url\n * @param {() => void} callback\n * @param {(search_param: string) => void} search_params_callback\n */\nexport function make_trackable(url, callback, search_params_callback) {\n\tconst tracked = new URL(url);\n\n\tObject.defineProperty(tracked, 'searchParams', {\n\t\tvalue: new Proxy(tracked.searchParams, {\n\t\t\tget(obj, key) {\n\t\t\t\tif (key === 'get' || key === 'getAll' || key === 'has') {\n\t\t\t\t\treturn (/**@type {string}*/ param) => {\n\t\t\t\t\t\tsearch_params_callback(param);\n\t\t\t\t\t\treturn obj[key](param);\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// if they try to access something different from what is in `tracked_search_params_properties`\n\t\t\t\t// we track the whole url (entries, values, keys etc)\n\t\t\t\tcallback();\n\n\t\t\t\tconst value = Reflect.get(obj, key);\n\t\t\t\treturn typeof value === 'function' ? value.bind(obj) : value;\n\t\t\t}\n\t\t}),\n\t\tenumerable: true,\n\t\tconfigurable: true\n\t});\n\n\tfor (const property of tracked_url_properties) {\n\t\tObject.defineProperty(tracked, property, {\n\t\t\tget() {\n\t\t\t\tcallback();\n\t\t\t\treturn url[property];\n\t\t\t},\n\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true\n\t\t});\n\t}\n\n\tif (!BROWSER) {\n\t\t// @ts-ignore\n\t\ttracked[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(url, opts);\n\t\t};\n\t}\n\n\tdisable_hash(tracked);\n\n\treturn tracked;\n}\n\n/**\n * Disallow access to `url.hash` on the server and in `load`\n * @param {URL} url\n */\nexport function disable_hash(url) {\n\tallow_nodejs_console_log(url);\n\n\tObject.defineProperty(url, 'hash', {\n\t\tget() {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot access event.url.hash. Consider using `$page.url.hash` inside a component instead'\n\t\t\t);\n\t\t}\n\t});\n}\n\n/**\n * Disallow access to `url.search` and `url.searchParams` during prerendering\n * @param {URL} url\n */\nexport function disable_search(url) {\n\tallow_nodejs_console_log(url);\n\n\tfor (const property of ['search', 'searchParams']) {\n\t\tObject.defineProperty(url, property, {\n\t\t\tget() {\n\t\t\t\tthrow new Error(`Cannot access url.${property} on a page with prerendering enabled`);\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Allow URL to be console logged, bypassing disabled properties.\n * @param {URL} url\n */\nfunction allow_nodejs_console_log(url) {\n\tif (!BROWSER) {\n\t\t// @ts-ignore\n\t\turl[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(new URL(url), opts);\n\t\t};\n\t}\n}\n\nconst DATA_SUFFIX = '/__data.json';\nconst HTML_DATA_SUFFIX = '.html__data.json';\n\n/** @param {string} pathname */\nexport function has_data_suffix(pathname) {\n\treturn pathname.endsWith(DATA_SUFFIX) || pathname.endsWith(HTML_DATA_SUFFIX);\n}\n\n/** @param {string} pathname */\nexport function add_data_suffix(pathname) {\n\tif (pathname.endsWith('.html')) return pathname.replace(/\\.html$/, HTML_DATA_SUFFIX);\n\treturn pathname.replace(/\\/$/, '') + DATA_SUFFIX;\n}\n\n/** @param {string} pathname */\nexport function strip_data_suffix(pathname) {\n\tif (pathname.endsWith(HTML_DATA_SUFFIX)) {\n\t\treturn pathname.slice(0, -HTML_DATA_SUFFIX.length) + '.html';\n\t}\n\n\treturn pathname.slice(0, -DATA_SUFFIX.length);\n}\n","/**\n * Hash using djb2\n * @param {import('types').StrictBody[]} values\n */\nexport function hash(...values) {\n\tlet hash = 5381;\n\n\tfor (const value of values) {\n\t\tif (typeof value === 'string') {\n\t\t\tlet i = value.length;\n\t\t\twhile (i) hash = (hash * 33) ^ value.charCodeAt(--i);\n\t\t} else if (ArrayBuffer.isView(value)) {\n\t\t\tconst buffer = new Uint8Array(value.buffer, value.byteOffset, value.byteLength);\n\t\t\tlet i = buffer.length;\n\t\t\twhile (i) hash = (hash * 33) ^ buffer[--i];\n\t\t} else {\n\t\t\tthrow new TypeError('value must be a string or TypedArray');\n\t\t}\n\t}\n\n\treturn (hash >>> 0).toString(36);\n}\n","import { DEV } from 'esm-env';\nimport { hash } from '../hash.js';\n\nlet loading = 0;\n\nexport const native_fetch = window.fetch;\n\nexport function lock_fetch() {\n\tloading += 1;\n}\n\nexport function unlock_fetch() {\n\tloading -= 1;\n}\n\nif (DEV) {\n\tlet can_inspect_stack_trace = false;\n\n\tconst check_stack_trace = async () => {\n\t\tconst stack = /** @type {string} */ (new Error().stack);\n\t\tcan_inspect_stack_trace = stack.includes('check_stack_trace');\n\t};\n\n\tcheck_stack_trace();\n\n\t/**\n\t * @param {RequestInfo | URL} input\n\t * @param {RequestInit & Record<string, any> | undefined} init\n\t */\n\twindow.fetch = (input, init) => {\n\t\t// Check if fetch was called via load_node. the lock method only checks if it was called at the\n\t\t// same time, but not necessarily if it was called from `load`.\n\t\t// We use just the filename as the method name sometimes does not appear on the CI.\n\t\tconst url = input instanceof Request ? input.url : input.toString();\n\t\tconst stack_array = /** @type {string} */ (new Error().stack).split('\\n');\n\t\t// We need to do a cutoff because Safari and Firefox maintain the stack\n\t\t// across events and for example traces a `fetch` call triggered from a button\n\t\t// back to the creation of the event listener and the element creation itself,\n\t\t// where at some point client.js will show up, leading to false positives.\n\t\tconst cutoff = stack_array.findIndex((a) => a.includes('load@') || a.includes('at load'));\n\t\tconst stack = stack_array.slice(0, cutoff + 2).join('\\n');\n\n\t\tconst in_load_heuristic = can_inspect_stack_trace\n\t\t\t? stack.includes('src/runtime/client/client.js')\n\t\t\t: loading;\n\n\t\t// This flag is set in initial_fetch and subsequent_fetch\n\t\tconst used_kit_fetch = init?.__sveltekit_fetch__;\n\n\t\tif (in_load_heuristic && !used_kit_fetch) {\n\t\t\tconsole.warn(\n\t\t\t\t`Loading ${url} using \\`window.fetch\\`. For best results, use the \\`fetch\\` that is passed to your \\`load\\` function: https://kit.svelte.dev/docs/load#making-fetch-requests`\n\t\t\t);\n\t\t}\n\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tcache.delete(build_selector(input));\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n} else {\n\twindow.fetch = (input, init) => {\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tcache.delete(build_selector(input));\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n}\n\nconst cache = new Map();\n\n/**\n * @param {string} text\n * @returns {ArrayBufferLike}\n */\nfunction b64_decode(text) {\n\tconst d = atob(text);\n\n\tconst u8 = new Uint8Array(d.length);\n\n\tfor (let i = 0; i < d.length; i++) {\n\t\tu8[i] = d.charCodeAt(i);\n\t}\n\n\treturn u8.buffer;\n}\n\n/**\n * Should be called on the initial run of load functions that hydrate the page.\n * Saves any requests with cache-control max-age to the cache.\n * @param {URL | string} resource\n * @param {RequestInit} [opts]\n */\nexport function initial_fetch(resource, opts) {\n\tconst selector = build_selector(resource, opts);\n\n\tconst script = document.querySelector(selector);\n\tif (script?.textContent) {\n\t\tlet { body, ...init } = JSON.parse(script.textContent);\n\n\t\tconst ttl = script.getAttribute('data-ttl');\n\t\tif (ttl) cache.set(selector, { body, init, ttl: 1000 * Number(ttl) });\n\t\tconst b64 = script.getAttribute('data-b64');\n\t\tif (b64 !== null) {\n\t\t\t// Can't use native_fetch('data:...;base64,${body}')\n\t\t\t// csp can block the request\n\t\t\tbody = b64_decode(body);\n\t\t}\n\n\t\treturn Promise.resolve(new Response(body, init));\n\t}\n\n\treturn DEV ? dev_fetch(resource, opts) : window.fetch(resource, opts);\n}\n\n/**\n * Tries to get the response from the cache, if max-age allows it, else does a fetch.\n * @param {URL | string} resource\n * @param {string} resolved\n * @param {RequestInit} [opts]\n */\nexport function subsequent_fetch(resource, resolved, opts) {\n\tif (cache.size > 0) {\n\t\tconst selector = build_selector(resource, opts);\n\t\tconst cached = cache.get(selector);\n\t\tif (cached) {\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Request/cache#value\n\t\t\tif (\n\t\t\t\tperformance.now() < cached.ttl &&\n\t\t\t\t['default', 'force-cache', 'only-if-cached', undefined].includes(opts?.cache)\n\t\t\t) {\n\t\t\t\treturn new Response(cached.body, cached.init);\n\t\t\t}\n\n\t\t\tcache.delete(selector);\n\t\t}\n\t}\n\n\treturn DEV ? dev_fetch(resolved, opts) : window.fetch(resolved, opts);\n}\n\n/**\n * @param {RequestInfo | URL} resource\n * @param {RequestInit & Record<string, any> | undefined} opts\n */\nfunction dev_fetch(resource, opts) {\n\tconst patched_opts = { ...opts };\n\t// This assigns the __sveltekit_fetch__ flag and makes it non-enumerable\n\tObject.defineProperty(patched_opts, '__sveltekit_fetch__', {\n\t\tvalue: true,\n\t\twritable: true,\n\t\tconfigurable: true\n\t});\n\treturn window.fetch(resource, patched_opts);\n}\n\n/**\n * Build the cache key for a given request\n * @param {URL | RequestInfo} resource\n * @param {RequestInit} [opts]\n */\nfunction build_selector(resource, opts) {\n\tconst url = JSON.stringify(resource instanceof Request ? resource.url : resource);\n\n\tlet selector = `script[data-sveltekit-fetched][data-url=${url}]`;\n\n\tif (opts?.headers || opts?.body) {\n\t\t/** @type {import('types').StrictBody[]} */\n\t\tconst values = [];\n\n\t\tif (opts.headers) {\n\t\t\tvalues.push([...new Headers(opts.headers)].join(','));\n\t\t}\n\n\t\tif (opts.body && (typeof opts.body === 'string' || ArrayBuffer.isView(opts.body))) {\n\t\t\tvalues.push(opts.body);\n\t\t}\n\n\t\tselector += `[data-hash=\"${hash(...values)}\"]`;\n\t}\n\n\treturn selector;\n}\n","const param_pattern = /^(\\[)?(\\.\\.\\.)?(\\w+)(?:=(\\w+))?(\\])?$/;\n\n/**\n * Creates the regex pattern, extracts parameter names, and generates types for a route\n * @param {string} id\n */\nexport function parse_route_id(id) {\n\t/** @type {import('types').RouteParam[]} */\n\tconst params = [];\n\n\tconst pattern =\n\t\tid === '/'\n\t\t\t? /^\\/$/\n\t\t\t: new RegExp(\n\t\t\t\t\t`^${get_route_segments(id)\n\t\t\t\t\t\t.map((segment) => {\n\t\t\t\t\t\t\t// special case â€” /[...rest]/ could contain zero segments\n\t\t\t\t\t\t\tconst rest_match = /^\\[\\.\\.\\.(\\w+)(?:=(\\w+))?\\]$/.exec(segment);\n\t\t\t\t\t\t\tif (rest_match) {\n\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\tname: rest_match[1],\n\t\t\t\t\t\t\t\t\tmatcher: rest_match[2],\n\t\t\t\t\t\t\t\t\toptional: false,\n\t\t\t\t\t\t\t\t\trest: true,\n\t\t\t\t\t\t\t\t\tchained: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn '(?:/(.*))?';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// special case â€” /[[optional]]/ could contain zero segments\n\t\t\t\t\t\t\tconst optional_match = /^\\[\\[(\\w+)(?:=(\\w+))?\\]\\]$/.exec(segment);\n\t\t\t\t\t\t\tif (optional_match) {\n\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\tname: optional_match[1],\n\t\t\t\t\t\t\t\t\tmatcher: optional_match[2],\n\t\t\t\t\t\t\t\t\toptional: true,\n\t\t\t\t\t\t\t\t\trest: false,\n\t\t\t\t\t\t\t\t\tchained: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn '(?:/([^/]+))?';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!segment) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst parts = segment.split(/\\[(.+?)\\](?!\\])/);\n\t\t\t\t\t\t\tconst result = parts\n\t\t\t\t\t\t\t\t.map((content, i) => {\n\t\t\t\t\t\t\t\t\tif (i % 2) {\n\t\t\t\t\t\t\t\t\t\tif (content.startsWith('x+')) {\n\t\t\t\t\t\t\t\t\t\t\treturn escape(String.fromCharCode(parseInt(content.slice(2), 16)));\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (content.startsWith('u+')) {\n\t\t\t\t\t\t\t\t\t\t\treturn escape(\n\t\t\t\t\t\t\t\t\t\t\t\tString.fromCharCode(\n\t\t\t\t\t\t\t\t\t\t\t\t\t...content\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.slice(2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.split('-')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.map((code) => parseInt(code, 16))\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst match = param_pattern.exec(content);\n\t\t\t\t\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\t\t\t`Invalid param: ${content}. Params and matcher names can only have underscores and alphanumeric characters.`\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst [, is_optional, is_rest, name, matcher] = match;\n\t\t\t\t\t\t\t\t\t\t// It's assumed that the following invalid route id cases are already checked\n\t\t\t\t\t\t\t\t\t\t// - unbalanced brackets\n\t\t\t\t\t\t\t\t\t\t// - optional param following rest param\n\n\t\t\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\t\tmatcher,\n\t\t\t\t\t\t\t\t\t\t\toptional: !!is_optional,\n\t\t\t\t\t\t\t\t\t\t\trest: !!is_rest,\n\t\t\t\t\t\t\t\t\t\t\tchained: is_rest ? i === 1 && parts[0] === '' : false\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\treturn is_rest ? '(.*?)' : is_optional ? '([^/]*)?' : '([^/]+?)';\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn escape(content);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.join('');\n\n\t\t\t\t\t\t\treturn '/' + result;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join('')}/?$`\n\t\t\t\t);\n\n\treturn { pattern, params };\n}\n\nconst optional_param_regex = /\\/\\[\\[\\w+?(?:=\\w+)?\\]\\]/;\n\n/**\n * Removes optional params from a route ID.\n * @param {string} id\n * @returns The route id with optional params removed\n */\nexport function remove_optional_params(id) {\n\treturn id.replace(optional_param_regex, '');\n}\n\n/**\n * Returns `false` for `(group)` segments\n * @param {string} segment\n */\nfunction affects_path(segment) {\n\treturn !/^\\([^)]+\\)$/.test(segment);\n}\n\n/**\n * Splits a route id into its segments, removing segments that\n * don't affect the path (i.e. groups). The root route is represented by `/`\n * and will be returned as `['']`.\n * @param {string} route\n * @returns string[]\n */\nexport function get_route_segments(route) {\n\treturn route.slice(1).split('/').filter(affects_path);\n}\n\n/**\n * @param {RegExpMatchArray} match\n * @param {import('types').RouteParam[]} params\n * @param {Record<string, import('@sveltejs/kit').ParamMatcher>} matchers\n */\nexport function exec(match, params, matchers) {\n\t/** @type {Record<string, string>} */\n\tconst result = {};\n\n\tconst values = match.slice(1);\n\tconst values_needing_match = values.filter((value) => value !== undefined);\n\n\tlet buffered = 0;\n\n\tfor (let i = 0; i < params.length; i += 1) {\n\t\tconst param = params[i];\n\t\tlet value = values[i - buffered];\n\n\t\t// in the `[[a=b]]/.../[...rest]` case, if one or more optional parameters\n\t\t// weren't matched, roll the skipped values into the rest\n\t\tif (param.chained && param.rest && buffered) {\n\t\t\tvalue = values\n\t\t\t\t.slice(i - buffered, i + 1)\n\t\t\t\t.filter((s) => s)\n\t\t\t\t.join('/');\n\n\t\t\tbuffered = 0;\n\t\t}\n\n\t\t// if `value` is undefined, it means this is an optional or rest parameter\n\t\tif (value === undefined) {\n\t\t\tif (param.rest) result[param.name] = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!param.matcher || matchers[param.matcher](value)) {\n\t\t\tresult[param.name] = value;\n\n\t\t\t// Now that the params match, reset the buffer if the next param isn't the [...rest]\n\t\t\t// and the next value is defined, otherwise the buffer will cause us to skip values\n\t\t\tconst next_param = params[i + 1];\n\t\t\tconst next_value = values[i + 1];\n\t\t\tif (next_param && !next_param.rest && next_param.optional && next_value && param.chained) {\n\t\t\t\tbuffered = 0;\n\t\t\t}\n\n\t\t\t// There are no more params and no more values, but all non-empty values have been matched\n\t\t\tif (\n\t\t\t\t!next_param &&\n\t\t\t\t!next_value &&\n\t\t\t\tObject.keys(result).length === values_needing_match.length\n\t\t\t) {\n\t\t\t\tbuffered = 0;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\t// in the `/[[a=b]]/...` case, if the value didn't satisfy the matcher,\n\t\t// keep track of the number of skipped optional parameters and continue\n\t\tif (param.optional && param.chained) {\n\t\t\tbuffered++;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// otherwise, if the matcher returns `false`, the route did not match\n\t\treturn;\n\t}\n\n\tif (buffered) return;\n\treturn result;\n}\n\n/** @param {string} str */\nfunction escape(str) {\n\treturn (\n\t\tstr\n\t\t\t.normalize()\n\t\t\t// escape [ and ] before escaping other characters, since they are used in the replacements\n\t\t\t.replace(/[[\\]]/g, '\\\\$&')\n\t\t\t// replace %, /, ? and # with their encoded versions because decode_pathname leaves them untouched\n\t\t\t.replace(/%/g, '%25')\n\t\t\t.replace(/\\//g, '%2[Ff]')\n\t\t\t.replace(/\\?/g, '%3[Ff]')\n\t\t\t.replace(/#/g, '%23')\n\t\t\t// escape characters that have special meaning in regex\n\t\t\t.replace(/[.*+?^${}()|\\\\]/g, '\\\\$&')\n\t);\n}\n\nconst basic_param_pattern = /\\[(\\[)?(\\.\\.\\.)?(\\w+?)(?:=(\\w+))?\\]\\]?/g;\n\n/**\n * Populate a route ID with params to resolve a pathname.\n * @example\n * ```js\n * resolveRoute(\n *   `/blog/[slug]/[...somethingElse]`,\n *   {\n *     slug: 'hello-world',\n *     somethingElse: 'something/else'\n *   }\n * ); // `/blog/hello-world/something/else`\n * ```\n * @param {string} id\n * @param {Record<string, string | undefined>} params\n * @returns {string}\n */\nexport function resolve_route(id, params) {\n\tconst segments = get_route_segments(id);\n\treturn (\n\t\t'/' +\n\t\tsegments\n\t\t\t.map((segment) =>\n\t\t\t\tsegment.replace(basic_param_pattern, (_, optional, rest, name) => {\n\t\t\t\t\tconst param_value = params[name];\n\n\t\t\t\t\t// This is nested so TS correctly narrows the type\n\t\t\t\t\tif (!param_value) {\n\t\t\t\t\t\tif (optional) return '';\n\t\t\t\t\t\tif (rest && param_value !== undefined) return '';\n\t\t\t\t\t\tthrow new Error(`Missing parameter '${name}' in route ${id}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (param_value.startsWith('/') || param_value.endsWith('/'))\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Parameter '${name}' in route ${id} cannot start or end with a slash -- this would cause an invalid route like foo//bar`\n\t\t\t\t\t\t);\n\t\t\t\t\treturn param_value;\n\t\t\t\t})\n\t\t\t)\n\t\t\t.filter(Boolean)\n\t\t\t.join('/')\n\t);\n}\n","import { exec, parse_route_id } from '../../utils/routing.js';\n\n/**\n * @param {import('./types.js').SvelteKitApp} app\n * @returns {import('types').CSRRoute[]}\n */\nexport function parse({ nodes, server_loads, dictionary, matchers }) {\n\tconst layouts_with_server_load = new Set(server_loads);\n\n\treturn Object.entries(dictionary).map(([id, [leaf, layouts, errors]]) => {\n\t\tconst { pattern, params } = parse_route_id(id);\n\n\t\tconst route = {\n\t\t\tid,\n\t\t\t/** @param {string} path */\n\t\t\texec: (path) => {\n\t\t\t\tconst match = pattern.exec(path);\n\t\t\t\tif (match) return exec(match, params, matchers);\n\t\t\t},\n\t\t\terrors: [1, ...(errors || [])].map((n) => nodes[n]),\n\t\t\tlayouts: [0, ...(layouts || [])].map(create_layout_loader),\n\t\t\tleaf: create_leaf_loader(leaf)\n\t\t};\n\n\t\t// bit of a hack, but ensures that layout/error node lists are the same\n\t\t// length, without which the wrong data will be applied if the route\n\t\t// manifest looks like `[[a, b], [c,], d]`\n\t\troute.errors.length = route.layouts.length = Math.max(\n\t\t\troute.errors.length,\n\t\t\troute.layouts.length\n\t\t);\n\n\t\treturn route;\n\t});\n\n\t/**\n\t * @param {number} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader]}\n\t */\n\tfunction create_leaf_loader(id) {\n\t\t// whether or not the route uses the server data is\n\t\t// encoded using the ones' complement, to save space\n\t\tconst uses_server_data = id < 0;\n\t\tif (uses_server_data) id = ~id;\n\t\treturn [uses_server_data, nodes[id]];\n\t}\n\n\t/**\n\t * @param {number | undefined} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader] | undefined}\n\t */\n\tfunction create_layout_loader(id) {\n\t\t// whether or not the layout uses the server data is\n\t\t// encoded in the layouts array, to save space\n\t\treturn id === undefined ? id : [layouts_with_server_load.has(id), nodes[id]];\n\t}\n}\n","/**\n * Read a value from `sessionStorage`\n * @param {string} key\n * @param {(value: string) => any} parse\n */\nexport function get(key, parse = JSON.parse) {\n\ttry {\n\t\treturn parse(sessionStorage[key]);\n\t} catch {\n\t\t// do nothing\n\t}\n}\n\n/**\n * Write a value to `sessionStorage`\n * @param {string} key\n * @param {any} value\n * @param {(value: any) => string} stringify\n */\nexport function set(key, value, stringify = JSON.stringify) {\n\tconst data = stringify(value);\n\ttry {\n\t\tsessionStorage[key] = data;\n\t} catch {\n\t\t// do nothing\n\t}\n}\n","/**\n * @param {Set<string>} expected\n */\nfunction validator(expected) {\n\t/**\n\t * @param {any} module\n\t * @param {string} [file]\n\t */\n\tfunction validate(module, file) {\n\t\tif (!module) return;\n\n\t\tfor (const key in module) {\n\t\t\tif (key[0] === '_' || expected.has(key)) continue; // key is valid in this module\n\n\t\t\tconst values = [...expected.values()];\n\n\t\t\tconst hint =\n\t\t\t\thint_for_supported_files(key, file?.slice(file.lastIndexOf('.'))) ??\n\t\t\t\t`valid exports are ${values.join(', ')}, or anything with a '_' prefix`;\n\n\t\t\tthrow new Error(`Invalid export '${key}'${file ? ` in ${file}` : ''} (${hint})`);\n\t\t}\n\t}\n\n\treturn validate;\n}\n\n/**\n * @param {string} key\n * @param {string} ext\n * @returns {string | void}\n */\nfunction hint_for_supported_files(key, ext = '.js') {\n\tconst supported_files = [];\n\n\tif (valid_layout_exports.has(key)) {\n\t\tsupported_files.push(`+layout${ext}`);\n\t}\n\n\tif (valid_page_exports.has(key)) {\n\t\tsupported_files.push(`+page${ext}`);\n\t}\n\n\tif (valid_layout_server_exports.has(key)) {\n\t\tsupported_files.push(`+layout.server${ext}`);\n\t}\n\n\tif (valid_page_server_exports.has(key)) {\n\t\tsupported_files.push(`+page.server${ext}`);\n\t}\n\n\tif (valid_server_exports.has(key)) {\n\t\tsupported_files.push(`+server${ext}`);\n\t}\n\n\tif (supported_files.length > 0) {\n\t\treturn `'${key}' is a valid export in ${supported_files.slice(0, -1).join(', ')}${\n\t\t\tsupported_files.length > 1 ? ' or ' : ''\n\t\t}${supported_files.at(-1)}`;\n\t}\n}\n\nconst valid_layout_exports = new Set([\n\t'load',\n\t'prerender',\n\t'csr',\n\t'ssr',\n\t'trailingSlash',\n\t'config'\n]);\nconst valid_page_exports = new Set([...valid_layout_exports, 'entries']);\nconst valid_layout_server_exports = new Set([...valid_layout_exports]);\nconst valid_page_server_exports = new Set([...valid_layout_server_exports, 'actions', 'entries']);\nconst valid_server_exports = new Set([\n\t'GET',\n\t'POST',\n\t'PATCH',\n\t'PUT',\n\t'DELETE',\n\t'OPTIONS',\n\t'HEAD',\n\t'fallback',\n\t'prerender',\n\t'trailingSlash',\n\t'config',\n\t'entries'\n]);\n\nexport const validate_layout_exports = validator(valid_layout_exports);\nexport const validate_page_exports = validator(valid_page_exports);\nexport const validate_layout_server_exports = validator(valid_layout_server_exports);\nexport const validate_page_server_exports = validator(valid_page_server_exports);\nexport const validate_server_exports = validator(valid_server_exports);\n","/**\n * Removes nullish values from an array.\n *\n * @template T\n * @param {Array<T>} arr\n */\nexport function compact(arr) {\n\treturn arr.filter(/** @returns {val is NonNullable<T>} */ (val) => val != null);\n}\n","export class HttpError {\n\t/**\n\t * @param {number} status\n\t * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body\n\t */\n\tconstructor(status, body) {\n\t\tthis.status = status;\n\t\tif (typeof body === 'string') {\n\t\t\tthis.body = { message: body };\n\t\t} else if (body) {\n\t\t\tthis.body = body;\n\t\t} else {\n\t\t\tthis.body = { message: `Error: ${status}` };\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn JSON.stringify(this.body);\n\t}\n}\n\nexport class Redirect {\n\t/**\n\t * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308} status\n\t * @param {string} location\n\t */\n\tconstructor(status, location) {\n\t\tthis.status = status;\n\t\tthis.location = location;\n\t}\n}\n\n/**\n * An error that was thrown from within the SvelteKit runtime that is not fatal and doesn't result in a 500, such as a 404.\n * `SvelteKitError` goes through `handleError`.\n * @extends Error\n */\nexport class SvelteKitError extends Error {\n\t/**\n\t * @param {number} status\n\t * @param {string} text\n\t * @param {string} message\n\t */\n\tconstructor(status, text, message) {\n\t\tsuper(message);\n\t\tthis.status = status;\n\t\tthis.text = text;\n\t}\n}\n\n/**\n * @template {Record<string, unknown> | undefined} [T=undefined]\n */\nexport class ActionFailure {\n\t/**\n\t * @param {number} status\n\t * @param {T} data\n\t */\n\tconstructor(status, data) {\n\t\tthis.status = status;\n\t\tthis.data = data;\n\t}\n}\n\n/**\n * This is a grotesque hack that, in dev, allows us to replace the implementations\n * of these classes that you'd get by importing them from `@sveltejs/kit` with the\n * ones that are imported via Vite and loaded internally, so that instanceof\n * checks work even though SvelteKit imports this module via Vite and consumers\n * import it via Node\n * @param {{\n *   ActionFailure: typeof ActionFailure;\n *   HttpError: typeof HttpError;\n *   Redirect: typeof Redirect;\n *   SvelteKitError: typeof SvelteKitError;\n * }} implementations\n */\nexport function replace_implementations(implementations) {\n\t// @ts-expect-error\n\tActionFailure = implementations.ActionFailure; // eslint-disable-line no-class-assign\n\t// @ts-expect-error\n\tHttpError = implementations.HttpError; // eslint-disable-line no-class-assign\n\t// @ts-expect-error\n\tRedirect = implementations.Redirect; // eslint-disable-line no-class-assign\n\t// @ts-expect-error\n\tSvelteKitError = implementations.SvelteKitError; // eslint-disable-line no-class-assign\n}\n","/**\n * @param {string} route_id\n * @param {string} dep\n */\nexport function validate_depends(route_id, dep) {\n\tconst match = /^(moz-icon|view-source|jar):/.exec(dep);\n\tif (match) {\n\t\tconsole.warn(\n\t\t\t`${route_id}: Calling \\`depends('${dep}')\\` will throw an error in Firefox because \\`${match[1]}\\` is a special URI scheme`\n\t\t);\n\t}\n}\n\nexport const INVALIDATED_PARAM = 'x-sveltekit-invalidated';\n\nexport const TRAILING_SLASH_PARAM = 'x-sveltekit-trailing-slash';\n","import { HttpError, SvelteKitError } from '../runtime/control.js';\n\n/**\n * @param {unknown} err\n * @return {Error}\n */\nexport function coalesce_to_error(err) {\n\treturn err instanceof Error ||\n\t\t(err && /** @type {any} */ (err).name && /** @type {any} */ (err).message)\n\t\t? /** @type {Error} */ (err)\n\t\t: new Error(JSON.stringify(err));\n}\n\n/**\n * This is an identity function that exists to make TypeScript less\n * paranoid about people throwing things that aren't errors, which\n * frankly is not something we should care about\n * @param {unknown} error\n */\nexport function normalize_error(error) {\n\treturn /** @type {import('../runtime/control.js').Redirect | HttpError | SvelteKitError | Error} */ (\n\t\terror\n\t);\n}\n\n/**\n * @param {unknown} error\n */\nexport function get_status(error) {\n\treturn error instanceof HttpError || error instanceof SvelteKitError ? error.status : 500;\n}\n\n/**\n * @param {unknown} error\n */\nexport function get_message(error) {\n\treturn error instanceof SvelteKitError ? error.text : 'Internal Error';\n}\n"],"names":["split","node","text","resolve","deserialize_uses","deserialize","id","data","error","deferred","deferreds","uses","reset_focus","autofocus","root","tabindex","selection","ranges","i","a","b","create_navigation","current","intent","url","type","fulfil","reject","complete","f","r","start","app","target","hydrate","client","create_client","init","decoder","value","normalize_path","path","trailing_slash","decode_pathname","pathname","decode_params","params","key","strip_hash","href","tracked_url_properties","make_trackable","callback","search_params_callback","tracked","obj","param","property","disable_hash","DATA_SUFFIX","HTML_DATA_SUFFIX","add_data_suffix","hash","values","buffer","native_fetch","input","cache","build_selector","b64_decode","d","u8","initial_fetch","resource","opts","selector","script","body","ttl","subsequent_fetch","resolved","cached","param_pattern","parse_route_id","get_route_segments","segment","rest_match","optional_match","parts","content","escape","code","match","is_optional","is_rest","name","matcher","affects_path","route","exec","matchers","result","values_needing_match","buffered","s","next_param","next_value","str","parse","nodes","server_loads","dictionary","layouts_with_server_load","leaf","layouts","errors","pattern","n","create_layout_loader","create_leaf_loader","uses_server_data","get","set","stringify","valid_layout_exports","valid_layout_server_exports","compact","arr","val","HttpError","status","Redirect","location","SvelteKitError","message","INVALIDATED_PARAM","TRAILING_SLASH_PARAM","get_status","get_message","scroll_positions","storage.get","SCROLL_KEY","states","STATES_KEY","devalue.parse","snapshots","SNAPSHOT_KEY","original_push_state","original_replace_state","update_scroll_positions","index","scroll_state","clear_onward_history","current_history_index","current_navigation_index","native_navigation","noop","routes","default_layout_loader","default_error_loader","container","invalidated","components","load_cache","callbacks","hydrated","started","autoscroll","updating","navigating","hash_navigating","has_navigated","force_invalidation","HISTORY_INDEX","NAVIGATION_INDEX","scroll","page","token","pending_invalidate","invalidate","get_navigation_intent","nav_token","navigation_result","load_route","goto","capture_snapshot","c","restore_snapshot","persist_state","storage.set","devalue.stringify","options","redirect_count","navigate","resolve_url","preload_data","preload_code","get_url_path","load","initialize","style","stores","navigation","fn","get_navigation_result_from_branch","branch","form","slash","branch_node","data_changed","p","prev","load_node","loader","parent","server_data_node","is_tracking","depends","deps","dep","load_input","requested","base","has_changed","parent_changed","route_changed","url_changed","search_params_changed","tracked_params","create_data_node","previous","diff_search_params","old_url","new_url","changed","old_values","new_values","invalidating","loaders","server_data","parent_invalid","invalid_server_nodes","invalid","load_data","load_root_error_page","handle_error","server_data_nodes","branch_promises","j","err","error_load","load_nearest_error_page","server_fallback","origin","root_layout","root_error","is_external_url","before_navigate","delta","should_block","nav","cancellable","popped","keepfocus","noscroll","replace_state","state","accept","block","previous_history_index","previous_navigation_index","change","entry","after_navigate","cleanup","activeElement","tick","deep_linked","changed_focus","setup_preload","mousemove_timeout","event","preload","tap","observer","entries","element","priority","find_anchor","external","download","get_link_info","get_router_options","PRELOAD_PRIORITIES","onMount","PAGE_URL_KEY","nonhash","update_url","submitter","event_form","submitter_name","history_index","navigation_index","is_hash_change","link","node_ids","parsed_route","data_url","res","reader","devalue.unflatten","done"],"mappings":"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"}