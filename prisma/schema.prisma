// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/lib/zod"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ************************ //
// AUTHENTICATION AND ROLES //
// ************************ //

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid()) /// @zod.custom.omit([model,Â input])
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tenantUsers   TenantUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TenantUser {
  id         Int     @id @default(autoincrement())
  role       Role    @default(STAFF)
  tenantId   Int
  tenant     Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  is_default Boolean @default(false)

  createdParts Part[] @relation("creationAuthor")
  updatedParts Part[] @relation("updateAuthor")
  deletedParts Part[] @relation("deletionAuthor")

  customFieldResponses CustomFieldResponse[]
  inspections          Inspection[]
}

model Client {
  id          Int     @id @default(autoincrement())
  name        String
  email       String
  phoneNumber String  @unique /// @zod.string.regex(new RegExp(/^([+]?[\s0-9]+)?(\d{3}|[(]?[0-9]+[)])?([-]?[\s]?[0-9])+$/), { message:"Invalid Number!"})
  avatar      String?

  tenantId  Int
  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  contracts Contract[]
}

model Tenant {
  id          Int          @id @default(autoincrement())
  name        String
  email       String?
  isAdmin     Boolean      @default(false)
  clients     Client[]
  tenantUsers TenantUser[]
  Part        Part[]
  Category    Category[]
  Location    Location[]
  Vendor      Vendor[]
  customForms CustomForm[]
  inspections Inspection[]
}

enum Role {
  STAFF
  ADMIN
  OWNER
}

// ************************ //
//      VEHICLES MODELS     //
// ************************ //

enum Type {
  ATV
  Boat
  Bus
  Car
  Chassis
  Equipment
  Forklift
  Freightliner
  Generator
  Machinery
  Motorcycle
  Plane
  RV
  SUV
  Tractor
  Trailer
  Truck
  Van
  Custom
}

model Vehicle {
  id          Int    @id @default(autoincrement())
  type        Type
  year        Int
  make        String
  model       String
  trim        String
  plate       String @unique
  vin         String @unique
  odometer    Int
  nickname    String
  spare_tires Int
  extraFields Json?

  status          VehicleStatus
  vehiclePictures VehiclePicture[]
  documents       Document[]
  costs           Cost[]
  contracts       Contract[]
  tolls           TollDue[]
  inspections     Inspection[]
}

enum VehicleStatus {
  AVAILABLE
  UNAVAILABLE
}

model VehiclePicture {
  id        Int     @id @default(autoincrement())
  image     String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId Int
  pinned    Boolean @default(false)
}

model Document {
  id              Int           @id @default(autoincrement())
  file            String
  name            String
  note            String
  document_type   String
  expiration_date DateTime?
  remainder_days  Int?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  vehicle         Vehicle       @relation(fields: [vehicleId], references: [id])
  vehicleId       Int
  tags            DocumentTag[]
  extraFields     Json?
}

model DocumentTag {
  id         Int      @id @default(autoincrement())
  name       String
  document   Document @relation(fields: [documentId], references: [id])
  documentId Int
}

model CustomForm {
  id          Int           @id @default(autoincrement())
  name        String
  tenantId    Int
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  // Only show form if is active
  isActive    Boolean       @default(true)
  fields      CustomField[]
  inspections Inspection[]
}

enum FormFieldType {
  TEXT
  NUMBER
  RADIO
  SINGLE_CHECK
  MULTI_CHECK
  CHECKBOXES
  DATE
}

model CheckOption {
  id        Int                   @id @default(autoincrement())
  name      String?
  fieldId   Int
  field     CustomField           @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  responses CustomFieldResponse[]
}

model CustomField {
  id           Int                   @id @default(autoincrement())
  name         String
  type         FormFieldType
  required     Boolean?              @default(true)
  formId       Int
  form         CustomForm            @relation(fields: [formId], references: [id], onDelete: Cascade)
  checkOptions CheckOption[]
  // tenant user responses
  responses    CustomFieldResponse[]
}

model CustomFieldResponse {
  id            Int          @id @default(autoincrement())
  // if is text , number etc
  content       String?
  // if is checkbox ,radio
  checked       Boolean?
  note          String?
  createdAt     DateTime     @default(now())
  tenantUserId  Int
  user          TenantUser   @relation(fields: [tenantUserId], references: [id], onDelete: Cascade)
  fieldId       Int
  field         CustomField  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  checkOptionId Int?
  checkOption   CheckOption? @relation(fields: [checkOptionId], references: [id], onDelete: Cascade)
  inspectionId  Int?
  inspection    Inspection?  @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
}

model Inspection {
  id           Int                   @id @default(autoincrement())
  createdAt    DateTime              @default(now())
  customFormId Int
  customForm   CustomForm            @relation(fields: [customFormId], references: [id], onDelete: Cascade)
  tenantId     Int
  tenant       Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vehicleId    Int
  vehicle      Vehicle               @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  tenantUserId Int
  user         TenantUser            @relation(fields: [tenantUserId], references: [id], onDelete: Cascade)
  responses    CustomFieldResponse[]
}

// Inventory-related models.

model Part {
  id               String @id @default(cuid()) @db.VarChar(30)
  name             String
  number           Int
  criticalQty      Int
  upc              Int
  description      String @db.Text
  extendedPartData Json?

  // Amazon S3 services.
  image String? @db.Text

  // Built-in.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // nullable field to simulate deletedAt built-in method.

  categories CategoriesOnParts[]
  locations  LocationsOnParts[]
  vendors    VendorOnParts[]

  createdBy Int?
  updatedBy Int?
  deletedBy Int?

  // Relations.
  creationAuthor TenantUser? @relation("creationAuthor", fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updateAuthor   TenantUser? @relation("updateAuthor", fields: [updatedBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deletionAuthor TenantUser? @relation("deletionAuthor", fields: [deletedBy], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Multi-tenant identification.
  tenantId Int
  tenant   Tenant @relation(fields: [tenantId], references: [id])
}

model Category {
  id   String @id @default(cuid()) @db.VarChar(30)
  name String @unique

  // Built-in.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // nullable field to simulate deletedAt built-in method.

  parts CategoriesOnParts[]

  // Multi-tenant identification.
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId Int
}

model Location {
  id   String @id @default(cuid()) @db.VarChar(30)
  name String @unique

  // Built-in.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // nullable field to simulate deletedAt built-in method.

  parts LocationsOnParts[]

  // Multi-tenant identification.
  tenantId Int
  tenant   Tenant @relation(fields: [tenantId], references: [id])
}

model Vendor {
  id   String @id @default(cuid()) @db.VarChar(30)
  name String @unique

  // Built-in.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // nullable field to simulate deletedAt built-in method.

  parts VendorOnParts[]

  // Multi-tenant identification.
  tenantId Int
  tenant   Tenant @relation(fields: [tenantId], references: [id])
}

model CategoriesOnParts {
  part       Part     @relation(fields: [partId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  partId     String   @db.VarChar(30)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.VarChar(30)

  @@id([partId, categoryId])
}

model LocationsOnParts {
  part       Part     @relation(fields: [partId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  partId     String   @db.VarChar(30)
  Location   Location @relation(fields: [locationId], references: [id])
  locationId String   @db.VarChar(30)

  // Location-per-part fields.
  quantity Int
  unit     String

  @@id([partId, locationId])
}

model VendorOnParts {
  part     Part   @relation(fields: [partId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  partId   String @db.VarChar(30)
  vendor   Vendor @relation(fields: [vendorId], references: [id])
  vendorId String @db.VarChar(30)

  // Vendor-per-part price.
  cost Float

  @@id([partId, vendorId])
}

// ************************ //
//          COSTS           //
// ************************ //

enum CostCategory {
  // Fixed Costs
  Purchase
  Depreciation
  Financing
  Insurance
  Taxes
  PreventativeMaintenance
  Storage
  PermitsAndLicenses

  // Variable costs
  Fuel
  Repairs
  Cleaning
  TollsAndHighways
  RoadsideAssistance
  MarketingAndAdvertising
  AdministrativeExpenses
  Commissions

  // Additional costs
  AdditionalEquipment
  RentalInsurance
  Deductible
  CleaningFee
  AdditionalMileage
}

model Cost {
  id        Int            @id @default(autoincrement())
  value     Float
  concept   String
  category  CostCategory[]
  date      DateTime
  vehicle   Vehicle        @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vehicleId Int
}

// ************************ //
//        END:COSTS         //
// ************************ //

model RentalPlan {
  id          Int         @id @default(autoincrement())
  amount      Int
  name        String
  periodicity Periodicity

  contracts Contract[]

  @@unique([name, periodicity, amount])
}

enum Periodicity {
  WEEKLY
  BIWEEKLY
  MONTHLY
}

model Contract {
  id           Int         @id @default(autoincrement())
  client       Client      @relation(fields: [clientId], references: [id])
  clientId     Int
  rentalPlan   RentalPlan  @relation(fields: [rentalPlanId], references: [id])
  rentalPlanId Int
  vehicle      Vehicle     @relation(fields: [vehicleId], references: [id])
  vehicleId    Int
  stage        StageUpdate @relation(fields: [stageId], references: [id])
  stageId      Int
  //inspections    Inspection[]  --- doesn't exists yet
  tolls        TollDue[]
}

model StageUpdate {
  id              Int          @id @default(autoincrement())
  date            DateTime
  reason          String?
  comments        String?
  previousStage   StageUpdate? @relation(name: "previousStage", fields: [previousStageId], references: [id])
  previousStageId Int?          @unique
  stage           Stage

  //keeps for back ref
  stageRef  StageUpdate? @relation(name: "previousStage")
  contracts Contract[]
}

enum Stage {
  PENDING
  ACTIVE
  ENDED
  DISMISS
}

model TollDue {
  id            Int          @id @default(autoincrement())
  amount        Int
  vehicle       Vehicle      @relation(fields: [vehicleId], references: [id])
  vehicleId     Int
  contract      Contract     @relation(fields: [contractId], references: [id])
  contractId    Int
  stage         TollDueStage
  invoice       String?
  invoiceNumber String?
  createDate    DateTime
  note          String?
}

enum TollDueStage {
  PAID
  UNPAID
}
