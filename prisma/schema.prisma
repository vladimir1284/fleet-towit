generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/lib/zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Client {
  id          Int     @id @default(autoincrement())
  email       String
  phoneNumber String  @unique
  avatar      String?
  companyId   Int
  firstName   String
  lastName    String
  Company     Company @relation(fields: [companyId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Company {
  id          Int           @id @default(autoincrement())
  name        String
  email       String?
  isAdmin     Boolean       @default(false)
  Client      Client[]
  CompanyUser CompanyUser[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CompanyUser {
  id        Int     @id @default(autoincrement())
  role      Role    @default(STAFF)
  companyId Int
  userId    Int
  Company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int           @id @default(autoincrement())
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  Account       Account[]
  CompanyUser   CompanyUser[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  STAFF
  ADMIN
  OWNER
}
